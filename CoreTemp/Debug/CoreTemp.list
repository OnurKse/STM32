
CoreTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800aeb8  0800aeb8  0001aeb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b28c  0800b28c  0001b28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b294  0800b294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b298  0800b298  0001b298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800b29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b4  240001d8  0800b474  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400048c  0800b474  0002048c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a4c5  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002e01  00000000  00000000  0003a70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001498  00000000  00000000  0003d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000100a  00000000  00000000  0003e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039f1c  00000000  00000000  0003f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a2e3  00000000  00000000  000798ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001785ba  00000000  00000000  00093bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006834  00000000  00000000  0020c16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  002129a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ae9c 	.word	0x0800ae9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800ae9c 	.word	0x0800ae9c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <UART_Printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Printf(const char* fmt, ...)
{
 800068c:	b40f      	push	{r0, r1, r2, r3}
 800068e:	b580      	push	{r7, lr}
 8000690:	b0c2      	sub	sp, #264	; 0x108
 8000692:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8000694:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800069c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006a0:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 80006a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006aa:	f107 0008 	add.w	r0, r7, #8
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	f008 fb70 	bl	8008d9c <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fe5d 	bl	8000380 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f107 0108 	add.w	r1, r7, #8
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <UART_Printf+0x5c>)
 80006d4:	f006 fce2 	bl	800709c <HAL_UART_Transmit>
    va_end(args);
}
 80006d8:	bf00      	nop
 80006da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80006de:	46bd      	mov	sp, r7
 80006e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr
 80006e8:	24000258 	.word	0x24000258

080006ec <MCU_TemperatureCalculate>:

float MCU_TemperatureCalculate(uint32_t ts_data)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	float temperature_cal1 = 30.0;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MCU_TemperatureCalculate+0x78>)
 80006f6:	617b      	str	r3, [r7, #20]
	float temperature_cal2 = 110.0;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MCU_TemperatureCalculate+0x7c>)
 80006fa:	613b      	str	r3, [r7, #16]
    uint16_t *ts_cal1 = (uint16_t *)0x1FF1E820; // TS_CAL1 @ VREF+ = 3.3 V, at 30 °C
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MCU_TemperatureCalculate+0x80>)
 80006fe:	60fb      	str	r3, [r7, #12]
	uint16_t *ts_cal2 = (uint16_t *)0x1FF1E840; // TS_CAL2 @ VREF+ = 3.3 V, at 110 °C
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MCU_TemperatureCalculate+0x84>)
 8000702:	60bb      	str	r3, [r7, #8]
	return (((float)ts_data - (float)(*ts_cal1)) * (temperature_cal2 - temperature_cal1)) / ((float)(*ts_cal2) - (float)(*ts_cal1)) + temperature_cal1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800071e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000722:	edd7 7a05 	vldr	s15, [r7, #20]
 8000726:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800072a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	ee07 3a90 	vmov	s15, r3
 8000736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800074e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000752:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000756:	eeb0 0a67 	vmov.f32	s0, s15
 800075a:	371c      	adds	r7, #28
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	41f00000 	.word	0x41f00000
 8000768:	42dc0000 	.word	0x42dc0000
 800076c:	1ff1e820 	.word	0x1ff1e820
 8000770:	1ff1e840 	.word	0x1ff1e840

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800077a:	f000 f9f5 	bl	8000b68 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <main+0x138>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d11b      	bne.n	80007c2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800078a:	f3bf 8f4f 	dsb	sy
}
 800078e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000790:	f3bf 8f6f 	isb	sy
}
 8000794:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <main+0x138>)
 8000798:	2200      	movs	r2, #0
 800079a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800079e:	f3bf 8f4f 	dsb	sy
}
 80007a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a4:	f3bf 8f6f 	isb	sy
}
 80007a8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007aa:	4b40      	ldr	r3, [pc, #256]	; (80008ac <main+0x138>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <main+0x138>)
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b6:	f3bf 8f4f 	dsb	sy
}
 80007ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007bc:	f3bf 8f6f 	isb	sy
}
 80007c0:	e000      	b.n	80007c4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007c2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <main+0x138>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d138      	bne.n	8000842 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <main+0x138>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007d8:	f3bf 8f4f 	dsb	sy
}
 80007dc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <main+0x138>)
 80007e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007e4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	0b5b      	lsrs	r3, r3, #13
 80007ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ee:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	08db      	lsrs	r3, r3, #3
 80007f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007f8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	015a      	lsls	r2, r3, #5
 80007fe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000802:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000808:	4928      	ldr	r1, [pc, #160]	; (80008ac <main+0x138>)
 800080a:	4313      	orrs	r3, r2
 800080c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1ef      	bne.n	80007fa <main+0x86>
    } while(sets-- != 0U);
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	60ba      	str	r2, [r7, #8]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1e5      	bne.n	80007f0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <main+0x138>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <main+0x138>)
 8000830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000834:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000836:	f3bf 8f4f 	dsb	sy
}
 800083a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800083c:	f3bf 8f6f 	isb	sy
}
 8000840:	e000      	b.n	8000844 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000842:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fcb6 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f838 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f962 	bl	8000b14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000850:	f000 f914 	bl	8000a7c <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000854:	f000 f8b0 	bl	80009b8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000858:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800085c:	2100      	movs	r1, #0
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <main+0x13c>)
 8000860:	f002 f822 	bl	80028a8 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc3); // start the adc
 8000864:	4812      	ldr	r0, [pc, #72]	; (80008b0 <main+0x13c>)
 8000866:	f001 f8db 	bl	8001a20 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc3, 100) == HAL_OK)
 800086a:	2164      	movs	r1, #100	; 0x64
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <main+0x13c>)
 800086e:	f001 f9a1 	bl	8001bb4 <HAL_ADC_PollForConversion>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d110      	bne.n	800089a <main+0x126>
		  UART_Printf("Temp: %f\r\n", MCU_TemperatureCalculate(HAL_ADC_GetValue(&hadc3)));
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <main+0x13c>)
 800087a:	f001 fa8f 	bl	8001d9c <HAL_ADC_GetValue>
 800087e:	4603      	mov	r3, r0
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff33 	bl	80006ec <MCU_TemperatureCalculate>
 8000886:	eef0 7a40 	vmov.f32	s15, s0
 800088a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800088e:	ec53 2b17 	vmov	r2, r3, d7
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <main+0x140>)
 8000894:	f7ff fefa 	bl	800068c <UART_Printf>
 8000898:	e002      	b.n	80008a0 <main+0x12c>
	  else
		  UART_Printf("ADC conversion not finished!\r\n");
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <main+0x144>)
 800089c:	f7ff fef6 	bl	800068c <UART_Printf>
	  HAL_Delay(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a4:	f000 fce2 	bl	800126c <HAL_Delay>
	  HAL_ADC_Start(&hadc3); // start the adc
 80008a8:	e7dc      	b.n	8000864 <main+0xf0>
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00
 80008b0:	240001f4 	.word	0x240001f4
 80008b4:	0800aeb8 	.word	0x0800aeb8
 80008b8:	0800aec4 	.word	0x0800aec4

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	; 0x70
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	224c      	movs	r2, #76	; 0x4c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fa74 	bl	8008db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2220      	movs	r2, #32
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f008 fa6e 	bl	8008db8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008dc:	2002      	movs	r0, #2
 80008de:	f002 fb53 	bl	8002f88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <SystemClock_Config+0xf4>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	4a31      	ldr	r2, [pc, #196]	; (80009b0 <SystemClock_Config+0xf4>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <SystemClock_Config+0xf4>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <SystemClock_Config+0xf8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000904:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <SystemClock_Config+0xf8>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <SystemClock_Config+0xf8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000918:	bf00      	nop
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemClock_Config+0xf8>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000926:	d1f8      	bne.n	800091a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800092c:	2301      	movs	r3, #1
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000940:	2309      	movs	r3, #9
 8000942:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000950:	230c      	movs	r3, #12
 8000952:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000954:	2302      	movs	r3, #2
 8000956:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000958:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800095c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fb4a 	bl	8002ffc <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800096e:	f000 f93b 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	233f      	movs	r3, #63	; 0x3f
 8000974:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2303      	movs	r3, #3
 8000978:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2101      	movs	r1, #1
 8000998:	4618      	mov	r0, r3
 800099a:	f002 ff89 	bl	80038b0 <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80009a4:	f000 f920 	bl	8000be8 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3770      	adds	r7, #112	; 0x70
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58000400 	.word	0x58000400
 80009b4:	58024800 	.word	0x58024800

080009b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <MX_ADC3_Init+0xbc>)
 80009d4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009e4:	2204      	movs	r2, #4
 80009e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC3_Init+0xb8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a28:	f000 fe58 	bl	80016dc <HAL_ADC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000a32:	f000 f8d9 	bl	8000be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_ADC3_Init+0xc0>)
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a42:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_ADC3_Init+0xb8>)
 8000a5a:	f001 f9ad 	bl	8001db8 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000a64:	f000 f8c0 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	240001f4 	.word	0x240001f4
 8000a74:	58026000 	.word	0x58026000
 8000a78:	cb840000 	.word	0xcb840000

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <MX_USART1_UART_Init+0x94>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ac6:	f006 fa99 	bl	8006ffc <HAL_UART_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ad0:	f000 f88a 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ad8:	f007 fb29 	bl	800812e <HAL_UARTEx_SetTxFifoThreshold>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae2:	f000 f881 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aea:	f007 fb5e 	bl	80081aa <HAL_UARTEx_SetRxFifoThreshold>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 f878 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000afa:	f007 fadf 	bl	80080bc <HAL_UARTEx_DisableFifoMode>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 f870 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000258 	.word	0x24000258
 8000b10:	40011000 	.word	0x40011000

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_GPIO_Init+0x50>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <MX_GPIO_Init+0x50>)
 8000b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_GPIO_Init+0x50>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_GPIO_Init+0x50>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <MX_GPIO_Init+0x50>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_GPIO_Init+0x50>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	58024400 	.word	0x58024400

08000b68 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b7a:	f001 ffd9 	bl	8002b30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b86:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000b8a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000b8c:	2316      	movs	r3, #22
 8000b8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fff6 	bl	8002ba0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f001 ffd3 	bl	8002b60 <HAL_MPU_Enable>

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd6:	f000 fb29 	bl	800122c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010000 	.word	0x40010000

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x30>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x30>)
 8000c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58024400 	.word	0x58024400

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0b4      	sub	sp, #208	; 0xd0
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22c0      	movs	r2, #192	; 0xc0
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f008 f8bd 	bl	8008db8 <memset>
  if(hadc->Instance==ADC3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_ADC_MspInit+0x90>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d132      	bne.n	8000cae <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c54:	2304      	movs	r3, #4
 8000c56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000c58:	2309      	movs	r3, #9
 8000c5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c68:	23c0      	movs	r3, #192	; 0xc0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000c70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 f9e3 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000c8c:	f7ff ffac 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_ADC_MspInit+0x94>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <HAL_ADC_MspInit+0x94>)
 8000c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_ADC_MspInit+0x94>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	37d0      	adds	r7, #208	; 0xd0
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	58026000 	.word	0x58026000
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0ba      	sub	sp, #232	; 0xe8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	22c0      	movs	r2, #192	; 0xc0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f008 f869 	bl	8008db8 <memset>
  if(huart->Instance==USART1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d146      	bne.n	8000d7e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf0:	f04f 0201 	mov.w	r2, #1
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 f9a0 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d12:	f7ff ff69 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_UART_MspInit+0xd0>)
 8000d7a:	f001 ff55 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	37e8      	adds	r7, #232	; 0xe8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	58020000 	.word	0x58020000

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d844      	bhi.n	8000e2c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000da2:	2200      	movs	r2, #0
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	2019      	movs	r0, #25
 8000da8:	f001 fe9a 	bl	8002ae0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dac:	2019      	movs	r0, #25
 8000dae:	f001 feb1 	bl	8002b14 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000db2:	4a24      	ldr	r2, [pc, #144]	; (8000e44 <HAL_InitTick+0xb0>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <HAL_InitTick+0xb4>)
 8000dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dbe:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <HAL_InitTick+0xb4>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_InitTick+0xb4>)
 8000dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 f8f1 	bl	8003fc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000de6:	f003 f8d9 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8000dea:	4603      	mov	r3, r0
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <HAL_InitTick+0xb8>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9b      	lsrs	r3, r3, #18
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_InitTick+0xbc>)
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <HAL_InitTick+0xc0>)
 8000e02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0xbc>)
 8000e06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e0c:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_InitTick+0xbc>)
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_InitTick+0xbc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_InitTick+0xbc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <HAL_InitTick+0xbc>)
 8000e20:	f005 fe12 	bl	8006a48 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d107      	bne.n	8000e3a <HAL_InitTick+0xa6>
 8000e2a:	e001      	b.n	8000e30 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e005      	b.n	8000e3c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <HAL_InitTick+0xbc>)
 8000e32:	f005 fe6b 	bl	8006b0c <HAL_TIM_Base_Start_IT>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3738      	adds	r7, #56	; 0x38
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	24000008 	.word	0x24000008
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	240002ec 	.word	0x240002ec
 8000e54:	40010000 	.word	0x40010000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <TIM1_UP_IRQHandler+0x10>)
 8000eb6:	f005 fea1 	bl	8006bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	240002ec 	.word	0x240002ec

08000ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return 1;
 8000ec8:	2301      	movs	r3, #1
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_kill>:

int _kill(int pid, int sig)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ede:	f007 ffbd 	bl	8008e5c <__errno>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2216      	movs	r2, #22
 8000ee6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_exit>:

void _exit (int status)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ffe7 	bl	8000ed4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f06:	e7fe      	b.n	8000f06 <_exit+0x12>

08000f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf1      	blt.n	8000f54 <_write+0x12>
  }
  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:

int _isatty(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f007 ff22 	bl	8008e5c <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	24080000 	.word	0x24080000
 8001044:	00000400 	.word	0x00000400
 8001048:	24000338 	.word	0x24000338
 800104c:	24000490 	.word	0x24000490

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <SystemInit+0xe4>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a36      	ldr	r2, [pc, #216]	; (8001134 <SystemInit+0xe4>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <SystemInit+0xe8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	2b06      	cmp	r3, #6
 800106e:	d807      	bhi.n	8001080 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <SystemInit+0xe8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 030f 	bic.w	r3, r3, #15
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <SystemInit+0xe8>)
 800107a:	f043 0307 	orr.w	r3, r3, #7
 800107e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <SystemInit+0xec>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2d      	ldr	r2, [pc, #180]	; (800113c <SystemInit+0xec>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <SystemInit+0xec>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <SystemInit+0xec>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4929      	ldr	r1, [pc, #164]	; (800113c <SystemInit+0xec>)
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <SystemInit+0xf0>)
 800109a:	4013      	ands	r3, r2
 800109c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SystemInit+0xe8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemInit+0xe8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 030f 	bic.w	r3, r3, #15
 80010b2:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemInit+0xe8>)
 80010b4:	f043 0307 	orr.w	r3, r3, #7
 80010b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <SystemInit+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <SystemInit+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <SystemInit+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <SystemInit+0xec>)
 80010ce:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <SystemInit+0xf4>)
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <SystemInit+0xec>)
 80010d4:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <SystemInit+0xf8>)
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <SystemInit+0xec>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <SystemInit+0xfc>)
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <SystemInit+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <SystemInit+0xec>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <SystemInit+0xfc>)
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <SystemInit+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <SystemInit+0xec>)
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <SystemInit+0xfc>)
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <SystemInit+0xec>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <SystemInit+0xec>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <SystemInit+0xec>)
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <SystemInit+0xec>)
 800110a:	2200      	movs	r2, #0
 800110c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <SystemInit+0x100>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <SystemInit+0x104>)
 8001114:	4013      	ands	r3, r2
 8001116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111a:	d202      	bcs.n	8001122 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <SystemInit+0x108>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <SystemInit+0x10c>)
 8001124:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001128:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	52002000 	.word	0x52002000
 800113c:	58024400 	.word	0x58024400
 8001140:	eaf6ed7f 	.word	0xeaf6ed7f
 8001144:	02020200 	.word	0x02020200
 8001148:	01ff0000 	.word	0x01ff0000
 800114c:	01010280 	.word	0x01010280
 8001150:	5c001000 	.word	0x5c001000
 8001154:	ffff0000 	.word	0xffff0000
 8001158:	51008108 	.word	0x51008108
 800115c:	52004000 	.word	0x52004000

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff ff74 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f007 fe6b 	bl	8008e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff faef 	bl	8000774 <main>
  bx  lr
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800119c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80011a4:	0800b29c 	.word	0x0800b29c
  ldr r2, =_sbss
 80011a8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80011ac:	2400048c 	.word	0x2400048c

080011b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC3_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f001 fc85 	bl	8002aca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011c0:	f002 fd2c 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_Init+0x68>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	4913      	ldr	r1, [pc, #76]	; (8001220 <HAL_Init+0x6c>)
 80011d2:	5ccb      	ldrb	r3, [r1, r3]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_Init+0x68>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_Init+0x6c>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_Init+0x70>)
 80011f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_Init+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	200f      	movs	r0, #15
 8001200:	f7ff fdc8 	bl	8000d94 <HAL_InitTick>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e002      	b.n	8001214 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800120e:	f7ff fcf1 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400
 8001220:	0800aee4 	.word	0x0800aee4
 8001224:	24000004 	.word	0x24000004
 8001228:	24000000 	.word	0x24000000

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400000c 	.word	0x2400000c
 8001250:	2400033c 	.word	0x2400033c

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2400033c 	.word	0x2400033c

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2400000c 	.word	0x2400000c

080012b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetREVID+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0c1b      	lsrs	r3, r3, #16
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	5c001000 	.word	0x5c001000

080012cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	609a      	str	r2, [r3, #8]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3360      	adds	r3, #96	; 0x60
 8001346:	461a      	mov	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	430b      	orrs	r3, r1
 8001362:	431a      	orrs	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001368:	bf00      	nop
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	431a      	orrs	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	611a      	str	r2, [r3, #16]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3360      	adds	r3, #96	; 0x60
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]
  }
}
 80013d0:	bf00      	nop
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001402:	b480      	push	{r7}
 8001404:	b087      	sub	sp, #28
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3330      	adds	r3, #48	; 0x30
 8001412:	461a      	mov	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	4413      	add	r3, r2
 8001420:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	211f      	movs	r1, #31
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	401a      	ands	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0e9b      	lsrs	r3, r3, #26
 800143a:	f003 011f 	and.w	r1, r3, #31
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	431a      	orrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800145a:	b480      	push	{r7}
 800145c:	b087      	sub	sp, #28
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3314      	adds	r3, #20
 800146a:	461a      	mov	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	0e5b      	lsrs	r3, r3, #25
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	0d1b      	lsrs	r3, r3, #20
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	2107      	movs	r1, #7
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	0d1b      	lsrs	r3, r3, #20
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	431a      	orrs	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014a4:	bf00      	nop
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014c8:	43db      	mvns	r3, r3
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0318 	and.w	r3, r3, #24
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014d4:	40d9      	lsrs	r1, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	400b      	ands	r3, r1
 80014da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014de:	431a      	orrs	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	000fffff 	.word	0x000fffff

080014f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 031f 	and.w	r3, r3, #31
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LL_ADC_DisableDeepPowerDown+0x20>)
 800153e:	4013      	ands	r3, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6093      	str	r3, [r2, #8]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	5fffffc0 	.word	0x5fffffc0

08001554 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001568:	d101      	bne.n	800156e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800158a:	4013      	ands	r3, r2
 800158c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	6fffffc0 	.word	0x6fffffc0

080015a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <LL_ADC_Enable+0x24>)
 80015da:	4013      	ands	r3, r2
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	7fffffc0 	.word	0x7fffffc0

080015f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_ADC_Disable+0x24>)
 8001602:	4013      	ands	r3, r2
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	7fffffc0 	.word	0x7fffffc0

0800161c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <LL_ADC_IsEnabled+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_IsEnabled+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b02      	cmp	r3, #2
 8001654:	d101      	bne.n	800165a <LL_ADC_IsDisableOngoing+0x18>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <LL_ADC_IsDisableOngoing+0x1a>
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <LL_ADC_REG_StartConversion+0x24>)
 8001676:	4013      	ands	r3, r2
 8001678:	f043 0204 	orr.w	r2, r3, #4
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	7fffffc0 	.word	0x7fffffc0

08001690 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d101      	bne.n	80016a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d101      	bne.n	80016ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e18f      	b.n	8001a16 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fa8f 	bl	8000c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff19 	bl	8001554 <LL_ADC_IsDeepPowerDownEnabled>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff feff 	bl	8001530 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff34 	bl	80015a4 <LL_ADC_IsInternalRegulatorEnabled>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d114      	bne.n	800176c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff18 	bl	800157c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800174c:	4b87      	ldr	r3, [pc, #540]	; (800196c <HAL_ADC_Init+0x290>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <HAL_ADC_Init+0x294>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	3301      	adds	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800175e:	e002      	b.n	8001766 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3b01      	subs	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f9      	bne.n	8001760 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff17 	bl	80015a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f043 0210 	orr.w	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff77 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 80017a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f040 8129 	bne.w	8001a04 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f040 8125 	bne.w	8001a04 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017c2:	f043 0202 	orr.w	r2, r3, #2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff24 	bl	800161c <LL_ADC_IsEnabled>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d136      	bne.n	8001848 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a65      	ldr	r2, [pc, #404]	; (8001974 <HAL_ADC_Init+0x298>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_ADC_Init+0x112>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_ADC_Init+0x29c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10e      	bne.n	800180c <HAL_ADC_Init+0x130>
 80017ee:	4861      	ldr	r0, [pc, #388]	; (8001974 <HAL_ADC_Init+0x298>)
 80017f0:	f7ff ff14 	bl	800161c <LL_ADC_IsEnabled>
 80017f4:	4604      	mov	r4, r0
 80017f6:	4860      	ldr	r0, [pc, #384]	; (8001978 <HAL_ADC_Init+0x29c>)
 80017f8:	f7ff ff10 	bl	800161c <LL_ADC_IsEnabled>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4323      	orrs	r3, r4
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e008      	b.n	800181e <HAL_ADC_Init+0x142>
 800180c:	485b      	ldr	r0, [pc, #364]	; (800197c <HAL_ADC_Init+0x2a0>)
 800180e:	f7ff ff05 	bl	800161c <LL_ADC_IsEnabled>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a53      	ldr	r2, [pc, #332]	; (8001974 <HAL_ADC_Init+0x298>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Init+0x15a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a51      	ldr	r2, [pc, #324]	; (8001978 <HAL_ADC_Init+0x29c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_ADC_Init+0x15e>
 8001836:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_ADC_Init+0x2a4>)
 8001838:	e000      	b.n	800183c <HAL_ADC_Init+0x160>
 800183a:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_ADC_Init+0x2a8>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f7ff fd42 	bl	80012cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001848:	f7ff fd34 	bl	80012b4 <HAL_GetREVID>
 800184c:	4603      	mov	r3, r0
 800184e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001852:	4293      	cmp	r3, r2
 8001854:	d914      	bls.n	8001880 <HAL_ADC_Init+0x1a4>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b10      	cmp	r3, #16
 800185c:	d110      	bne.n	8001880 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7d5b      	ldrb	r3, [r3, #21]
 8001862:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001868:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800186e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7f1b      	ldrb	r3, [r3, #28]
 8001874:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001876:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001878:	f043 030c 	orr.w	r3, r3, #12
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	e00d      	b.n	800189c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7d5b      	ldrb	r3, [r3, #21]
 8001884:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800188a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001890:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7f1b      	ldrb	r3, [r3, #28]
 8001896:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7f1b      	ldrb	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d106      	bne.n	80018b2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	045b      	lsls	r3, r3, #17
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <HAL_ADC_Init+0x2ac>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	69b9      	ldr	r1, [r7, #24]
 80018de:	430b      	orrs	r3, r1
 80018e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fed2 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fedf 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 80018f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d15f      	bne.n	80019c0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d15c      	bne.n	80019c0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7d1b      	ldrb	r3, [r3, #20]
 800190a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_ADC_Init+0x2b0>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	430b      	orrs	r3, r1
 8001926:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800192e:	2b01      	cmp	r3, #1
 8001930:	d130      	bne.n	8001994 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_ADC_Init+0x2b4>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001946:	3a01      	subs	r2, #1
 8001948:	0411      	lsls	r1, r2, #16
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800195a:	430a      	orrs	r2, r1
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	e01c      	b.n	80019a4 <HAL_ADC_Init+0x2c8>
 800196a:	bf00      	nop
 800196c:	24000000 	.word	0x24000000
 8001970:	053e2d63 	.word	0x053e2d63
 8001974:	40022000 	.word	0x40022000
 8001978:	40022100 	.word	0x40022100
 800197c:	58026000 	.word	0x58026000
 8001980:	40022300 	.word	0x40022300
 8001984:	58026300 	.word	0x58026300
 8001988:	fff0c003 	.word	0xfff0c003
 800198c:	ffffbffc 	.word	0xffffbffc
 8001990:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fe36 	bl	800262c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10c      	bne.n	80019e2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f023 010f 	bic.w	r1, r3, #15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	e007      	b.n	80019f2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 020f 	bic.w	r2, r2, #15
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
 8001a02:	e007      	b.n	8001a14 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f043 0210 	orr.w	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop

08001a20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ba0 <HAL_ADC_Start+0x180>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_ADC_Start+0x1c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <HAL_ADC_Start+0x184>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_Start+0x20>
 8001a3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <HAL_ADC_Start+0x188>)
 8001a3e:	e000      	b.n	8001a42 <HAL_ADC_Start+0x22>
 8001a40:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <HAL_ADC_Start+0x18c>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fd58 	bl	80014f8 <LL_ADC_GetMultimode>
 8001a48:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fe1e 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 809a 	bne.w	8001b90 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Start+0x4a>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e095      	b.n	8001b96 <HAL_ADC_Start+0x176>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fcf0 	bl	8002458 <ADC_Enable>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8081 	bne.w	8001b86 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_ADC_Start+0x190>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a42      	ldr	r2, [pc, #264]	; (8001ba4 <HAL_ADC_Start+0x184>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d002      	beq.n	8001aa4 <HAL_ADC_Start+0x84>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADC_Start+0x86>
 8001aa4:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_ADC_Start+0x180>)
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d002      	beq.n	8001ab4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f023 0206 	bic.w	r2, r3, #6
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	; 0x58
 8001ada:	e002      	b.n	8001ae2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	221c      	movs	r2, #28
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <HAL_ADC_Start+0x184>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d002      	beq.n	8001b02 <HAL_ADC_Start+0xe2>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	e000      	b.n	8001b04 <HAL_ADC_Start+0xe4>
 8001b02:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_ADC_Start+0x180>)
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d008      	beq.n	8001b1e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d002      	beq.n	8001b1e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	d114      	bne.n	8001b48 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fd91 	bl	8001668 <LL_ADC_REG_StartConversion>
 8001b46:	e025      	b.n	8001b94 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_ADC_Start+0x184>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d002      	beq.n	8001b64 <HAL_ADC_Start+0x144>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_Start+0x146>
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_ADC_Start+0x180>)
 8001b66:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00f      	beq.n	8001b94 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
 8001b84:	e006      	b.n	8001b94 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b8e:	e001      	b.n	8001b94 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
 8001b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022100 	.word	0x40022100
 8001ba8:	40022300 	.word	0x40022300
 8001bac:	58026300 	.word	0x58026300
 8001bb0:	fffff0fe 	.word	0xfffff0fe

08001bb4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a72      	ldr	r2, [pc, #456]	; (8001d8c <HAL_ADC_PollForConversion+0x1d8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_ADC_PollForConversion+0x1e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a70      	ldr	r2, [pc, #448]	; (8001d90 <HAL_ADC_PollForConversion+0x1dc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x22>
 8001bd2:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <HAL_ADC_PollForConversion+0x1e0>)
 8001bd4:	e000      	b.n	8001bd8 <HAL_ADC_PollForConversion+0x24>
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_ADC_PollForConversion+0x1e4>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc8d 	bl	80014f8 <LL_ADC_GetMultimode>
 8001bde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d102      	bne.n	8001bee <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001be8:	2308      	movs	r3, #8
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	e037      	b.n	8001c5e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d002      	beq.n	8001c00 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d111      	bne.n	8001c24 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f043 0220 	orr.w	r2, r3, #32
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0b1      	b.n	8001d82 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c1e:	2304      	movs	r3, #4
 8001c20:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c22:	e01c      	b.n	8001c5e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_ADC_PollForConversion+0x1d8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_ADC_PollForConversion+0x84>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a57      	ldr	r2, [pc, #348]	; (8001d90 <HAL_ADC_PollForConversion+0x1dc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_PollForConversion+0x88>
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_ADC_PollForConversion+0x1e0>)
 8001c3a:	e000      	b.n	8001c3e <HAL_ADC_PollForConversion+0x8a>
 8001c3c:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <HAL_ADC_PollForConversion+0x1e4>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fc68 	bl	8001514 <LL_ADC_GetMultiDMATransfer>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e093      	b.n	8001d82 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c5e:	f7ff faf9 	bl	8001254 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c64:	e021      	b.n	8001caa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d01d      	beq.n	8001caa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c6e:	f7ff faf1 	bl	8001254 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d302      	bcc.n	8001c84 <HAL_ADC_PollForConversion+0xd0>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d112      	bne.n	8001caa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10b      	bne.n	8001caa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f043 0204 	orr.w	r2, r3, #4
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e06b      	b.n	8001d82 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0d6      	beq.n	8001c66 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fb87 	bl	80013dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01c      	beq.n	8001d0e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7d5b      	ldrb	r3, [r3, #21]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d118      	bne.n	8001d0e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d111      	bne.n	8001d0e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <HAL_ADC_PollForConversion+0x1dc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d002      	beq.n	8001d1e <HAL_ADC_PollForConversion+0x16a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	e000      	b.n	8001d20 <HAL_ADC_PollForConversion+0x16c>
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_ADC_PollForConversion+0x1d8>)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d008      	beq.n	8001d3a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d002      	beq.n	8001d3a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b09      	cmp	r3, #9
 8001d38:	d104      	bne.n	8001d44 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e00c      	b.n	8001d5e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_ADC_PollForConversion+0x1dc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d002      	beq.n	8001d54 <HAL_ADC_PollForConversion+0x1a0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_PollForConversion+0x1a2>
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_ADC_PollForConversion+0x1d8>)
 8001d56:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d104      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e008      	b.n	8001d80 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40022100 	.word	0x40022100
 8001d94:	40022300 	.word	0x40022300
 8001d98:	58026300 	.word	0x58026300

08001d9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b0a1      	sub	sp, #132	; 0x84
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a9d      	ldr	r2, [pc, #628]	; (8002048 <HAL_ADC_ConfigChannel+0x290>)
 8001dd2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x2a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e321      	b.n	8002426 <HAL_ADC_ConfigChannel+0x66e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fc4e 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 8306 	bne.w	8002408 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x62>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2201      	movs	r2, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	e016      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x90>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e2a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e003      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2201      	movs	r2, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	69d1      	ldr	r1, [r2, #28]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	f7ff facd 	bl	8001402 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc0f 	bl	8001690 <LL_ADC_REG_IsConversionOngoing>
 8001e72:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fc1c 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 8001e7e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80b3 	bne.w	8001fee <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80af 	bne.w	8001fee <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f7ff fadc 	bl	800145a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_ADC_ConfigChannel+0x294>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eae:	d10b      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x110>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	e01d      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x14c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x136>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	e00a      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x14c>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d027      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f1c:	f7ff fa0a 	bl	8001334 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6919      	ldr	r1, [r3, #16]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7e5b      	ldrb	r3, [r3, #25]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x17e>
 8001f30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f34:	e000      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x180>
 8001f36:	2300      	movs	r3, #0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f7ff fa34 	bl	80013a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7e1b      	ldrb	r3, [r3, #24]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x19c>
 8001f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x19e>
 8001f54:	2300      	movs	r3, #0
 8001f56:	461a      	mov	r2, r3
 8001f58:	f7ff fa0c 	bl	8001374 <LL_ADC_SetDataRightShift>
 8001f5c:	e047      	b.n	8001fee <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	069b      	lsls	r3, r3, #26
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d107      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f80:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	069b      	lsls	r3, r3, #26
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d107      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	069b      	lsls	r3, r3, #26
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d107      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	069b      	lsls	r3, r3, #26
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d107      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fb12 	bl	800161c <LL_ADC_IsEnabled>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 820d 	bne.w	800241a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	461a      	mov	r2, r3
 800200e:	f7ff fa4f 	bl	80014b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_ADC_ConfigChannel+0x290>)
 8002018:	4293      	cmp	r3, r2
 800201a:	f040 8133 	bne.w	8002284 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800202a:	2b00      	cmp	r3, #0
 800202c:	d110      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x298>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e9b      	lsrs	r3, r3, #26
 8002034:	3301      	adds	r3, #1
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2b09      	cmp	r3, #9
 800203c:	bf94      	ite	ls
 800203e:	2301      	movls	r3, #1
 8002040:	2300      	movhi	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	e01e      	b.n	8002084 <HAL_ADC_ConfigChannel+0x2cc>
 8002046:	bf00      	nop
 8002048:	47ff0000 	.word	0x47ff0000
 800204c:	5c001000 	.word	0x5c001000
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800205e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002060:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e003      	b.n	8002074 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800206c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2b09      	cmp	r3, #9
 800207c:	bf94      	ite	ls
 800207e:	2301      	movls	r3, #1
 8002080:	2300      	movhi	r3, #0
 8002082:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002084:	2b00      	cmp	r3, #0
 8002086:	d079      	beq.n	800217c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x2ec>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e9b      	lsrs	r3, r3, #26
 800209a:	3301      	adds	r3, #1
 800209c:	069b      	lsls	r3, r3, #26
 800209e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a2:	e015      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x318>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80020b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80020c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	069b      	lsls	r3, r3, #26
 80020cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x338>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0e9b      	lsrs	r3, r3, #26
 80020e2:	3301      	adds	r3, #1
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	e017      	b.n	8002120 <HAL_ADC_ConfigChannel+0x368>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	ea42 0103 	orr.w	r1, r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x38e>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	3301      	adds	r3, #1
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	051b      	lsls	r3, r3, #20
 8002144:	e018      	b.n	8002178 <HAL_ADC_ConfigChannel+0x3c0>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e003      	b.n	800216a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002178:	430b      	orrs	r3, r1
 800217a:	e07e      	b.n	800227a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002184:	2b00      	cmp	r3, #0
 8002186:	d107      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x3e0>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	3301      	adds	r3, #1
 8002190:	069b      	lsls	r3, r3, #26
 8002192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002196:	e015      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x40c>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e003      	b.n	80021bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x42c>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	e017      	b.n	8002214 <HAL_ADC_ConfigChannel+0x45c>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	61bb      	str	r3, [r7, #24]
  return result;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	ea42 0103 	orr.w	r1, r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x488>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	3301      	adds	r3, #1
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	3b1e      	subs	r3, #30
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800223e:	e01b      	b.n	8002278 <HAL_ADC_ConfigChannel+0x4c0>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	60fb      	str	r3, [r7, #12]
  return result;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f003 021f 	and.w	r2, r3, #31
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	3b1e      	subs	r3, #30
 8002272:	051b      	lsls	r3, r3, #20
 8002274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002278:	430b      	orrs	r3, r1
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6892      	ldr	r2, [r2, #8]
 800227e:	4619      	mov	r1, r3
 8002280:	f7ff f8eb 	bl	800145a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f280 80c6 	bge.w	800241a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a67      	ldr	r2, [pc, #412]	; (8002430 <HAL_ADC_ConfigChannel+0x678>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x4ea>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a65      	ldr	r2, [pc, #404]	; (8002434 <HAL_ADC_ConfigChannel+0x67c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x4ee>
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_ADC_ConfigChannel+0x680>)
 80022a4:	e000      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x4f0>
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_ADC_ConfigChannel+0x684>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f835 	bl	8001318 <LL_ADC_GetCommonPathInternalCh>
 80022ae:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5e      	ldr	r2, [pc, #376]	; (8002430 <HAL_ADC_ConfigChannel+0x678>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x50c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5d      	ldr	r2, [pc, #372]	; (8002434 <HAL_ADC_ConfigChannel+0x67c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10e      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x52a>
 80022c4:	485a      	ldr	r0, [pc, #360]	; (8002430 <HAL_ADC_ConfigChannel+0x678>)
 80022c6:	f7ff f9a9 	bl	800161c <LL_ADC_IsEnabled>
 80022ca:	4604      	mov	r4, r0
 80022cc:	4859      	ldr	r0, [pc, #356]	; (8002434 <HAL_ADC_ConfigChannel+0x67c>)
 80022ce:	f7ff f9a5 	bl	800161c <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4323      	orrs	r3, r4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf0c      	ite	eq
 80022da:	2301      	moveq	r3, #1
 80022dc:	2300      	movne	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e008      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x53c>
 80022e2:	4857      	ldr	r0, [pc, #348]	; (8002440 <HAL_ADC_ConfigChannel+0x688>)
 80022e4:	f7ff f99a 	bl	800161c <LL_ADC_IsEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d07d      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_ADC_ConfigChannel+0x68c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d130      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x5ac>
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d12b      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_ADC_ConfigChannel+0x688>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 8081 	bne.w	800241a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a44      	ldr	r2, [pc, #272]	; (8002430 <HAL_ADC_ConfigChannel+0x678>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <HAL_ADC_ConfigChannel+0x574>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a43      	ldr	r2, [pc, #268]	; (8002434 <HAL_ADC_ConfigChannel+0x67c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x578>
 800232c:	4a42      	ldr	r2, [pc, #264]	; (8002438 <HAL_ADC_ConfigChannel+0x680>)
 800232e:	e000      	b.n	8002332 <HAL_ADC_ConfigChannel+0x57a>
 8002330:	4a42      	ldr	r2, [pc, #264]	; (800243c <HAL_ADC_ConfigChannel+0x684>)
 8002332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f7fe ffd9 	bl	80012f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002340:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_ADC_ConfigChannel+0x690>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a41      	ldr	r2, [pc, #260]	; (800244c <HAL_ADC_ConfigChannel+0x694>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002354:	e002      	b.n	800235c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3b01      	subs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002362:	e05a      	b.n	800241a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a39      	ldr	r2, [pc, #228]	; (8002450 <HAL_ADC_ConfigChannel+0x698>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11e      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x5f4>
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d119      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a30      	ldr	r2, [pc, #192]	; (8002440 <HAL_ADC_ConfigChannel+0x688>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d14b      	bne.n	800241a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2a      	ldr	r2, [pc, #168]	; (8002430 <HAL_ADC_ConfigChannel+0x678>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x5de>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a28      	ldr	r2, [pc, #160]	; (8002434 <HAL_ADC_ConfigChannel+0x67c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x5e2>
 8002396:	4a28      	ldr	r2, [pc, #160]	; (8002438 <HAL_ADC_ConfigChannel+0x680>)
 8002398:	e000      	b.n	800239c <HAL_ADC_ConfigChannel+0x5e4>
 800239a:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_ADC_ConfigChannel+0x684>)
 800239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f7fe ffa4 	bl	80012f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023aa:	e036      	b.n	800241a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <HAL_ADC_ConfigChannel+0x69c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d131      	bne.n	800241a <HAL_ADC_ConfigChannel+0x662>
 80023b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d12c      	bne.n	800241a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <HAL_ADC_ConfigChannel+0x688>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d127      	bne.n	800241a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <HAL_ADC_ConfigChannel+0x678>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_ADC_ConfigChannel+0x626>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a16      	ldr	r2, [pc, #88]	; (8002434 <HAL_ADC_ConfigChannel+0x67c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x62a>
 80023de:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_ADC_ConfigChannel+0x680>)
 80023e0:	e000      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x62c>
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_ADC_ConfigChannel+0x684>)
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7fe ff80 	bl	80012f2 <LL_ADC_SetCommonPathInternalCh>
 80023f2:	e012      	b.n	800241a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002406:	e008      	b.n	800241a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002422:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002426:	4618      	mov	r0, r3
 8002428:	3784      	adds	r7, #132	; 0x84
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000
 8002434:	40022100 	.word	0x40022100
 8002438:	40022300 	.word	0x40022300
 800243c:	58026300 	.word	0x58026300
 8002440:	58026000 	.word	0x58026000
 8002444:	cb840000 	.word	0xcb840000
 8002448:	24000000 	.word	0x24000000
 800244c:	053e2d63 	.word	0x053e2d63
 8002450:	c7520000 	.word	0xc7520000
 8002454:	cfb80000 	.word	0xcfb80000

08002458 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f8d9 	bl	800161c <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d16e      	bne.n	800254e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <ADC_Enable+0x100>)
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e05a      	b.n	8002550 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f894 	bl	80015cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024a4:	f7fe fed6 	bl	8001254 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2b      	ldr	r2, [pc, #172]	; (800255c <ADC_Enable+0x104>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <ADC_Enable+0x66>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <ADC_Enable+0x108>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <ADC_Enable+0x6a>
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <ADC_Enable+0x10c>)
 80024c0:	e000      	b.n	80024c4 <ADC_Enable+0x6c>
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <ADC_Enable+0x110>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f817 	bl	80014f8 <LL_ADC_GetMultimode>
 80024ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	; (8002560 <ADC_Enable+0x108>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d002      	beq.n	80024dc <ADC_Enable+0x84>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	e000      	b.n	80024de <ADC_Enable+0x86>
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <ADC_Enable+0x104>)
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02c      	beq.n	8002540 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d130      	bne.n	800254e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ec:	e028      	b.n	8002540 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f892 	bl	800161c <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f862 	bl	80015cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002508:	f7fe fea4 	bl	8001254 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d914      	bls.n	8002540 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d00d      	beq.n	8002540 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	f043 0210 	orr.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d1cf      	bne.n	80024ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	8000003f 	.word	0x8000003f
 800255c:	40022000 	.word	0x40022000
 8002560:	40022100 	.word	0x40022100
 8002564:	40022300 	.word	0x40022300
 8002568:	58026300 	.word	0x58026300

0800256c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f862 	bl	8001642 <LL_ADC_IsDisableOngoing>
 800257e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f849 	bl	800161c <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d047      	beq.n	8002620 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d144      	bne.n	8002620 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030d 	and.w	r3, r3, #13
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10c      	bne.n	80025be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f823 	bl	80015f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2203      	movs	r2, #3
 80025b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b6:	f7fe fe4d 	bl	8001254 <HAL_GetTick>
 80025ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025bc:	e029      	b.n	8002612 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e023      	b.n	8002622 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025da:	f7fe fe3b 	bl	8001254 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d914      	bls.n	8002612 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e007      	b.n	8002622 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1dc      	bne.n	80025da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a7a      	ldr	r2, [pc, #488]	; (8002824 <ADC_ConfigureBoostMode+0x1f8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <ADC_ConfigureBoostMode+0x1c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a79      	ldr	r2, [pc, #484]	; (8002828 <ADC_ConfigureBoostMode+0x1fc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d109      	bne.n	800265c <ADC_ConfigureBoostMode+0x30>
 8002648:	4b78      	ldr	r3, [pc, #480]	; (800282c <ADC_ConfigureBoostMode+0x200>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e008      	b.n	800266e <ADC_ConfigureBoostMode+0x42>
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <ADC_ConfigureBoostMode+0x204>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01c      	beq.n	80026ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002672:	f001 fc4d 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8002676:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002680:	d010      	beq.n	80026a4 <ADC_ConfigureBoostMode+0x78>
 8002682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002686:	d873      	bhi.n	8002770 <ADC_ConfigureBoostMode+0x144>
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d002      	beq.n	8002694 <ADC_ConfigureBoostMode+0x68>
 800268e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002692:	d16d      	bne.n	8002770 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	60fb      	str	r3, [r7, #12]
        break;
 80026a2:	e068      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	60fb      	str	r3, [r7, #12]
        break;
 80026aa:	e064      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	f002 fed4 	bl	8005460 <HAL_RCCEx_GetPeriphCLKFreq>
 80026b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026c2:	d051      	beq.n	8002768 <ADC_ConfigureBoostMode+0x13c>
 80026c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026c8:	d854      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026ca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026ce:	d047      	beq.n	8002760 <ADC_ConfigureBoostMode+0x134>
 80026d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026d4:	d84e      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026da:	d03d      	beq.n	8002758 <ADC_ConfigureBoostMode+0x12c>
 80026dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026e0:	d848      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026e6:	d033      	beq.n	8002750 <ADC_ConfigureBoostMode+0x124>
 80026e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ec:	d842      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026f2:	d029      	beq.n	8002748 <ADC_ConfigureBoostMode+0x11c>
 80026f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026f8:	d83c      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 80026fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80026fe:	d01a      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002700:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002704:	d836      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 8002706:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800270a:	d014      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 800270c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002710:	d830      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002716:	d00e      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800271c:	d82a      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 800271e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002722:	d008      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002724:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002728:	d824      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x148>
 800272a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800272e:	d002      	beq.n	8002736 <ADC_ConfigureBoostMode+0x10a>
 8002730:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002734:	d11e      	bne.n	8002774 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	60fb      	str	r3, [r7, #12]
        break;
 8002746:	e016      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
        break;
 800274e:	e012      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	60fb      	str	r3, [r7, #12]
        break;
 8002756:	e00e      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	60fb      	str	r3, [r7, #12]
        break;
 800275e:	e00a      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	09db      	lsrs	r3, r3, #7
 8002764:	60fb      	str	r3, [r7, #12]
        break;
 8002766:	e006      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	60fb      	str	r3, [r7, #12]
        break;
 800276e:	e002      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002774:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002776:	f7fe fd9d 	bl	80012b4 <HAL_GetREVID>
 800277a:	4603      	mov	r3, r0
 800277c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002780:	4293      	cmp	r3, r2
 8002782:	d815      	bhi.n	80027b0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <ADC_ConfigureBoostMode+0x208>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d908      	bls.n	800279e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800279c:	e03e      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ac:	609a      	str	r2, [r3, #8]
}
 80027ae:	e035      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <ADC_ConfigureBoostMode+0x20c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d808      	bhi.n	80027d0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	e025      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <ADC_ConfigureBoostMode+0x210>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d80a      	bhi.n	80027ee <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ea:	609a      	str	r2, [r3, #8]
}
 80027ec:	e016      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a13      	ldr	r2, [pc, #76]	; (8002840 <ADC_ConfigureBoostMode+0x214>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d80a      	bhi.n	800280c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002808:	609a      	str	r2, [r3, #8]
}
 800280a:	e007      	b.n	800281c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40022000 	.word	0x40022000
 8002828:	40022100 	.word	0x40022100
 800282c:	40022300 	.word	0x40022300
 8002830:	58026300 	.word	0x58026300
 8002834:	01312d00 	.word	0x01312d00
 8002838:	005f5e10 	.word	0x005f5e10
 800283c:	00bebc20 	.word	0x00bebc20
 8002840:	017d7840 	.word	0x017d7840

08002844 <LL_ADC_StartCalibration>:
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <LL_ADC_StartCalibration+0x38>)
 8002856:	4013      	ands	r3, r2
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002864:	430a      	orrs	r2, r1
 8002866:	4313      	orrs	r3, r2
 8002868:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	3ffeffc0 	.word	0x3ffeffc0

08002880 <LL_ADC_IsCalibrationOnGoing>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002894:	d101      	bne.n	800289a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e04c      	b.n	8002960 <HAL_ADCEx_Calibration_Start+0xb8>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fe4c 	bl	800256c <ADC_Disable>
 80028d4:	4603      	mov	r3, r0
 80028d6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d135      	bne.n	800294a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_ADCEx_Calibration_Start+0xc0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ffa4 	bl	8002844 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028fc:	e014      	b.n	8002928 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	3301      	adds	r3, #1
 8002902:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_ADCEx_Calibration_Start+0xc4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d30d      	bcc.n	8002928 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f023 0312 	bic.w	r3, r3, #18
 8002914:	f043 0210 	orr.w	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e01b      	b.n	8002960 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ffa7 	bl	8002880 <LL_ADC_IsCalibrationOnGoing>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e2      	bne.n	80028fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f023 0303 	bic.w	r3, r3, #3
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
 8002948:	e005      	b.n	8002956 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f043 0210 	orr.w	r2, r3, #16
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800295e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	ffffeefd 	.word	0xffffeefd
 800296c:	25c3f800 	.word	0x25c3f800

08002970 <__NVIC_SetPriorityGrouping>:
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	4313      	orrs	r3, r2
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x40>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00
 80029b4:	05fa0000 	.word	0x05fa0000

080029b8 <__NVIC_GetPriorityGrouping>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4907      	ldr	r1, [pc, #28]	; (8002a0c <__NVIC_EnableIRQ+0x38>)
 80029ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100

08002a10 <__NVIC_SetPriority>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	; (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	; (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	; 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff4c 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aee:	f7ff ff63 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002af2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f7ff ffb3 	bl	8002a64 <NVIC_EncodePriority>
 8002afe:	4602      	mov	r2, r0
 8002b00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff82 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b0c:	bf00      	nop
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff56 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002b34:	f3bf 8f5f 	dmb	sy
}
 8002b38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_MPU_Disable+0x28>)
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <HAL_MPU_Disable+0x28>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_MPU_Disable+0x2c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000ed00 	.word	0xe000ed00
 8002b5c:	e000ed90 	.word	0xe000ed90

08002b60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <HAL_MPU_Enable+0x38>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_MPU_Enable+0x3c>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <HAL_MPU_Enable+0x3c>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002b7e:	f3bf 8f4f 	dsb	sy
}
 8002b82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b84:	f3bf 8f6f 	isb	sy
}
 8002b88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000ed90 	.word	0xe000ed90
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	785a      	ldrb	r2, [r3, #1]
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_MPU_ConfigRegion+0x84>)
 8002bae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d029      	beq.n	8002c0c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002bb8:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_MPU_ConfigRegion+0x84>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7b1b      	ldrb	r3, [r3, #12]
 8002bc4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7adb      	ldrb	r3, [r3, #11]
 8002bca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7a9b      	ldrb	r3, [r3, #10]
 8002bd2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7b5b      	ldrb	r3, [r3, #13]
 8002bda:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002bdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7b9b      	ldrb	r3, [r3, #14]
 8002be2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002be4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7bdb      	ldrb	r3, [r3, #15]
 8002bea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002bec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7a5b      	ldrb	r3, [r3, #9]
 8002bf2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002bf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7a1b      	ldrb	r3, [r3, #8]
 8002bfa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002bfc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c06:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002c0a:	e005      	b.n	8002c18 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_MPU_ConfigRegion+0x84>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_MPU_ConfigRegion+0x84>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed90 	.word	0xe000ed90

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <HAL_GPIO_Init+0x234>)
 8002c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c3a:	e194      	b.n	8002f66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8186 	beq.w	8002f60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d005      	beq.n	8002c6c <HAL_GPIO_Init+0x44>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d130      	bne.n	8002cce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 0201 	and.w	r2, r3, #1
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d017      	beq.n	8002d0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d123      	bne.n	8002d5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	69b9      	ldr	r1, [r7, #24]
 8002d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0203 	and.w	r2, r3, #3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80e0 	beq.w	8002f60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_GPIO_Init+0x238>)
 8002da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <HAL_GPIO_Init+0x238>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_GPIO_Init+0x238>)
 8002db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dbe:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <HAL_GPIO_Init+0x23c>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <HAL_GPIO_Init+0x240>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d052      	beq.n	8002e90 <HAL_GPIO_Init+0x268>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_GPIO_Init+0x244>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d031      	beq.n	8002e56 <HAL_GPIO_Init+0x22e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_GPIO_Init+0x248>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02b      	beq.n	8002e52 <HAL_GPIO_Init+0x22a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x24c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d025      	beq.n	8002e4e <HAL_GPIO_Init+0x226>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_GPIO_Init+0x250>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <HAL_GPIO_Init+0x222>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_GPIO_Init+0x254>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x21e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_GPIO_Init+0x258>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x21a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_GPIO_Init+0x25c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x216>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <HAL_GPIO_Init+0x260>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_GPIO_Init+0x264>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x20e>
 8002e32:	2309      	movs	r3, #9
 8002e34:	e02d      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e36:	230a      	movs	r3, #10
 8002e38:	e02b      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	e029      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e3e:	2307      	movs	r3, #7
 8002e40:	e027      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e42:	2306      	movs	r3, #6
 8002e44:	e025      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e46:	2305      	movs	r3, #5
 8002e48:	e023      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e021      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e01f      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e01d      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e01b      	b.n	8002e92 <HAL_GPIO_Init+0x26a>
 8002e5a:	bf00      	nop
 8002e5c:	58000080 	.word	0x58000080
 8002e60:	58024400 	.word	0x58024400
 8002e64:	58000400 	.word	0x58000400
 8002e68:	58020000 	.word	0x58020000
 8002e6c:	58020400 	.word	0x58020400
 8002e70:	58020800 	.word	0x58020800
 8002e74:	58020c00 	.word	0x58020c00
 8002e78:	58021000 	.word	0x58021000
 8002e7c:	58021400 	.word	0x58021400
 8002e80:	58021800 	.word	0x58021800
 8002e84:	58021c00 	.word	0x58021c00
 8002e88:	58022000 	.word	0x58022000
 8002e8c:	58022400 	.word	0x58022400
 8002e90:	2300      	movs	r3, #0
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea2:	4938      	ldr	r1, [pc, #224]	; (8002f84 <HAL_GPIO_Init+0x35c>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3301      	adds	r3, #1
 8002f64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f47f ae63 	bne.w	8002c3c <HAL_GPIO_Init+0x14>
  }
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	3724      	adds	r7, #36	; 0x24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	58000400 	.word	0x58000400

08002f88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e01f      	b.n	8002fee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e01d      	b.n	8002fee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	490f      	ldr	r1, [pc, #60]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fc2:	f7fe f947 	bl	8001254 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fc8:	e009      	b.n	8002fde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fca:	f7fe f943 	bl	8001254 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd8:	d901      	bls.n	8002fde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e007      	b.n	8002fee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	d1ee      	bne.n	8002fca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	58024800 	.word	0x58024800

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f000 bc48 	b.w	80038a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8088 	beq.w	800312e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301e:	4b99      	ldr	r3, [pc, #612]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003028:	4b96      	ldr	r3, [pc, #600]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	2b10      	cmp	r3, #16
 8003032:	d007      	beq.n	8003044 <HAL_RCC_OscConfig+0x48>
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	2b18      	cmp	r3, #24
 8003038:	d111      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d10c      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b8f      	ldr	r3, [pc, #572]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d06d      	beq.n	800312c <HAL_RCC_OscConfig+0x130>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d169      	bne.n	800312c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f000 bc21 	b.w	80038a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x7a>
 8003068:	4b86      	ldr	r3, [pc, #536]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a85      	ldr	r2, [pc, #532]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x9c>
 800307e:	4b81      	ldr	r3, [pc, #516]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a80      	ldr	r2, [pc, #512]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7d      	ldr	r2, [pc, #500]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xc0>
 80030a2:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a77      	ldr	r2, [pc, #476]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b75      	ldr	r3, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a74      	ldr	r2, [pc, #464]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd8>
 80030bc:	4b71      	ldr	r3, [pc, #452]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a70      	ldr	r2, [pc, #448]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b6e      	ldr	r3, [pc, #440]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6d      	ldr	r2, [pc, #436]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f8ba 	bl	8001254 <HAL_GetTick>
 80030e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe f8b6 	bl	8001254 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e3d4      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe8>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f8a6 	bl	8001254 <HAL_GetTick>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe f8a2 	bl	8001254 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e3c0      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800311e:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x110>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80ca 	beq.w	80032d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313c:	4b51      	ldr	r3, [pc, #324]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003144:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003146:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_RCC_OscConfig+0x166>
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	2b18      	cmp	r3, #24
 8003156:	d156      	bne.n	8003206 <HAL_RCC_OscConfig+0x20a>
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d151      	bne.n	8003206 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003162:	4b48      	ldr	r3, [pc, #288]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x17e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e392      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800317a:	4b42      	ldr	r3, [pc, #264]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0219 	bic.w	r2, r3, #25
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	493f      	ldr	r1, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe f862 	bl	8001254 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe f85e 	bl	8001254 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e37c      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	f7fe f87f 	bl	80012b4 <HAL_GetREVID>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80031bc:	4293      	cmp	r3, r2
 80031be:	d817      	bhi.n	80031f0 <HAL_RCC_OscConfig+0x1f4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d108      	bne.n	80031da <HAL_RCC_OscConfig+0x1de>
 80031c8:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d8:	e07a      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	031b      	lsls	r3, r3, #12
 80031e8:	4926      	ldr	r1, [pc, #152]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ee:	e06f      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	4921      	ldr	r1, [pc, #132]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003204:	e064      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d047      	beq.n	800329e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0219 	bic.w	r2, r3, #25
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	491a      	ldr	r1, [pc, #104]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe f818 	bl	8001254 <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe f814 	bl	8001254 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e332      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003246:	f7fe f835 	bl	80012b4 <HAL_GetREVID>
 800324a:	4603      	mov	r3, r0
 800324c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003250:	4293      	cmp	r3, r2
 8003252:	d819      	bhi.n	8003288 <HAL_RCC_OscConfig+0x28c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d108      	bne.n	800326e <HAL_RCC_OscConfig+0x272>
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003264:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326a:	6053      	str	r3, [r2, #4]
 800326c:	e030      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	031b      	lsls	r3, r3, #12
 800327c:	4901      	ldr	r1, [pc, #4]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
 8003282:	e025      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
 8003284:	58024400 	.word	0x58024400
 8003288:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	4997      	ldr	r1, [pc, #604]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	e018      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b95      	ldr	r3, [pc, #596]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a94      	ldr	r2, [pc, #592]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fd ffd3 	bl	8001254 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fd ffcf 	bl	8001254 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e2ed      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032c4:	4b8b      	ldr	r3, [pc, #556]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a9 	beq.w	8003430 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b85      	ldr	r3, [pc, #532]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032e8:	4b82      	ldr	r3, [pc, #520]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d007      	beq.n	8003304 <HAL_RCC_OscConfig+0x308>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b18      	cmp	r3, #24
 80032f8:	d13a      	bne.n	8003370 <HAL_RCC_OscConfig+0x374>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d135      	bne.n	8003370 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_OscConfig+0x320>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e2c1      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800331c:	f7fd ffca 	bl	80012b4 <HAL_GetREVID>
 8003320:	4603      	mov	r3, r0
 8003322:	f241 0203 	movw	r2, #4099	; 0x1003
 8003326:	4293      	cmp	r3, r2
 8003328:	d817      	bhi.n	800335a <HAL_RCC_OscConfig+0x35e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	2b20      	cmp	r3, #32
 8003330:	d108      	bne.n	8003344 <HAL_RCC_OscConfig+0x348>
 8003332:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800333a:	4a6e      	ldr	r2, [pc, #440]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003340:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003342:	e075      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003344:	4b6b      	ldr	r3, [pc, #428]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	069b      	lsls	r3, r3, #26
 8003352:	4968      	ldr	r1, [pc, #416]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003358:	e06a      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800335a:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	4962      	ldr	r1, [pc, #392]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800336e:	e05f      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d042      	beq.n	80033fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003378:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5d      	ldr	r2, [pc, #372]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd ff66 	bl	8001254 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800338c:	f7fd ff62 	bl	8001254 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e280      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800339e:	4b55      	ldr	r3, [pc, #340]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033aa:	f7fd ff83 	bl	80012b4 <HAL_GetREVID>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d817      	bhi.n	80033e8 <HAL_RCC_OscConfig+0x3ec>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d108      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3d6>
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80033c8:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033ce:	6053      	str	r3, [r2, #4]
 80033d0:	e02e      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
 80033d2:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	069b      	lsls	r3, r3, #26
 80033e0:	4944      	ldr	r1, [pc, #272]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 80033e6:	e023      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	493f      	ldr	r1, [pc, #252]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
 80033fc:	e018      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3c      	ldr	r2, [pc, #240]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fd ff23 	bl	8001254 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003412:	f7fd ff1f 	bl	8001254 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e23d      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003424:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d036      	beq.n	80034aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d019      	beq.n	8003478 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fd ff00 	bl	8001254 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fd fefc 	bl	8001254 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e21a      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x45c>
 8003476:	e018      	b.n	80034aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fd fee6 	bl	8001254 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fd fee2 	bl	8001254 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e200      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d039      	beq.n	800352a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034ca:	f7fd fec3 	bl	8001254 <HAL_GetTick>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fd febf 	bl	8001254 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1dd      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4d6>
 80034f0:	e01b      	b.n	800352a <HAL_RCC_OscConfig+0x52e>
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034f8:	4b9b      	ldr	r3, [pc, #620]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a9a      	ldr	r2, [pc, #616]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80034fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003504:	f7fd fea6 	bl	8001254 <HAL_GetTick>
 8003508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800350c:	f7fd fea2 	bl	8001254 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e1c0      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800351e:	4b92      	ldr	r3, [pc, #584]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8081 	beq.w	800363a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003538:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_OscConfig+0x770>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a8b      	ldr	r2, [pc, #556]	; (800376c <HAL_RCC_OscConfig+0x770>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003544:	f7fd fe86 	bl	8001254 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354c:	f7fd fe82 	bl	8001254 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e1a0      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800355e:	4b83      	ldr	r3, [pc, #524]	; (800376c <HAL_RCC_OscConfig+0x770>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x584>
 8003572:	4b7d      	ldr	r3, [pc, #500]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	e02d      	b.n	80035dc <HAL_RCC_OscConfig+0x5e0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10c      	bne.n	80035a2 <HAL_RCC_OscConfig+0x5a6>
 8003588:	4b77      	ldr	r3, [pc, #476]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a76      	ldr	r2, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	4b74      	ldr	r3, [pc, #464]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a73      	ldr	r2, [pc, #460]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800359a:	f023 0304 	bic.w	r3, r3, #4
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	e01c      	b.n	80035dc <HAL_RCC_OscConfig+0x5e0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c8>
 80035aa:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a6b      	ldr	r2, [pc, #428]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0x5e0>
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a67      	ldr	r2, [pc, #412]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a64      	ldr	r2, [pc, #400]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035d6:	f023 0304 	bic.w	r3, r3, #4
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fd fe36 	bl	8001254 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fd fe32 	bl	8001254 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e14e      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003602:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ee      	beq.n	80035ec <HAL_RCC_OscConfig+0x5f0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fd fe20 	bl	8001254 <HAL_GetTick>
 8003614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fd fe1c 	bl	8001254 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e138      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ee      	bne.n	8003618 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 812d 	beq.w	800389e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364c:	2b18      	cmp	r3, #24
 800364e:	f000 80bd 	beq.w	80037cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2b02      	cmp	r3, #2
 8003658:	f040 809e 	bne.w	8003798 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365c:	4b42      	ldr	r3, [pc, #264]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a41      	ldr	r2, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fdf4 	bl	8001254 <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fdf0 	bl	8001254 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e10e      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003682:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x774>)
 8003694:	4013      	ands	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	430a      	orrs	r2, r1
 80036a2:	4931      	ldr	r1, [pc, #196]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	628b      	str	r3, [r1, #40]	; 0x28
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	3b01      	subs	r3, #1
 80036ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b6:	3b01      	subs	r3, #1
 80036b8:	025b      	lsls	r3, r3, #9
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	3b01      	subs	r3, #1
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	3b01      	subs	r3, #1
 80036d2:	061b      	lsls	r3, r3, #24
 80036d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036d8:	4923      	ldr	r1, [pc, #140]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036ea:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x778>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036f6:	00d2      	lsls	r2, r2, #3
 80036f8:	491b      	ldr	r1, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f023 020c 	bic.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4917      	ldr	r1, [pc, #92]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f023 0202 	bic.w	r2, r3, #2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	4912      	ldr	r1, [pc, #72]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fd fd79 	bl	8001254 <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003764:	e011      	b.n	800378a <HAL_RCC_OscConfig+0x78e>
 8003766:	bf00      	nop
 8003768:	58024400 	.word	0x58024400
 800376c:	58024800 	.word	0x58024800
 8003770:	fffffc0c 	.word	0xfffffc0c
 8003774:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003778:	f7fd fd6c 	bl	8001254 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e08a      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x77c>
 8003796:	e082      	b.n	800389e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a42      	ldr	r2, [pc, #264]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 800379e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fd56 	bl	8001254 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fd fd52 	bl	8001254 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e070      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037be:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x7b0>
 80037ca:	e068      	b.n	800389e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037cc:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037d2:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d031      	beq.n	8003844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0203 	and.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d12a      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d122      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11a      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	0a5b      	lsrs	r3, r3, #9
 8003812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d111      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d108      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	0e1b      	lsrs	r3, r3, #24
 8003836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e02b      	b.n	80038a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	08db      	lsrs	r3, r3, #3
 800384e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003852:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	429a      	cmp	r2, r3
 800385c:	d01f      	beq.n	800389e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	4a11      	ldr	r2, [pc, #68]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800386a:	f7fd fcf3 	bl	8001254 <HAL_GetTick>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003870:	bf00      	nop
 8003872:	f7fd fcef 	bl	8001254 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	4293      	cmp	r3, r2
 800387c:	d0f9      	beq.n	8003872 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_RCC_OscConfig+0x8b0>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800388a:	00d2      	lsls	r2, r2, #3
 800388c:	4906      	ldr	r1, [pc, #24]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_RCC_OscConfig+0x8ac>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3730      	adds	r7, #48	; 0x30
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	58024400 	.word	0x58024400
 80038ac:	ffff0007 	.word	0xffff0007

080038b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e19c      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c4:	4b8a      	ldr	r3, [pc, #552]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d910      	bls.n	80038f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b87      	ldr	r3, [pc, #540]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 020f 	bic.w	r2, r3, #15
 80038da:	4985      	ldr	r1, [pc, #532]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b83      	ldr	r3, [pc, #524]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e184      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d010      	beq.n	8003922 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	4b7b      	ldr	r3, [pc, #492]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800390c:	429a      	cmp	r2, r3
 800390e:	d908      	bls.n	8003922 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003910:	4b78      	ldr	r3, [pc, #480]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	4975      	ldr	r1, [pc, #468]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 800391e:	4313      	orrs	r3, r2
 8003920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d010      	beq.n	8003950 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800393a:	429a      	cmp	r2, r3
 800393c:	d908      	bls.n	8003950 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800393e:	4b6d      	ldr	r3, [pc, #436]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	496a      	ldr	r1, [pc, #424]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 800394c:	4313      	orrs	r3, r2
 800394e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003968:	429a      	cmp	r2, r3
 800396a:	d908      	bls.n	800397e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800396c:	4b61      	ldr	r3, [pc, #388]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	495e      	ldr	r1, [pc, #376]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 800397a:	4313      	orrs	r3, r2
 800397c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d010      	beq.n	80039ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003996:	429a      	cmp	r2, r3
 8003998:	d908      	bls.n	80039ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800399a:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4953      	ldr	r1, [pc, #332]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	4b4d      	ldr	r3, [pc, #308]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d908      	bls.n	80039da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c8:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f023 020f 	bic.w	r2, r3, #15
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4947      	ldr	r1, [pc, #284]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d055      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4940      	ldr	r1, [pc, #256]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a00:	4b3c      	ldr	r3, [pc, #240]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d121      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0f6      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d115      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0ea      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a30:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0de      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a40:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0d6      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f023 0207 	bic.w	r2, r3, #7
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4925      	ldr	r1, [pc, #148]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a62:	f7fd fbf7 	bl	8001254 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6a:	f7fd fbf3 	bl	8001254 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0be      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d1eb      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d208      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f023 020f 	bic.w	r2, r3, #15
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	490e      	ldr	r1, [pc, #56]	; (8003af4 <HAL_RCC_ClockConfig+0x244>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d214      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 020f 	bic.w	r2, r3, #15
 8003ad6:	4906      	ldr	r1, [pc, #24]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_RCC_ClockConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e086      	b.n	8003bfe <HAL_RCC_ClockConfig+0x34e>
 8003af0:	52002000 	.word	0x52002000
 8003af4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d208      	bcs.n	8003b26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b14:	4b3c      	ldr	r3, [pc, #240]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	4939      	ldr	r1, [pc, #228]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d010      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d208      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	492e      	ldr	r1, [pc, #184]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d010      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d208      	bcs.n	8003b82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	4922      	ldr	r1, [pc, #136]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d010      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d208      	bcs.n	8003bb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	4917      	ldr	r1, [pc, #92]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bb0:	f000 f834 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	4912      	ldr	r1, [pc, #72]	; (8003c0c <HAL_RCC_ClockConfig+0x35c>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x358>)
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <HAL_RCC_ClockConfig+0x35c>)
 8003bd8:	5cd3      	ldrb	r3, [r2, r3]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <HAL_RCC_ClockConfig+0x360>)
 8003be6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x364>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x368>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd f8ce 	bl	8000d94 <HAL_InitTick>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	0800aee4 	.word	0x0800aee4
 8003c10:	24000004 	.word	0x24000004
 8003c14:	24000000 	.word	0x24000000
 8003c18:	24000008 	.word	0x24000008

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c22:	4bb3      	ldr	r3, [pc, #716]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c2a:	2b18      	cmp	r3, #24
 8003c2c:	f200 8155 	bhi.w	8003eda <HAL_RCC_GetSysClockFreq+0x2be>
 8003c30:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c9d 	.word	0x08003c9d
 8003c3c:	08003edb 	.word	0x08003edb
 8003c40:	08003edb 	.word	0x08003edb
 8003c44:	08003edb 	.word	0x08003edb
 8003c48:	08003edb 	.word	0x08003edb
 8003c4c:	08003edb 	.word	0x08003edb
 8003c50:	08003edb 	.word	0x08003edb
 8003c54:	08003edb 	.word	0x08003edb
 8003c58:	08003cc3 	.word	0x08003cc3
 8003c5c:	08003edb 	.word	0x08003edb
 8003c60:	08003edb 	.word	0x08003edb
 8003c64:	08003edb 	.word	0x08003edb
 8003c68:	08003edb 	.word	0x08003edb
 8003c6c:	08003edb 	.word	0x08003edb
 8003c70:	08003edb 	.word	0x08003edb
 8003c74:	08003edb 	.word	0x08003edb
 8003c78:	08003cc9 	.word	0x08003cc9
 8003c7c:	08003edb 	.word	0x08003edb
 8003c80:	08003edb 	.word	0x08003edb
 8003c84:	08003edb 	.word	0x08003edb
 8003c88:	08003edb 	.word	0x08003edb
 8003c8c:	08003edb 	.word	0x08003edb
 8003c90:	08003edb 	.word	0x08003edb
 8003c94:	08003edb 	.word	0x08003edb
 8003c98:	08003ccf 	.word	0x08003ccf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c9c:	4b94      	ldr	r3, [pc, #592]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ca8:	4b91      	ldr	r3, [pc, #580]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	08db      	lsrs	r3, r3, #3
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	4a90      	ldr	r2, [pc, #576]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cba:	e111      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cbc:	4b8d      	ldr	r3, [pc, #564]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cbe:	61bb      	str	r3, [r7, #24]
      break;
 8003cc0:	e10e      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003cc2:	4b8d      	ldr	r3, [pc, #564]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cc4:	61bb      	str	r3, [r7, #24]
      break;
 8003cc6:	e10b      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003cc8:	4b8c      	ldr	r3, [pc, #560]	; (8003efc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cca:	61bb      	str	r3, [r7, #24]
      break;
 8003ccc:	e108      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cce:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cd8:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ce4:	4b82      	ldr	r3, [pc, #520]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003cee:	4b80      	ldr	r3, [pc, #512]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	08db      	lsrs	r3, r3, #3
 8003cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80e1 	beq.w	8003ed4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	f000 8083 	beq.w	8003e20 <HAL_RCC_GetSysClockFreq+0x204>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	f200 80a1 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x248>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x114>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d056      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d2e:	e099      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d30:	4b6f      	ldr	r3, [pc, #444]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02d      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	08db      	lsrs	r3, r3, #3
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	4a6b      	ldr	r2, [pc, #428]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	ee07 3a90 	vmov	s15, r3
 8003d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d66:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d96:	e087      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003daa:	4b51      	ldr	r3, [pc, #324]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dda:	e065      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dee:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e1e:	e043      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e62:	e021      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ea6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	0a5b      	lsrs	r3, r3, #9
 8003eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ecc:	ee17 3a90 	vmov	r3, s15
 8003ed0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
      break;
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003edc:	61bb      	str	r3, [r7, #24]
      break;
 8003ede:	bf00      	nop
  }

  return sysclockfreq;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	03d09000 	.word	0x03d09000
 8003ef8:	003d0900 	.word	0x003d0900
 8003efc:	007a1200 	.word	0x007a1200
 8003f00:	46000000 	.word	0x46000000
 8003f04:	4c742400 	.word	0x4c742400
 8003f08:	4a742400 	.word	0x4a742400
 8003f0c:	4af42400 	.word	0x4af42400

08003f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f16:	f7ff fe81 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	490f      	ldr	r1, [pc, #60]	; (8003f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f28:	5ccb      	ldrb	r3, [r1, r3]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f4e:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	58024400 	.word	0x58024400
 8003f64:	0800aee4 	.word	0x0800aee4
 8003f68:	24000004 	.word	0x24000004
 8003f6c:	24000000 	.word	0x24000000

08003f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f74:	f7ff ffcc 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	58024400 	.word	0x58024400
 8003f98:	0800aee4 	.word	0x0800aee4

08003f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fa0:	f7ff ffb6 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	0800aee4 	.word	0x0800aee4

08003fc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	223f      	movs	r2, #63	; 0x3f
 8003fd6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <HAL_RCC_GetClockConfig+0x7c>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0207 	and.w	r2, r3, #7
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <HAL_RCC_GetClockConfig+0x7c>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_RCC_GetClockConfig+0x7c>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <HAL_RCC_GetClockConfig+0x7c>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <HAL_RCC_GetClockConfig+0x7c>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_GetClockConfig+0x7c>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCC_GetClockConfig+0x7c>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_GetClockConfig+0x80>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	601a      	str	r2, [r3, #0]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	58024400 	.word	0x58024400
 8004048:	52002000 	.word	0x52002000

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	b0ca      	sub	sp, #296	; 0x128
 8004052:	af00      	add	r7, sp, #0
 8004054:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004070:	2500      	movs	r5, #0
 8004072:	ea54 0305 	orrs.w	r3, r4, r5
 8004076:	d049      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800407e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004082:	d02f      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004084:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004088:	d828      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800408a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800408e:	d01a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004094:	d822      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d007      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040a0:	e01c      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a2:	4bb8      	ldr	r3, [pc, #736]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	4ab7      	ldr	r2, [pc, #732]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040ae:	e01a      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b4:	3308      	adds	r3, #8
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 fb61 	bl	8006780 <RCCEx_PLL2_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040c4:	e00f      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	3328      	adds	r3, #40	; 0x28
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 fc08 	bl	80068e4 <RCCEx_PLL3_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040ee:	4ba5      	ldr	r3, [pc, #660]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fc:	4aa1      	ldr	r2, [pc, #644]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6513      	str	r3, [r2, #80]	; 0x50
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004118:	f04f 0900 	mov.w	r9, #0
 800411c:	ea58 0309 	orrs.w	r3, r8, r9
 8004120:	d047      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	2b04      	cmp	r3, #4
 800412a:	d82a      	bhi.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004149 	.word	0x08004149
 8004138:	08004157 	.word	0x08004157
 800413c:	0800416d 	.word	0x0800416d
 8004140:	0800418b 	.word	0x0800418b
 8004144:	0800418b 	.word	0x0800418b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004148:	4b8e      	ldr	r3, [pc, #568]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a8d      	ldr	r2, [pc, #564]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800414e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004154:	e01a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415a:	3308      	adds	r3, #8
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f002 fb0e 	bl	8006780 <RCCEx_PLL2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800416a:	e00f      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004170:	3328      	adds	r3, #40	; 0x28
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f002 fbb5 	bl	80068e4 <RCCEx_PLL3_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004180:	e004      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800418a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004194:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	f023 0107 	bic.w	r1, r3, #7
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	4a78      	ldr	r2, [pc, #480]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6513      	str	r3, [r2, #80]	; 0x50
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80041be:	f04f 0b00 	mov.w	fp, #0
 80041c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80041c6:	d04c      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d030      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80041d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d8:	d829      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041da:	2bc0      	cmp	r3, #192	; 0xc0
 80041dc:	d02d      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80041de:	2bc0      	cmp	r3, #192	; 0xc0
 80041e0:	d825      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d018      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d821      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d007      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80041f2:	e01c      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f4:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	4a62      	ldr	r2, [pc, #392]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004200:	e01c      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004206:	3308      	adds	r3, #8
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f002 fab8 	bl	8006780 <RCCEx_PLL2_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004216:	e011      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421c:	3328      	adds	r3, #40	; 0x28
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f002 fb5f 	bl	80068e4 <RCCEx_PLL3_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800422c:	e006      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004234:	e002      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800423a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004244:	4b4f      	ldr	r3, [pc, #316]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004248:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	4a4c      	ldr	r2, [pc, #304]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6513      	str	r3, [r2, #80]	; 0x50
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800425e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800426e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004278:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d053      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800428a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800428e:	d035      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004294:	d82e      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004296:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800429a:	d031      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800429c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80042a0:	d828      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a6:	d01a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80042a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ac:	d822      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80042b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b6:	d007      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80042b8:	e01c      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ba:	4b32      	ldr	r3, [pc, #200]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	4a31      	ldr	r2, [pc, #196]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042c6:	e01c      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042cc:	3308      	adds	r3, #8
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f002 fa55 	bl	8006780 <RCCEx_PLL2_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80042dc:	e011      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	3328      	adds	r3, #40	; 0x28
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 fafc 	bl	80068e4 <RCCEx_PLL3_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042f2:	e006      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042fa:	e002      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800431c:	430b      	orrs	r3, r1
 800431e:	6593      	str	r3, [r2, #88]	; 0x58
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004336:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800433a:	2300      	movs	r3, #0
 800433c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004340:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004344:	460b      	mov	r3, r1
 8004346:	4313      	orrs	r3, r2
 8004348:	d056      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004356:	d038      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800435c:	d831      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800435e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004362:	d034      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004364:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004368:	d82b      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800436a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800436e:	d01d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004374:	d825      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800437a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004380:	e01f      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004382:	bf00      	nop
 8004384:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004388:	4ba2      	ldr	r3, [pc, #648]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	4aa1      	ldr	r2, [pc, #644]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800438e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004394:	e01c      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439a:	3308      	adds	r3, #8
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f002 f9ee 	bl	8006780 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043aa:	e011      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	3328      	adds	r3, #40	; 0x28
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f002 fa95 	bl	80068e4 <RCCEx_PLL3_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043c0:	e006      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043d8:	4b8e      	ldr	r3, [pc, #568]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043e8:	4a8a      	ldr	r2, [pc, #552]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6593      	str	r3, [r2, #88]	; 0x58
 80043ee:	e003      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800440e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d03a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	2b30      	cmp	r3, #48	; 0x30
 8004420:	d01f      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004422:	2b30      	cmp	r3, #48	; 0x30
 8004424:	d819      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004426:	2b20      	cmp	r3, #32
 8004428:	d00c      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800442a:	2b20      	cmp	r3, #32
 800442c:	d815      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d019      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004432:	2b10      	cmp	r3, #16
 8004434:	d111      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004436:	4b77      	ldr	r3, [pc, #476]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	4a76      	ldr	r2, [pc, #472]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004442:	e011      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004448:	3308      	adds	r3, #8
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f002 f997 	bl	8006780 <RCCEx_PLL2_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004458:	e006      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004460:	e002      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	4a65      	ldr	r2, [pc, #404]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004480:	430b      	orrs	r3, r1
 8004482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800449a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d051      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b8:	d035      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80044ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044be:	d82e      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044c4:	d031      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80044c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ca:	d828      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d0:	d01a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d6:	d822      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d007      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80044e2:	e01c      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e4:	4b4b      	ldr	r3, [pc, #300]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044f0:	e01c      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f6:	3308      	adds	r3, #8
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f002 f940 	bl	8006780 <RCCEx_PLL2_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004506:	e011      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450c:	3328      	adds	r3, #40	; 0x28
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f002 f9e7 	bl	80068e4 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004524:	e002      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800452a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004542:	4a34      	ldr	r2, [pc, #208]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004544:	430b      	orrs	r3, r1
 8004546:	6513      	str	r3, [r2, #80]	; 0x50
 8004548:	e003      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800454e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800455e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004562:	2300      	movs	r3, #0
 8004564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004568:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800456c:	460b      	mov	r3, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	d056      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457c:	d033      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800457e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004582:	d82c      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004588:	d02f      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800458a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800458e:	d826      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004594:	d02b      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800459a:	d820      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800459c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a0:	d012      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80045a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a6:	d81a      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d022      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d115      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b6:	3308      	adds	r3, #8
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f002 f8e0 	bl	8006780 <RCCEx_PLL2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045c6:	e015      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045cc:	3328      	adds	r3, #40	; 0x28
 80045ce:	2101      	movs	r1, #1
 80045d0:	4618      	mov	r0, r3
 80045d2:	f002 f987 	bl	80068e4 <RCCEx_PLL3_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045e4:	e006      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80045e6:	bf00      	nop
 80045e8:	e004      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80045ea:	bf00      	nop
 80045ec:	e002      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80045f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004600:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460a:	4a02      	ldr	r2, [pc, #8]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800460c:	430b      	orrs	r3, r1
 800460e:	6513      	str	r3, [r2, #80]	; 0x50
 8004610:	e006      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004612:	bf00      	nop
 8004614:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800461c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800462c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004630:	2300      	movs	r3, #0
 8004632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004636:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800463a:	460b      	mov	r3, r1
 800463c:	4313      	orrs	r3, r2
 800463e:	d055      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800464c:	d033      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800464e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004652:	d82c      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d02f      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465e:	d826      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004664:	d02b      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004666:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800466a:	d820      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800466c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004670:	d012      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004676:	d81a      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800467c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004680:	d115      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004686:	3308      	adds	r3, #8
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f002 f878 	bl	8006780 <RCCEx_PLL2_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004696:	e015      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469c:	3328      	adds	r3, #40	; 0x28
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f002 f91f 	bl	80068e4 <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046ac:	e00a      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046b4:	e006      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046b6:	bf00      	nop
 80046b8:	e004      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046cc:	4ba3      	ldr	r3, [pc, #652]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046dc:	4a9f      	ldr	r2, [pc, #636]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046de:	430b      	orrs	r3, r1
 80046e0:	6593      	str	r3, [r2, #88]	; 0x58
 80046e2:	e003      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80046f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004702:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	d037      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004716:	d00e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800471c:	d816      	bhi.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004726:	d111      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004728:	4b8c      	ldr	r3, [pc, #560]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	4a8b      	ldr	r2, [pc, #556]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800472e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004734:	e00f      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473a:	3308      	adds	r3, #8
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f002 f81e 	bl	8006780 <RCCEx_PLL2_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800474a:	e004      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800475e:	4b7f      	ldr	r3, [pc, #508]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a7b      	ldr	r2, [pc, #492]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800476e:	430b      	orrs	r3, r1
 8004770:	6513      	str	r3, [r2, #80]	; 0x50
 8004772:	e003      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004778:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004792:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004796:	460b      	mov	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	d039      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d81c      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047e9 	.word	0x080047e9
 80047b0:	080047bd 	.word	0x080047bd
 80047b4:	080047cb 	.word	0x080047cb
 80047b8:	080047e9 	.word	0x080047e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047bc:	4b67      	ldr	r3, [pc, #412]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4a66      	ldr	r2, [pc, #408]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047c8:	e00f      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	3308      	adds	r3, #8
 80047d0:	2102      	movs	r1, #2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 ffd4 	bl	8006780 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047de:	e004      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80047e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047f2:	4b5a      	ldr	r3, [pc, #360]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f6:	f023 0103 	bic.w	r1, r3, #3
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004800:	4a56      	ldr	r2, [pc, #344]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004802:	430b      	orrs	r3, r1
 8004804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004806:	e003      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800480c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800481c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004826:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800482a:	460b      	mov	r3, r1
 800482c:	4313      	orrs	r3, r2
 800482e:	f000 809f 	beq.w	8004970 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004832:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a4a      	ldr	r2, [pc, #296]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800483e:	f7fc fd09 	bl	8001254 <HAL_GetTick>
 8004842:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004846:	e00b      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004848:	f7fc fd04 	bl	8001254 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b64      	cmp	r3, #100	; 0x64
 8004856:	d903      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800485e:	e005      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004860:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ed      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800486c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004870:	2b00      	cmp	r3, #0
 8004872:	d179      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004874:	4b39      	ldr	r3, [pc, #228]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004880:	4053      	eors	r3, r2
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	2b00      	cmp	r3, #0
 8004888:	d015      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004892:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004896:	4b31      	ldr	r3, [pc, #196]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	4a30      	ldr	r2, [pc, #192]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048a2:	4b2e      	ldr	r3, [pc, #184]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	4a2d      	ldr	r2, [pc, #180]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048ae:	4a2b      	ldr	r2, [pc, #172]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c2:	d118      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fc fcc6 	bl	8001254 <HAL_GetTick>
 80048c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048cc:	e00d      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fc fcc1 	bl	8001254 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048d8:	1ad2      	subs	r2, r2, r3
 80048da:	f241 3388 	movw	r3, #5000	; 0x1388
 80048de:	429a      	cmp	r2, r3
 80048e0:	d903      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80048e8:	e005      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0eb      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d129      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800490e:	d10e      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004920:	091a      	lsrs	r2, r3, #4
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004924:	4013      	ands	r3, r2
 8004926:	4a0d      	ldr	r2, [pc, #52]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6113      	str	r3, [r2, #16]
 800492c:	e005      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	4a0a      	ldr	r2, [pc, #40]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004934:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004938:	6113      	str	r3, [r2, #16]
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800493c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494a:	4a04      	ldr	r2, [pc, #16]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800494c:	430b      	orrs	r3, r1
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	e00e      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800495a:	e009      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800495c:	58024400 	.word	0x58024400
 8004960:	58024800 	.word	0x58024800
 8004964:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f002 0301 	and.w	r3, r2, #1
 800497c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004986:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800498a:	460b      	mov	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	f000 8089 	beq.w	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004998:	2b28      	cmp	r3, #40	; 0x28
 800499a:	d86b      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	08004a7d 	.word	0x08004a7d
 80049a8:	08004a75 	.word	0x08004a75
 80049ac:	08004a75 	.word	0x08004a75
 80049b0:	08004a75 	.word	0x08004a75
 80049b4:	08004a75 	.word	0x08004a75
 80049b8:	08004a75 	.word	0x08004a75
 80049bc:	08004a75 	.word	0x08004a75
 80049c0:	08004a75 	.word	0x08004a75
 80049c4:	08004a49 	.word	0x08004a49
 80049c8:	08004a75 	.word	0x08004a75
 80049cc:	08004a75 	.word	0x08004a75
 80049d0:	08004a75 	.word	0x08004a75
 80049d4:	08004a75 	.word	0x08004a75
 80049d8:	08004a75 	.word	0x08004a75
 80049dc:	08004a75 	.word	0x08004a75
 80049e0:	08004a75 	.word	0x08004a75
 80049e4:	08004a5f 	.word	0x08004a5f
 80049e8:	08004a75 	.word	0x08004a75
 80049ec:	08004a75 	.word	0x08004a75
 80049f0:	08004a75 	.word	0x08004a75
 80049f4:	08004a75 	.word	0x08004a75
 80049f8:	08004a75 	.word	0x08004a75
 80049fc:	08004a75 	.word	0x08004a75
 8004a00:	08004a75 	.word	0x08004a75
 8004a04:	08004a7d 	.word	0x08004a7d
 8004a08:	08004a75 	.word	0x08004a75
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	08004a75 	.word	0x08004a75
 8004a14:	08004a75 	.word	0x08004a75
 8004a18:	08004a75 	.word	0x08004a75
 8004a1c:	08004a75 	.word	0x08004a75
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a75 	.word	0x08004a75
 8004a2c:	08004a75 	.word	0x08004a75
 8004a30:	08004a75 	.word	0x08004a75
 8004a34:	08004a75 	.word	0x08004a75
 8004a38:	08004a75 	.word	0x08004a75
 8004a3c:	08004a75 	.word	0x08004a75
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004a7d 	.word	0x08004a7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 fe95 	bl	8006780 <RCCEx_PLL2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a5c:	e00f      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a62:	3328      	adds	r3, #40	; 0x28
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 ff3c 	bl	80068e4 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a86:	4bbf      	ldr	r3, [pc, #764]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	4abb      	ldr	r2, [pc, #748]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a96:	430b      	orrs	r3, r1
 8004a98:	6553      	str	r3, [r2, #84]	; 0x54
 8004a9a:	e003      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f002 0302 	and.w	r3, r2, #2
 8004ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004aba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	d041      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d824      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004aed 	.word	0x08004aed
 8004adc:	08004b03 	.word	0x08004b03
 8004ae0:	08004b21 	.word	0x08004b21
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b21 	.word	0x08004b21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af0:	3308      	adds	r3, #8
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 fe43 	bl	8006780 <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b00:	e00f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b06:	3328      	adds	r3, #40	; 0x28
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 feea 	bl	80068e4 <RCCEx_PLL3_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b2a:	4b96      	ldr	r3, [pc, #600]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f023 0107 	bic.w	r1, r3, #7
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b38:	4a92      	ldr	r2, [pc, #584]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6553      	str	r3, [r2, #84]	; 0x54
 8004b3e:	e003      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f002 0304 	and.w	r3, r2, #4
 8004b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d044      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b70:	2b05      	cmp	r3, #5
 8004b72:	d825      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004bc9 	.word	0x08004bc9
 8004b80:	08004b95 	.word	0x08004b95
 8004b84:	08004bab 	.word	0x08004bab
 8004b88:	08004bc9 	.word	0x08004bc9
 8004b8c:	08004bc9 	.word	0x08004bc9
 8004b90:	08004bc9 	.word	0x08004bc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b98:	3308      	adds	r3, #8
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fdef 	bl	8006780 <RCCEx_PLL2_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ba8:	e00f      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bae:	3328      	adds	r3, #40	; 0x28
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fe96 	bl	80068e4 <RCCEx_PLL3_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bbe:	e004      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bc6:	e000      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bd2:	4b6c      	ldr	r3, [pc, #432]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	f023 0107 	bic.w	r1, r3, #7
 8004bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be2:	4a68      	ldr	r2, [pc, #416]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6593      	str	r3, [r2, #88]	; 0x58
 8004be8:	e003      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f002 0320 	and.w	r3, r2, #32
 8004bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	d055      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c1e:	d033      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c24:	d82c      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2a:	d02f      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d826      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c36:	d02b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004c38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c3c:	d820      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c42:	d012      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c48:	d81a      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d022      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c52:	d115      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c58:	3308      	adds	r3, #8
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 fd8f 	bl	8006780 <RCCEx_PLL2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c68:	e015      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c6e:	3328      	adds	r3, #40	; 0x28
 8004c70:	2102      	movs	r1, #2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 fe36 	bl	80068e4 <RCCEx_PLL3_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c86:	e006      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c88:	bf00      	nop
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c8c:	bf00      	nop
 8004c8e:	e002      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c9e:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6553      	str	r3, [r2, #84]	; 0x54
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	d058      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ce6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cea:	d033      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004cec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cf0:	d82c      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf6:	d02f      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d826      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d02:	d02b      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d08:	d820      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0e:	d012      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d14:	d81a      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d022      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1e:	d115      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d24:	3308      	adds	r3, #8
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fd29 	bl	8006780 <RCCEx_PLL2_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d34:	e015      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3a:	3328      	adds	r3, #40	; 0x28
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 fdd0 	bl	80068e4 <RCCEx_PLL3_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d52:	e006      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d54:	bf00      	nop
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10e      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d7a:	4a02      	ldr	r2, [pc, #8]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d80:	e006      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004d82:	bf00      	nop
 8004d84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004da0:	2300      	movs	r3, #0
 8004da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004da6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004daa:	460b      	mov	r3, r1
 8004dac:	4313      	orrs	r3, r2
 8004dae:	d055      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004db8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dbc:	d033      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004dbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dc2:	d82c      	bhi.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	d02f      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	d826      	bhi.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dd4:	d02b      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004dd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dda:	d820      	bhi.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de0:	d012      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de6:	d81a      	bhi.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d022      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df0:	d115      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df6:	3308      	adds	r3, #8
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 fcc0 	bl	8006780 <RCCEx_PLL2_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e06:	e015      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0c:	3328      	adds	r3, #40	; 0x28
 8004e0e:	2102      	movs	r1, #2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fd67 	bl	80068e4 <RCCEx_PLL3_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e24:	e006      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e26:	bf00      	nop
 8004e28:	e004      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e002      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e000      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e3c:	4ba1      	ldr	r3, [pc, #644]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e4c:	4a9d      	ldr	r2, [pc, #628]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6593      	str	r3, [r2, #88]	; 0x58
 8004e52:	e003      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f002 0308 	and.w	r3, r2, #8
 8004e68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d01e      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e8e:	3328      	adds	r3, #40	; 0x28
 8004e90:	2102      	movs	r1, #2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fd26 	bl	80068e4 <RCCEx_PLL3_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ea4:	4b87      	ldr	r3, [pc, #540]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	4a83      	ldr	r2, [pc, #524]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f002 0310 	and.w	r3, r2, #16
 8004ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ed0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	d01e      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d10c      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eec:	3328      	adds	r3, #40	; 0x28
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 fcf7 	bl	80068e4 <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f02:	4b70      	ldr	r3, [pc, #448]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f12:	4a6c      	ldr	r2, [pc, #432]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d03e      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f44:	d022      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f4a:	d81b      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d00b      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004f56:	e015      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 fc0d 	bl	8006780 <RCCEx_PLL2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f6c:	e00f      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f72:	3328      	adds	r3, #40	; 0x28
 8004f74:	2102      	movs	r1, #2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f001 fcb4 	bl	80068e4 <RCCEx_PLL3_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f82:	e004      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f96:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fa6:	4a47      	ldr	r2, [pc, #284]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6593      	str	r3, [r2, #88]	; 0x58
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004fc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	d03b      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fde:	d01f      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004fe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fe4:	d818      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fea:	d003      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff0:	d007      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004ff2:	e011      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff4:	4b33      	ldr	r3, [pc, #204]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005000:	e00f      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005006:	3328      	adds	r3, #40	; 0x28
 8005008:	2101      	movs	r1, #1
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fc6a 	bl	80068e4 <RCCEx_PLL3_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005016:	e004      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800501e:	e000      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800502a:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800503c:	430b      	orrs	r3, r1
 800503e:	6553      	str	r3, [r2, #84]	; 0x54
 8005040:	e003      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005046:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005056:	673b      	str	r3, [r7, #112]	; 0x70
 8005058:	2300      	movs	r3, #0
 800505a:	677b      	str	r3, [r7, #116]	; 0x74
 800505c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005060:	460b      	mov	r3, r1
 8005062:	4313      	orrs	r3, r2
 8005064:	d034      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d007      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005076:	e011      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005078:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	4a11      	ldr	r2, [pc, #68]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800507e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005084:	e00e      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508a:	3308      	adds	r3, #8
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f001 fb76 	bl	8006780 <RCCEx_PLL2_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800509a:	e003      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10d      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	4a02      	ldr	r2, [pc, #8]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050c0:	e006      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80050dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80050de:	2300      	movs	r3, #0
 80050e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80050e6:	460b      	mov	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	d00c      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050f0:	3328      	adds	r3, #40	; 0x28
 80050f2:	2102      	movs	r1, #2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fbf5 	bl	80068e4 <RCCEx_PLL3_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005112:	663b      	str	r3, [r7, #96]	; 0x60
 8005114:	2300      	movs	r3, #0
 8005116:	667b      	str	r3, [r7, #100]	; 0x64
 8005118:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d038      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800512e:	d018      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005134:	d811      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513a:	d014      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800513c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005140:	d80b      	bhi.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d011      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514a:	d106      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514c:	4bc3      	ldr	r3, [pc, #780]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4ac2      	ldr	r2, [pc, #776]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005158:	e008      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005160:	e004      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005162:	bf00      	nop
 8005164:	e002      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005166:	bf00      	nop
 8005168:	e000      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800516a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800516c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005174:	4bb9      	ldr	r3, [pc, #740]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800517c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005184:	4ab5      	ldr	r2, [pc, #724]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005186:	430b      	orrs	r3, r1
 8005188:	6553      	str	r3, [r2, #84]	; 0x54
 800518a:	e003      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005190:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80051a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80051a2:	2300      	movs	r3, #0
 80051a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80051aa:	460b      	mov	r3, r1
 80051ac:	4313      	orrs	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051b0:	4baa      	ldr	r3, [pc, #680]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051be:	4aa7      	ldr	r2, [pc, #668]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80051d0:	653b      	str	r3, [r7, #80]	; 0x50
 80051d2:	2300      	movs	r3, #0
 80051d4:	657b      	str	r3, [r7, #84]	; 0x54
 80051d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80051da:	460b      	mov	r3, r1
 80051dc:	4313      	orrs	r3, r2
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80051e0:	4b9e      	ldr	r3, [pc, #632]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051f0:	4a9a      	ldr	r2, [pc, #616]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005202:	64bb      	str	r3, [r7, #72]	; 0x48
 8005204:	2300      	movs	r3, #0
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800520c:	460b      	mov	r3, r1
 800520e:	4313      	orrs	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005212:	4b92      	ldr	r3, [pc, #584]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005216:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800521a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005220:	4a8e      	ldr	r2, [pc, #568]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005222:	430b      	orrs	r3, r1
 8005224:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005232:	643b      	str	r3, [r7, #64]	; 0x40
 8005234:	2300      	movs	r3, #0
 8005236:	647b      	str	r3, [r7, #68]	; 0x44
 8005238:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800523c:	460b      	mov	r3, r1
 800523e:	4313      	orrs	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005242:	4b86      	ldr	r3, [pc, #536]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	4a85      	ldr	r2, [pc, #532]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005248:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800524c:	6113      	str	r3, [r2, #16]
 800524e:	4b83      	ldr	r3, [pc, #524]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005250:	6919      	ldr	r1, [r3, #16]
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005256:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800525a:	4a80      	ldr	r2, [pc, #512]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800525c:	430b      	orrs	r3, r1
 800525e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800526c:	63bb      	str	r3, [r7, #56]	; 0x38
 800526e:	2300      	movs	r3, #0
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005272:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005276:	460b      	mov	r3, r1
 8005278:	4313      	orrs	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800527c:	4b77      	ldr	r3, [pc, #476]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	4a74      	ldr	r2, [pc, #464]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800528c:	430b      	orrs	r3, r1
 800528e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800529c:	633b      	str	r3, [r7, #48]	; 0x30
 800529e:	2300      	movs	r3, #0
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
 80052a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80052a6:	460b      	mov	r3, r1
 80052a8:	4313      	orrs	r3, r2
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052ac:	4b6b      	ldr	r3, [pc, #428]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052bc:	4a67      	ldr	r2, [pc, #412]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	2100      	movs	r1, #0
 80052cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80052d8:	460b      	mov	r3, r1
 80052da:	4313      	orrs	r3, r2
 80052dc:	d011      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	3308      	adds	r3, #8
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fa4a 	bl	8006780 <RCCEx_PLL2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80052f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	2100      	movs	r1, #0
 800530c:	6239      	str	r1, [r7, #32]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
 8005314:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005318:	460b      	mov	r3, r1
 800531a:	4313      	orrs	r3, r2
 800531c:	d011      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800531e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005322:	3308      	adds	r3, #8
 8005324:	2101      	movs	r1, #1
 8005326:	4618      	mov	r0, r3
 8005328:	f001 fa2a 	bl	8006780 <RCCEx_PLL2_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	2100      	movs	r1, #0
 800534c:	61b9      	str	r1, [r7, #24]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005358:	460b      	mov	r3, r1
 800535a:	4313      	orrs	r3, r2
 800535c:	d011      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005362:	3308      	adds	r3, #8
 8005364:	2102      	movs	r1, #2
 8005366:	4618      	mov	r0, r3
 8005368:	f001 fa0a 	bl	8006780 <RCCEx_PLL2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800537e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	2100      	movs	r1, #0
 800538c:	6139      	str	r1, [r7, #16]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d011      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800539e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a2:	3328      	adds	r3, #40	; 0x28
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 fa9c 	bl	80068e4 <RCCEx_PLL3_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80053b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	2100      	movs	r1, #0
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d011      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e2:	3328      	adds	r3, #40	; 0x28
 80053e4:	2101      	movs	r1, #1
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 fa7c 	bl	80068e4 <RCCEx_PLL3_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80053f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	2100      	movs	r1, #0
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005418:	460b      	mov	r3, r1
 800541a:	4313      	orrs	r3, r2
 800541c:	d011      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005422:	3328      	adds	r3, #40	; 0x28
 8005424:	2102      	movs	r1, #2
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fa5c 	bl	80068e4 <RCCEx_PLL3_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800543e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005442:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	e000      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005456:	46bd      	mov	sp, r7
 8005458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545c:	58024400 	.word	0x58024400

08005460 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b090      	sub	sp, #64	; 0x40
 8005464:	af00      	add	r7, sp, #0
 8005466:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800546a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800546e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005472:	430b      	orrs	r3, r1
 8005474:	f040 8094 	bne.w	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005478:	4b9e      	ldr	r3, [pc, #632]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800547a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	2b04      	cmp	r3, #4
 8005486:	f200 8087 	bhi.w	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a5 	.word	0x080054a5
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054f5 	.word	0x080054f5
 800549c:	08005591 	.word	0x08005591
 80054a0:	0800551d 	.word	0x0800551d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054a4:	4b93      	ldr	r3, [pc, #588]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b0:	d108      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 f810 	bl	80064dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054c0:	f000 bd45 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c8:	f000 bd41 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054cc:	4b89      	ldr	r3, [pc, #548]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d8:	d108      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054da:	f107 0318 	add.w	r3, r7, #24
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd54 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054e8:	f000 bd31 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f0:	f000 bd2d 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054f4:	4b7f      	ldr	r3, [pc, #508]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005500:	d108      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005502:	f107 030c 	add.w	r3, r7, #12
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fe94 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005510:	f000 bd1d 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005518:	f000 bd19 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800551c:	4b75      	ldr	r3, [pc, #468]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005524:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005526:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b04      	cmp	r3, #4
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005538:	4b6e      	ldr	r3, [pc, #440]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	08db      	lsrs	r3, r3, #3
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	4a6d      	ldr	r2, [pc, #436]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554a:	e01f      	b.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800554c:	4b69      	ldr	r3, [pc, #420]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005558:	d106      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005560:	d102      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005562:	4b66      	ldr	r3, [pc, #408]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005566:	e011      	b.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005568:	4b62      	ldr	r3, [pc, #392]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005574:	d106      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557c:	d102      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800557e:	4b60      	ldr	r3, [pc, #384]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005582:	e003      	b.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005588:	f000 bce1 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800558c:	f000 bcdf 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005590:	4b5c      	ldr	r3, [pc, #368]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005594:	f000 bcdb 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800559c:	f000 bcd7 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80055a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80055a8:	430b      	orrs	r3, r1
 80055aa:	f040 80ad 	bne.w	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80055ae:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055be:	d056      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c6:	f200 8090 	bhi.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	2bc0      	cmp	r3, #192	; 0xc0
 80055ce:	f000 8088 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	2bc0      	cmp	r3, #192	; 0xc0
 80055d6:	f200 8088 	bhi.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d032      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	f200 8081 	bhi.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d014      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80055f4:	e079      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055f6:	4b3f      	ldr	r3, [pc, #252]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005602:	d108      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005608:	4618      	mov	r0, r3
 800560a:	f000 ff67 	bl	80064dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005612:	f000 bc9c 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800561a:	f000 bc98 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800561e:	4b35      	ldr	r3, [pc, #212]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562a:	d108      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800562c:	f107 0318 	add.w	r3, r7, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fcab 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800563a:	f000 bc88 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005642:	f000 bc84 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800564e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005652:	d108      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fdeb 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005662:	f000 bc74 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800566a:	f000 bc70 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005676:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005678:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b04      	cmp	r3, #4
 8005682:	d10c      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	08db      	lsrs	r3, r3, #3
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569c:	e01f      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056aa:	d106      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b2:	d102      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056b4:	4b11      	ldr	r3, [pc, #68]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	e011      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056ba:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c6:	d106      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ce:	d102      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80056da:	f000 bc38 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056de:	f000 bc36 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e6:	f000 bc32 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ee:	f000 bc2e 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056f2:	bf00      	nop
 80056f4:	58024400 	.word	0x58024400
 80056f8:	03d09000 	.word	0x03d09000
 80056fc:	003d0900 	.word	0x003d0900
 8005700:	007a1200 	.word	0x007a1200
 8005704:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800570c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005710:	430b      	orrs	r3, r1
 8005712:	f040 809c 	bne.w	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005716:	4b9e      	ldr	r3, [pc, #632]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800571e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005726:	d054      	beq.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800572e:	f200 808b 	bhi.w	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005738:	f000 8083 	beq.w	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005742:	f200 8081 	bhi.w	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d02f      	beq.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005754:	d878      	bhi.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005762:	d012      	beq.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005764:	e070      	b.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005766:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005772:	d107      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005778:	4618      	mov	r0, r3
 800577a:	f000 feaf 	bl	80064dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005782:	e3e4      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005788:	e3e1      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800578a:	4b81      	ldr	r3, [pc, #516]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005796:	d107      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005798:	f107 0318 	add.w	r3, r7, #24
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fbf5 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057a6:	e3d2      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ac:	e3cf      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057ae:	4b78      	ldr	r3, [pc, #480]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ba:	d107      	bne.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057bc:	f107 030c 	add.w	r3, r7, #12
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fd37 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ca:	e3c0      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d0:	e3bd      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057d2:	4b6f      	ldr	r3, [pc, #444]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057dc:	4b6c      	ldr	r3, [pc, #432]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d10c      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ee:	4b68      	ldr	r3, [pc, #416]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	08db      	lsrs	r3, r3, #3
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	4a66      	ldr	r2, [pc, #408]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80057fa:	fa22 f303 	lsr.w	r3, r2, r3
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005800:	e01e      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005802:	4b63      	ldr	r3, [pc, #396]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800580e:	d106      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005816:	d102      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005818:	4b5f      	ldr	r3, [pc, #380]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581c:	e010      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800581e:	4b5c      	ldr	r3, [pc, #368]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800582a:	d106      	bne.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005832:	d102      	bne.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005834:	4b59      	ldr	r3, [pc, #356]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005838:	e002      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800583e:	e386      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005840:	e385      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005842:	4b57      	ldr	r3, [pc, #348]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005846:	e382      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800584c:	e37f      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800584e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005852:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005856:	430b      	orrs	r3, r1
 8005858:	f040 80a7 	bne.w	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800585c:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005860:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005864:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800586c:	d055      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005874:	f200 8096 	bhi.w	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800587e:	f000 8084 	beq.w	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005888:	f200 808c 	bhi.w	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005892:	d030      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800589a:	f200 8083 	bhi.w	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058aa:	d012      	beq.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80058ac:	e07a      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058ae:	4b38      	ldr	r3, [pc, #224]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ba:	d107      	bne.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fe0b 	bl	80064dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ca:	e340      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d0:	e33d      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058de:	d107      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058e0:	f107 0318 	add.w	r3, r7, #24
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fb51 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ee:	e32e      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f4:	e32b      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005902:	d107      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005904:	f107 030c 	add.w	r3, r7, #12
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fc93 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005912:	e31c      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005918:	e319      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005922:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d10c      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005936:	4b16      	ldr	r3, [pc, #88]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	08db      	lsrs	r3, r3, #3
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005942:	fa22 f303 	lsr.w	r3, r2, r3
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005948:	e01e      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d106      	bne.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800595e:	d102      	bne.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005964:	e010      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005972:	d106      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800597a:	d102      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800597c:	4b07      	ldr	r3, [pc, #28]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005980:	e002      	b.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005986:	e2e2      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005988:	e2e1      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800598e:	e2de      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005990:	58024400 	.word	0x58024400
 8005994:	03d09000 	.word	0x03d09000
 8005998:	003d0900 	.word	0x003d0900
 800599c:	007a1200 	.word	0x007a1200
 80059a0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059a8:	e2d1      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80059aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80059b2:	430b      	orrs	r3, r1
 80059b4:	f040 809c 	bne.w	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80059b8:	4b93      	ldr	r3, [pc, #588]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c8:	d054      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d0:	f200 808b 	bhi.w	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059da:	f000 8083 	beq.w	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059e4:	f200 8081 	bhi.w	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ee:	d02f      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f6:	d878      	bhi.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d012      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005a06:	e070      	b.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a08:	4b7f      	ldr	r3, [pc, #508]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a14:	d107      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fd5e 	bl	80064dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a24:	e293      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2a:	e290      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a2c:	4b76      	ldr	r3, [pc, #472]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a38:	d107      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a3a:	f107 0318 	add.w	r3, r7, #24
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 faa4 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a48:	e281      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a4e:	e27e      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a50:	4b6d      	ldr	r3, [pc, #436]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fbe6 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a6c:	e26f      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a72:	e26c      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a74:	4b64      	ldr	r3, [pc, #400]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a7e:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d10c      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a90:	4b5d      	ldr	r3, [pc, #372]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	08db      	lsrs	r3, r3, #3
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	4a5c      	ldr	r2, [pc, #368]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa2:	e01e      	b.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005aa4:	4b58      	ldr	r3, [pc, #352]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab0:	d106      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab8:	d102      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005aba:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005abe:	e010      	b.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ac0:	4b51      	ldr	r3, [pc, #324]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005acc:	d106      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad4:	d102      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ad6:	4b4f      	ldr	r3, [pc, #316]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ada:	e002      	b.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005ae0:	e235      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ae2:	e234      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ae4:	4b4c      	ldr	r3, [pc, #304]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae8:	e231      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aee:	e22e      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005af8:	430b      	orrs	r3, r1
 8005afa:	f040 808f 	bne.w	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005afe:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b0e:	d06b      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b16:	d874      	bhi.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b1e:	d056      	beq.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b26:	d86c      	bhi.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b2e:	d03b      	beq.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b36:	d864      	bhi.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b3e:	d021      	beq.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b46:	d85c      	bhi.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b54:	d004      	beq.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005b56:	e054      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7fe fa0a 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8005b5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b5e:	e1f6      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b60:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6e:	f107 0318 	add.w	r3, r7, #24
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fa0a 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b7c:	e1e7      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b82:	e1e4      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b84:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b90:	d107      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fb4c 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ba0:	e1d5      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba6:	e1d2      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d109      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc6:	e1c2      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bcc:	e1bf      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bda:	d102      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be0:	e1b5      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be6:	e1b2      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bf4:	d102      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005bf6:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bfa:	e1a8      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c00:	e1a5      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c06:	e1a2      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	03d09000 	.word	0x03d09000
 8005c10:	003d0900 	.word	0x003d0900
 8005c14:	007a1200 	.word	0x007a1200
 8005c18:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c20:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005c24:	430b      	orrs	r3, r1
 8005c26:	d173      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005c28:	4b9c      	ldr	r3, [pc, #624]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c38:	d02f      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c40:	d863      	bhi.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d012      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005c50:	e05b      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c52:	4b92      	ldr	r3, [pc, #584]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c60:	f107 0318 	add.w	r3, r7, #24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f991 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c6e:	e16e      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c74:	e16b      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c76:	4b89      	ldr	r3, [pc, #548]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c82:	d107      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fad3 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c92:	e15c      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c98:	e159      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c9a:	4b80      	ldr	r3, [pc, #512]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ca4:	4b7d      	ldr	r3, [pc, #500]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d10c      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cb6:	4b79      	ldr	r3, [pc, #484]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	08db      	lsrs	r3, r3, #3
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	4a77      	ldr	r2, [pc, #476]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc8:	e01e      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cca:	4b74      	ldr	r3, [pc, #464]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd6:	d106      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cde:	d102      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ce0:	4b70      	ldr	r3, [pc, #448]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce4:	e010      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ce6:	4b6d      	ldr	r3, [pc, #436]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cf2:	d106      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfa:	d102      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cfc:	4b6a      	ldr	r3, [pc, #424]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d00:	e002      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005d06:	e122      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d08:	e121      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d0e:	e11e      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d14:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	d133      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005d1c:	4b5f      	ldr	r3, [pc, #380]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d32:	d012      	beq.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005d34:	e023      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d36:	4b59      	ldr	r3, [pc, #356]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d42:	d107      	bne.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fbc7 	bl	80064dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d52:	e0fc      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d58:	e0f9      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d5a:	4b50      	ldr	r3, [pc, #320]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d66:	d107      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d68:	f107 0318 	add.w	r3, r7, #24
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f90d 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d76:	e0ea      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d7c:	e0e7      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d82:	e0e4      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d88:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	f040 808d 	bne.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005d92:	4b42      	ldr	r3, [pc, #264]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005d9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da2:	d06b      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005daa:	d874      	bhi.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db2:	d056      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d86c      	bhi.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dc2:	d03b      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dca:	d864      	bhi.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd2:	d021      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dda:	d85c      	bhi.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de8:	d004      	beq.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005dea:	e054      	b.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005dec:	f000 f8b8 	bl	8005f60 <HAL_RCCEx_GetD3PCLK1Freq>
 8005df0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005df2:	e0ac      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005df4:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e00:	d107      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e02:	f107 0318 	add.w	r3, r7, #24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f8c0 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e10:	e09d      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e16:	e09a      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e18:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e24:	d107      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fa02 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e34:	e08b      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e3a:	e088      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e3c:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d109      	bne.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e48:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	08db      	lsrs	r3, r3, #3
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e5a:	e078      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e60:	e075      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e62:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6e:	d102      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005e70:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e74:	e06b      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e7a:	e068      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e7c:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e88:	d102      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e8e:	e05e      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e94:	e05b      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e9a:	e058      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	03d09000 	.word	0x03d09000
 8005ea4:	003d0900 	.word	0x003d0900
 8005ea8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	d148      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005eb8:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ec0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec8:	d02a      	beq.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed0:	d838      	bhi.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d004      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ede:	d00d      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005ee0:	e030      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ee2:	4b1d      	ldr	r3, [pc, #116]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eee:	d102      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef4:	e02b      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005efa:	e028      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005efc:	4b16      	ldr	r3, [pc, #88]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f08:	d107      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fae4 	bl	80064dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f18:	e019      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f1e:	e016      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2c:	d107      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2e:	f107 0318 	add.w	r3, r7, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f82a 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f3c:	e007      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f42:	e004      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f48:	e001      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3740      	adds	r7, #64	; 0x40
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	007a1200 	.word	0x007a1200

08005f60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f64:	f7fd ffd4 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	091b      	lsrs	r3, r3, #4
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	4904      	ldr	r1, [pc, #16]	; (8005f88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	58024400 	.word	0x58024400
 8005f88:	0800aee4 	.word	0x0800aee4

08005f8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f94:	4ba1      	ldr	r3, [pc, #644]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f9e:	4b9f      	ldr	r3, [pc, #636]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	0b1b      	lsrs	r3, r3, #12
 8005fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005faa:	4b9c      	ldr	r3, [pc, #624]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fb6:	4b99      	ldr	r3, [pc, #612]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	08db      	lsrs	r3, r3, #3
 8005fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8111 	beq.w	80061fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	f000 8083 	beq.w	80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f200 80a1 	bhi.w	800612c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d056      	beq.n	80060a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ff6:	e099      	b.n	800612c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ff8:	4b88      	ldr	r3, [pc, #544]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d02d      	beq.n	8006060 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006004:	4b85      	ldr	r3, [pc, #532]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	08db      	lsrs	r3, r3, #3
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	4a84      	ldr	r2, [pc, #528]	; (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602e:	4b7b      	ldr	r3, [pc, #492]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006042:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800605e:	e087      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800606e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006072:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006082:	ed97 6a03 	vldr	s12, [r7, #12]
 8006086:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800608a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a2:	e065      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800622c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b59      	ldr	r3, [pc, #356]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e6:	e043      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fa:	4b48      	ldr	r3, [pc, #288]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610a:	ed97 6a03 	vldr	s12, [r7, #12]
 800610e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612a:	e021      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800622c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800613a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613e:	4b37      	ldr	r3, [pc, #220]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006152:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800616e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006170:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	0a5b      	lsrs	r3, r3, #9
 8006176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800618a:	edd7 6a07 	vldr	s13, [r7, #28]
 800618e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006196:	ee17 2a90 	vmov	r2, s15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800619e:	4b1f      	ldr	r3, [pc, #124]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c4:	ee17 2a90 	vmov	r2, s15
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	0e1b      	lsrs	r3, r3, #24
 80061d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f2:	ee17 2a90 	vmov	r2, s15
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061fa:	e008      	b.n	800620e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
}
 800620e:	bf00      	nop
 8006210:	3724      	adds	r7, #36	; 0x24
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	58024400 	.word	0x58024400
 8006220:	03d09000 	.word	0x03d09000
 8006224:	46000000 	.word	0x46000000
 8006228:	4c742400 	.word	0x4c742400
 800622c:	4a742400 	.word	0x4a742400
 8006230:	4af42400 	.word	0x4af42400

08006234 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006234:	b480      	push	{r7}
 8006236:	b089      	sub	sp, #36	; 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800623c:	4ba1      	ldr	r3, [pc, #644]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006246:	4b9f      	ldr	r3, [pc, #636]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	0d1b      	lsrs	r3, r3, #20
 800624c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006250:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006252:	4b9c      	ldr	r3, [pc, #624]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800625e:	4b99      	ldr	r3, [pc, #612]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8111 	beq.w	80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b02      	cmp	r3, #2
 8006286:	f000 8083 	beq.w	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b02      	cmp	r3, #2
 800628e:	f200 80a1 	bhi.w	80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d056      	beq.n	800634c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800629e:	e099      	b.n	80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062a0:	4b88      	ldr	r3, [pc, #544]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d02d      	beq.n	8006308 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062ac:	4b85      	ldr	r3, [pc, #532]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	4a84      	ldr	r2, [pc, #528]	; (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
 80062bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b7b      	ldr	r3, [pc, #492]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006306:	e087      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b6a      	ldr	r3, [pc, #424]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	ed97 6a03 	vldr	s12, [r7, #12]
 800632e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634a:	e065      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b59      	ldr	r3, [pc, #356]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006372:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638e:	e043      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800639e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a2:	4b48      	ldr	r3, [pc, #288]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063d2:	e021      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e6:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006416:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006418:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	0a5b      	lsrs	r3, r3, #9
 800641e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800642e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006432:	edd7 6a07 	vldr	s13, [r7, #28]
 8006436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800643a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643e:	ee17 2a90 	vmov	r2, s15
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	ee07 3a90 	vmov	s15, r3
 8006454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800645c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006460:	edd7 6a07 	vldr	s13, [r7, #28]
 8006464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646c:	ee17 2a90 	vmov	r2, s15
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006474:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	0e1b      	lsrs	r3, r3, #24
 800647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800648a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800648e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649a:	ee17 2a90 	vmov	r2, s15
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064a2:	e008      	b.n	80064b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	609a      	str	r2, [r3, #8]
}
 80064b6:	bf00      	nop
 80064b8:	3724      	adds	r7, #36	; 0x24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
 80064c8:	03d09000 	.word	0x03d09000
 80064cc:	46000000 	.word	0x46000000
 80064d0:	4c742400 	.word	0x4c742400
 80064d4:	4a742400 	.word	0x4a742400
 80064d8:	4af42400 	.word	0x4af42400

080064dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80064dc:	b480      	push	{r7}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064e4:	4ba0      	ldr	r3, [pc, #640]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80064ee:	4b9e      	ldr	r3, [pc, #632]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	091b      	lsrs	r3, r3, #4
 80064f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80064fa:	4b9b      	ldr	r3, [pc, #620]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006504:	4b98      	ldr	r3, [pc, #608]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006508:	08db      	lsrs	r3, r3, #3
 800650a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	fb02 f303 	mul.w	r3, r2, r3
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8111 	beq.w	800674a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b02      	cmp	r3, #2
 800652c:	f000 8083 	beq.w	8006636 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b02      	cmp	r3, #2
 8006534:	f200 80a1 	bhi.w	800667a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d056      	beq.n	80065f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006544:	e099      	b.n	800667a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006546:	4b88      	ldr	r3, [pc, #544]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d02d      	beq.n	80065ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006552:	4b85      	ldr	r3, [pc, #532]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	08db      	lsrs	r3, r3, #3
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	4a83      	ldr	r2, [pc, #524]	; (800676c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800655e:	fa22 f303 	lsr.w	r3, r2, r3
 8006562:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657c:	4b7a      	ldr	r3, [pc, #488]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006590:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065ac:	e087      	b.n	80066be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80065bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c0:	4b69      	ldr	r3, [pc, #420]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065f0:	e065      	b.n	80066be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006778 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006604:	4b58      	ldr	r3, [pc, #352]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006614:	ed97 6a03 	vldr	s12, [r7, #12]
 8006618:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800661c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006634:	e043      	b.n	80066be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006640:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800677c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006648:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006650:	ee07 3a90 	vmov	s15, r3
 8006654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006658:	ed97 6a03 	vldr	s12, [r7, #12]
 800665c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800666c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006678:	e021      	b.n	80066be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006684:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006774 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668c:	4b36      	ldr	r3, [pc, #216]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669c:	ed97 6a03 	vldr	s12, [r7, #12]
 80066a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80066be:	4b2a      	ldr	r3, [pc, #168]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	0a5b      	lsrs	r3, r3, #9
 80066c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e4:	ee17 2a90 	vmov	r2, s15
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	0c1b      	lsrs	r3, r3, #16
 80066f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006706:	edd7 6a07 	vldr	s13, [r7, #28]
 800670a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006712:	ee17 2a90 	vmov	r2, s15
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800671a:	4b13      	ldr	r3, [pc, #76]	; (8006768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	0e1b      	lsrs	r3, r3, #24
 8006720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006734:	edd7 6a07 	vldr	s13, [r7, #28]
 8006738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800673c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006740:	ee17 2a90 	vmov	r2, s15
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006748:	e008      	b.n	800675c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bf00      	nop
 800675e:	3724      	adds	r7, #36	; 0x24
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	58024400 	.word	0x58024400
 800676c:	03d09000 	.word	0x03d09000
 8006770:	46000000 	.word	0x46000000
 8006774:	4c742400 	.word	0x4c742400
 8006778:	4a742400 	.word	0x4a742400
 800677c:	4af42400 	.word	0x4af42400

08006780 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800678e:	4b53      	ldr	r3, [pc, #332]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	2b03      	cmp	r3, #3
 8006798:	d101      	bne.n	800679e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e099      	b.n	80068d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800679e:	4b4f      	ldr	r3, [pc, #316]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a4e      	ldr	r2, [pc, #312]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067aa:	f7fa fd53 	bl	8001254 <HAL_GetTick>
 80067ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067b0:	e008      	b.n	80067c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067b2:	f7fa fd4f 	bl	8001254 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e086      	b.n	80068d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067c4:	4b45      	ldr	r3, [pc, #276]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067d0:	4b42      	ldr	r3, [pc, #264]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	031b      	lsls	r3, r3, #12
 80067de:	493f      	ldr	r1, [pc, #252]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	628b      	str	r3, [r1, #40]	; 0x28
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	025b      	lsls	r3, r3, #9
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	3b01      	subs	r3, #1
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	3b01      	subs	r3, #1
 800680e:	061b      	lsls	r3, r3, #24
 8006810:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006814:	4931      	ldr	r1, [pc, #196]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006816:	4313      	orrs	r3, r2
 8006818:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800681a:	4b30      	ldr	r3, [pc, #192]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 800681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	492d      	ldr	r1, [pc, #180]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006828:	4313      	orrs	r3, r2
 800682a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800682c:	4b2b      	ldr	r3, [pc, #172]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	f023 0220 	bic.w	r2, r3, #32
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	4928      	ldr	r1, [pc, #160]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 800683a:	4313      	orrs	r3, r2
 800683c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800683e:	4b27      	ldr	r3, [pc, #156]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	4a26      	ldr	r2, [pc, #152]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006844:	f023 0310 	bic.w	r3, r3, #16
 8006848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800684a:	4b24      	ldr	r3, [pc, #144]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 800684c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800684e:	4b24      	ldr	r3, [pc, #144]	; (80068e0 <RCCEx_PLL2_Config+0x160>)
 8006850:	4013      	ands	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	69d2      	ldr	r2, [r2, #28]
 8006856:	00d2      	lsls	r2, r2, #3
 8006858:	4920      	ldr	r1, [pc, #128]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 800685a:	4313      	orrs	r3, r2
 800685c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800685e:	4b1f      	ldr	r3, [pc, #124]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	4a1e      	ldr	r2, [pc, #120]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006864:	f043 0310 	orr.w	r3, r3, #16
 8006868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	4a19      	ldr	r2, [pc, #100]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800687a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800687c:	e00f      	b.n	800689e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d106      	bne.n	8006892 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006884:	4b15      	ldr	r3, [pc, #84]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006888:	4a14      	ldr	r2, [pc, #80]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 800688a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800688e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006890:	e005      	b.n	800689e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006892:	4b12      	ldr	r3, [pc, #72]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	4a11      	ldr	r2, [pc, #68]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800689c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a0e      	ldr	r2, [pc, #56]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80068a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068aa:	f7fa fcd3 	bl	8001254 <HAL_GetTick>
 80068ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068b0:	e008      	b.n	80068c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068b2:	f7fa fccf 	bl	8001254 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e006      	b.n	80068d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <RCCEx_PLL2_Config+0x15c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	58024400 	.word	0x58024400
 80068e0:	ffff0007 	.word	0xffff0007

080068e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068f2:	4b53      	ldr	r3, [pc, #332]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d101      	bne.n	8006902 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e099      	b.n	8006a36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006902:	4b4f      	ldr	r3, [pc, #316]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4e      	ldr	r2, [pc, #312]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800690c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800690e:	f7fa fca1 	bl	8001254 <HAL_GetTick>
 8006912:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006914:	e008      	b.n	8006928 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006916:	f7fa fc9d 	bl	8001254 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e086      	b.n	8006a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006928:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006934:	4b42      	ldr	r3, [pc, #264]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	051b      	lsls	r3, r3, #20
 8006942:	493f      	ldr	r1, [pc, #252]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006944:	4313      	orrs	r3, r2
 8006946:	628b      	str	r3, [r1, #40]	; 0x28
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	3b01      	subs	r3, #1
 800694e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	3b01      	subs	r3, #1
 8006958:	025b      	lsls	r3, r3, #9
 800695a:	b29b      	uxth	r3, r3
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	3b01      	subs	r3, #1
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	3b01      	subs	r3, #1
 8006972:	061b      	lsls	r3, r3, #24
 8006974:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006978:	4931      	ldr	r1, [pc, #196]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800697e:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	492d      	ldr	r1, [pc, #180]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800698c:	4313      	orrs	r3, r2
 800698e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006990:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	4928      	ldr	r1, [pc, #160]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069a2:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <RCCEx_PLL3_Config+0x160>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	69d2      	ldr	r2, [r2, #28]
 80069ba:	00d2      	lsls	r2, r2, #3
 80069bc:	4920      	ldr	r1, [pc, #128]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069c2:	4b1f      	ldr	r3, [pc, #124]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069e0:	e00f      	b.n	8006a02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d106      	bne.n	80069f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069e8:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	4a14      	ldr	r2, [pc, #80]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069f4:	e005      	b.n	8006a02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069f6:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	4a11      	ldr	r2, [pc, #68]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a0e      	ldr	r2, [pc, #56]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0e:	f7fa fc21 	bl	8001254 <HAL_GetTick>
 8006a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a14:	e008      	b.n	8006a28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a16:	f7fa fc1d 	bl	8001254 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e006      	b.n	8006a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400
 8006a44:	ffff0007 	.word	0xffff0007

08006a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e049      	b.n	8006aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f841 	bl	8006af6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 fa00 	bl	8006e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d001      	beq.n	8006b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e054      	b.n	8006bce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a26      	ldr	r2, [pc, #152]	; (8006bdc <HAL_TIM_Base_Start_IT+0xd0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d022      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x80>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d01d      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x80>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a22      	ldr	r2, [pc, #136]	; (8006be0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d018      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x80>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x80>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00e      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x80>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <HAL_TIM_Base_Start_IT+0xe0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x80>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x80>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1b      	ldr	r2, [pc, #108]	; (8006bf4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d115      	bne.n	8006bb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <HAL_TIM_Base_Start_IT+0xec>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b06      	cmp	r3, #6
 8006b9c:	d015      	beq.n	8006bca <HAL_TIM_Base_Start_IT+0xbe>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba4:	d011      	beq.n	8006bca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 0201 	orr.w	r2, r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb6:	e008      	b.n	8006bca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	e000      	b.n	8006bcc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40010400 	.word	0x40010400
 8006bf0:	40001800 	.word	0x40001800
 8006bf4:	40014000 	.word	0x40014000
 8006bf8:	00010007 	.word	0x00010007

08006bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d122      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d11b      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0202 	mvn.w	r2, #2
 8006c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f905 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 8006c44:	e005      	b.n	8006c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f8f7 	bl	8006e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f908 	bl	8006e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d122      	bne.n	8006cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d11b      	bne.n	8006cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0204 	mvn.w	r2, #4
 8006c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f8db 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 8006c98:	e005      	b.n	8006ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f8cd 	bl	8006e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8de 	bl	8006e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d122      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d11b      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0208 	mvn.w	r2, #8
 8006cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f8b1 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 8006cec:	e005      	b.n	8006cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f8a3 	bl	8006e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f8b4 	bl	8006e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b10      	cmp	r3, #16
 8006d0c:	d122      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d11b      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0210 	mvn.w	r2, #16
 8006d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2208      	movs	r2, #8
 8006d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f887 	bl	8006e4e <HAL_TIM_IC_CaptureCallback>
 8006d40:	e005      	b.n	8006d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f879 	bl	8006e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f88a 	bl	8006e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d10e      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d107      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0201 	mvn.w	r2, #1
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7f9 ff22 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	2b80      	cmp	r3, #128	; 0x80
 8006d8c:	d10e      	bne.n	8006dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d107      	bne.n	8006dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f914 	bl	8006fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dba:	d10e      	bne.n	8006dda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc6:	2b80      	cmp	r3, #128	; 0x80
 8006dc8:	d107      	bne.n	8006dda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f907 	bl	8006fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d10e      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d107      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f838 	bl	8006e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d10e      	bne.n	8006e32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	d107      	bne.n	8006e32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f06f 0220 	mvn.w	r2, #32
 8006e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8c7 	bl	8006fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <TIM_Base_SetConfig+0x114>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d013      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eaa:	d00f      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a3d      	ldr	r2, [pc, #244]	; (8006fa4 <TIM_Base_SetConfig+0x118>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00b      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a3c      	ldr	r2, [pc, #240]	; (8006fa8 <TIM_Base_SetConfig+0x11c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d007      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a3b      	ldr	r2, [pc, #236]	; (8006fac <TIM_Base_SetConfig+0x120>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a3a      	ldr	r2, [pc, #232]	; (8006fb0 <TIM_Base_SetConfig+0x124>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d108      	bne.n	8006ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a2f      	ldr	r2, [pc, #188]	; (8006fa0 <TIM_Base_SetConfig+0x114>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d01f      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d01b      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a2c      	ldr	r2, [pc, #176]	; (8006fa4 <TIM_Base_SetConfig+0x118>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d017      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2b      	ldr	r2, [pc, #172]	; (8006fa8 <TIM_Base_SetConfig+0x11c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2a      	ldr	r2, [pc, #168]	; (8006fac <TIM_Base_SetConfig+0x120>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00f      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a29      	ldr	r2, [pc, #164]	; (8006fb0 <TIM_Base_SetConfig+0x124>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00b      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a28      	ldr	r2, [pc, #160]	; (8006fb4 <TIM_Base_SetConfig+0x128>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d007      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a27      	ldr	r2, [pc, #156]	; (8006fb8 <TIM_Base_SetConfig+0x12c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_Base_SetConfig+0x9a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <TIM_Base_SetConfig+0x130>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d108      	bne.n	8006f38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <TIM_Base_SetConfig+0x114>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00f      	beq.n	8006f84 <TIM_Base_SetConfig+0xf8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <TIM_Base_SetConfig+0x124>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00b      	beq.n	8006f84 <TIM_Base_SetConfig+0xf8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a11      	ldr	r2, [pc, #68]	; (8006fb4 <TIM_Base_SetConfig+0x128>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d007      	beq.n	8006f84 <TIM_Base_SetConfig+0xf8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a10      	ldr	r2, [pc, #64]	; (8006fb8 <TIM_Base_SetConfig+0x12c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_Base_SetConfig+0xf8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0f      	ldr	r2, [pc, #60]	; (8006fbc <TIM_Base_SetConfig+0x130>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d103      	bne.n	8006f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	615a      	str	r2, [r3, #20]
}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40000c00 	.word	0x40000c00
 8006fb0:	40010400 	.word	0x40010400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800

08006fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e042      	b.n	8007094 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007014:	2b00      	cmp	r3, #0
 8007016:	d106      	bne.n	8007026 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7f9 fe4d 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2224      	movs	r2, #36	; 0x24
 800702a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0201 	bic.w	r2, r2, #1
 800703c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8ba 	bl	80071b8 <UART_SetConfig>
 8007044:	4603      	mov	r3, r0
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e022      	b.n	8007094 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fe16 	bl	8007c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fe9d 	bl	8007dcc <UART_CheckIdleState>
 8007092:	4603      	mov	r3, r0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d17b      	bne.n	80071ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_Transmit+0x26>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e074      	b.n	80071b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2221      	movs	r2, #33	; 0x21
 80070d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070d6:	f7fa f8bd 	bl	8001254 <HAL_GetTick>
 80070da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f4:	d108      	bne.n	8007108 <HAL_UART_Transmit+0x6c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	e003      	b.n	8007110 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007110:	e030      	b.n	8007174 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2200      	movs	r2, #0
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 feff 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e03d      	b.n	80071b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007148:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	3302      	adds	r3, #2
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	e007      	b.n	8007162 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	781a      	ldrb	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	3301      	adds	r3, #1
 8007160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1c8      	bne.n	8007112 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2200      	movs	r2, #0
 8007188:	2140      	movs	r1, #64	; 0x40
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fec8 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e006      	b.n	80071b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e000      	b.n	80071b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071bc:	b092      	sub	sp, #72	; 0x48
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	431a      	orrs	r2, r3
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4313      	orrs	r3, r2
 80071de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4bbe      	ldr	r3, [pc, #760]	; (80074e0 <UART_SetConfig+0x328>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4ab3      	ldr	r2, [pc, #716]	; (80074e4 <UART_SetConfig+0x32c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007220:	4313      	orrs	r3, r2
 8007222:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	4baf      	ldr	r3, [pc, #700]	; (80074e8 <UART_SetConfig+0x330>)
 800722c:	4013      	ands	r3, r2
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007234:	430b      	orrs	r3, r1
 8007236:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	f023 010f 	bic.w	r1, r3, #15
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4aa6      	ldr	r2, [pc, #664]	; (80074ec <UART_SetConfig+0x334>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d177      	bne.n	8007348 <UART_SetConfig+0x190>
 8007258:	4ba5      	ldr	r3, [pc, #660]	; (80074f0 <UART_SetConfig+0x338>)
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007260:	2b28      	cmp	r3, #40	; 0x28
 8007262:	d86d      	bhi.n	8007340 <UART_SetConfig+0x188>
 8007264:	a201      	add	r2, pc, #4	; (adr r2, 800726c <UART_SetConfig+0xb4>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	08007311 	.word	0x08007311
 8007270:	08007341 	.word	0x08007341
 8007274:	08007341 	.word	0x08007341
 8007278:	08007341 	.word	0x08007341
 800727c:	08007341 	.word	0x08007341
 8007280:	08007341 	.word	0x08007341
 8007284:	08007341 	.word	0x08007341
 8007288:	08007341 	.word	0x08007341
 800728c:	08007319 	.word	0x08007319
 8007290:	08007341 	.word	0x08007341
 8007294:	08007341 	.word	0x08007341
 8007298:	08007341 	.word	0x08007341
 800729c:	08007341 	.word	0x08007341
 80072a0:	08007341 	.word	0x08007341
 80072a4:	08007341 	.word	0x08007341
 80072a8:	08007341 	.word	0x08007341
 80072ac:	08007321 	.word	0x08007321
 80072b0:	08007341 	.word	0x08007341
 80072b4:	08007341 	.word	0x08007341
 80072b8:	08007341 	.word	0x08007341
 80072bc:	08007341 	.word	0x08007341
 80072c0:	08007341 	.word	0x08007341
 80072c4:	08007341 	.word	0x08007341
 80072c8:	08007341 	.word	0x08007341
 80072cc:	08007329 	.word	0x08007329
 80072d0:	08007341 	.word	0x08007341
 80072d4:	08007341 	.word	0x08007341
 80072d8:	08007341 	.word	0x08007341
 80072dc:	08007341 	.word	0x08007341
 80072e0:	08007341 	.word	0x08007341
 80072e4:	08007341 	.word	0x08007341
 80072e8:	08007341 	.word	0x08007341
 80072ec:	08007331 	.word	0x08007331
 80072f0:	08007341 	.word	0x08007341
 80072f4:	08007341 	.word	0x08007341
 80072f8:	08007341 	.word	0x08007341
 80072fc:	08007341 	.word	0x08007341
 8007300:	08007341 	.word	0x08007341
 8007304:	08007341 	.word	0x08007341
 8007308:	08007341 	.word	0x08007341
 800730c:	08007339 	.word	0x08007339
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e222      	b.n	800775e <UART_SetConfig+0x5a6>
 8007318:	2304      	movs	r3, #4
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e21e      	b.n	800775e <UART_SetConfig+0x5a6>
 8007320:	2308      	movs	r3, #8
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e21a      	b.n	800775e <UART_SetConfig+0x5a6>
 8007328:	2310      	movs	r3, #16
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e216      	b.n	800775e <UART_SetConfig+0x5a6>
 8007330:	2320      	movs	r3, #32
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e212      	b.n	800775e <UART_SetConfig+0x5a6>
 8007338:	2340      	movs	r3, #64	; 0x40
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e20e      	b.n	800775e <UART_SetConfig+0x5a6>
 8007340:	2380      	movs	r3, #128	; 0x80
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e20a      	b.n	800775e <UART_SetConfig+0x5a6>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a69      	ldr	r2, [pc, #420]	; (80074f4 <UART_SetConfig+0x33c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d130      	bne.n	80073b4 <UART_SetConfig+0x1fc>
 8007352:	4b67      	ldr	r3, [pc, #412]	; (80074f0 <UART_SetConfig+0x338>)
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	2b05      	cmp	r3, #5
 800735c:	d826      	bhi.n	80073ac <UART_SetConfig+0x1f4>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0x1ac>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	0800737d 	.word	0x0800737d
 8007368:	08007385 	.word	0x08007385
 800736c:	0800738d 	.word	0x0800738d
 8007370:	08007395 	.word	0x08007395
 8007374:	0800739d 	.word	0x0800739d
 8007378:	080073a5 	.word	0x080073a5
 800737c:	2300      	movs	r3, #0
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007382:	e1ec      	b.n	800775e <UART_SetConfig+0x5a6>
 8007384:	2304      	movs	r3, #4
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738a:	e1e8      	b.n	800775e <UART_SetConfig+0x5a6>
 800738c:	2308      	movs	r3, #8
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007392:	e1e4      	b.n	800775e <UART_SetConfig+0x5a6>
 8007394:	2310      	movs	r3, #16
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e1e0      	b.n	800775e <UART_SetConfig+0x5a6>
 800739c:	2320      	movs	r3, #32
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e1dc      	b.n	800775e <UART_SetConfig+0x5a6>
 80073a4:	2340      	movs	r3, #64	; 0x40
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e1d8      	b.n	800775e <UART_SetConfig+0x5a6>
 80073ac:	2380      	movs	r3, #128	; 0x80
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e1d4      	b.n	800775e <UART_SetConfig+0x5a6>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a4f      	ldr	r2, [pc, #316]	; (80074f8 <UART_SetConfig+0x340>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d130      	bne.n	8007420 <UART_SetConfig+0x268>
 80073be:	4b4c      	ldr	r3, [pc, #304]	; (80074f0 <UART_SetConfig+0x338>)
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	d826      	bhi.n	8007418 <UART_SetConfig+0x260>
 80073ca:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <UART_SetConfig+0x218>)
 80073cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d0:	080073e9 	.word	0x080073e9
 80073d4:	080073f1 	.word	0x080073f1
 80073d8:	080073f9 	.word	0x080073f9
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007411 	.word	0x08007411
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ee:	e1b6      	b.n	800775e <UART_SetConfig+0x5a6>
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e1b2      	b.n	800775e <UART_SetConfig+0x5a6>
 80073f8:	2308      	movs	r3, #8
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e1ae      	b.n	800775e <UART_SetConfig+0x5a6>
 8007400:	2310      	movs	r3, #16
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e1aa      	b.n	800775e <UART_SetConfig+0x5a6>
 8007408:	2320      	movs	r3, #32
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e1a6      	b.n	800775e <UART_SetConfig+0x5a6>
 8007410:	2340      	movs	r3, #64	; 0x40
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e1a2      	b.n	800775e <UART_SetConfig+0x5a6>
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e19e      	b.n	800775e <UART_SetConfig+0x5a6>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a35      	ldr	r2, [pc, #212]	; (80074fc <UART_SetConfig+0x344>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d130      	bne.n	800748c <UART_SetConfig+0x2d4>
 800742a:	4b31      	ldr	r3, [pc, #196]	; (80074f0 <UART_SetConfig+0x338>)
 800742c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b05      	cmp	r3, #5
 8007434:	d826      	bhi.n	8007484 <UART_SetConfig+0x2cc>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <UART_SetConfig+0x284>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007455 	.word	0x08007455
 8007440:	0800745d 	.word	0x0800745d
 8007444:	08007465 	.word	0x08007465
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007475 	.word	0x08007475
 8007450:	0800747d 	.word	0x0800747d
 8007454:	2300      	movs	r3, #0
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e180      	b.n	800775e <UART_SetConfig+0x5a6>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e17c      	b.n	800775e <UART_SetConfig+0x5a6>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e178      	b.n	800775e <UART_SetConfig+0x5a6>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e174      	b.n	800775e <UART_SetConfig+0x5a6>
 8007474:	2320      	movs	r3, #32
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e170      	b.n	800775e <UART_SetConfig+0x5a6>
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007482:	e16c      	b.n	800775e <UART_SetConfig+0x5a6>
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748a:	e168      	b.n	800775e <UART_SetConfig+0x5a6>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1b      	ldr	r2, [pc, #108]	; (8007500 <UART_SetConfig+0x348>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d142      	bne.n	800751c <UART_SetConfig+0x364>
 8007496:	4b16      	ldr	r3, [pc, #88]	; (80074f0 <UART_SetConfig+0x338>)
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d838      	bhi.n	8007514 <UART_SetConfig+0x35c>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0x2f0>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c1 	.word	0x080074c1
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074d1 	.word	0x080074d1
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	08007505 	.word	0x08007505
 80074bc:	0800750d 	.word	0x0800750d
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e14a      	b.n	800775e <UART_SetConfig+0x5a6>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ce:	e146      	b.n	800775e <UART_SetConfig+0x5a6>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d6:	e142      	b.n	800775e <UART_SetConfig+0x5a6>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e13e      	b.n	800775e <UART_SetConfig+0x5a6>
 80074e0:	cfff69f3 	.word	0xcfff69f3
 80074e4:	58000c00 	.word	0x58000c00
 80074e8:	11fff4ff 	.word	0x11fff4ff
 80074ec:	40011000 	.word	0x40011000
 80074f0:	58024400 	.word	0x58024400
 80074f4:	40004400 	.word	0x40004400
 80074f8:	40004800 	.word	0x40004800
 80074fc:	40004c00 	.word	0x40004c00
 8007500:	40005000 	.word	0x40005000
 8007504:	2320      	movs	r3, #32
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e128      	b.n	800775e <UART_SetConfig+0x5a6>
 800750c:	2340      	movs	r3, #64	; 0x40
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e124      	b.n	800775e <UART_SetConfig+0x5a6>
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e120      	b.n	800775e <UART_SetConfig+0x5a6>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4acb      	ldr	r2, [pc, #812]	; (8007850 <UART_SetConfig+0x698>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d176      	bne.n	8007614 <UART_SetConfig+0x45c>
 8007526:	4bcb      	ldr	r3, [pc, #812]	; (8007854 <UART_SetConfig+0x69c>)
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800752e:	2b28      	cmp	r3, #40	; 0x28
 8007530:	d86c      	bhi.n	800760c <UART_SetConfig+0x454>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <UART_SetConfig+0x380>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	080075dd 	.word	0x080075dd
 800753c:	0800760d 	.word	0x0800760d
 8007540:	0800760d 	.word	0x0800760d
 8007544:	0800760d 	.word	0x0800760d
 8007548:	0800760d 	.word	0x0800760d
 800754c:	0800760d 	.word	0x0800760d
 8007550:	0800760d 	.word	0x0800760d
 8007554:	0800760d 	.word	0x0800760d
 8007558:	080075e5 	.word	0x080075e5
 800755c:	0800760d 	.word	0x0800760d
 8007560:	0800760d 	.word	0x0800760d
 8007564:	0800760d 	.word	0x0800760d
 8007568:	0800760d 	.word	0x0800760d
 800756c:	0800760d 	.word	0x0800760d
 8007570:	0800760d 	.word	0x0800760d
 8007574:	0800760d 	.word	0x0800760d
 8007578:	080075ed 	.word	0x080075ed
 800757c:	0800760d 	.word	0x0800760d
 8007580:	0800760d 	.word	0x0800760d
 8007584:	0800760d 	.word	0x0800760d
 8007588:	0800760d 	.word	0x0800760d
 800758c:	0800760d 	.word	0x0800760d
 8007590:	0800760d 	.word	0x0800760d
 8007594:	0800760d 	.word	0x0800760d
 8007598:	080075f5 	.word	0x080075f5
 800759c:	0800760d 	.word	0x0800760d
 80075a0:	0800760d 	.word	0x0800760d
 80075a4:	0800760d 	.word	0x0800760d
 80075a8:	0800760d 	.word	0x0800760d
 80075ac:	0800760d 	.word	0x0800760d
 80075b0:	0800760d 	.word	0x0800760d
 80075b4:	0800760d 	.word	0x0800760d
 80075b8:	080075fd 	.word	0x080075fd
 80075bc:	0800760d 	.word	0x0800760d
 80075c0:	0800760d 	.word	0x0800760d
 80075c4:	0800760d 	.word	0x0800760d
 80075c8:	0800760d 	.word	0x0800760d
 80075cc:	0800760d 	.word	0x0800760d
 80075d0:	0800760d 	.word	0x0800760d
 80075d4:	0800760d 	.word	0x0800760d
 80075d8:	08007605 	.word	0x08007605
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e2:	e0bc      	b.n	800775e <UART_SetConfig+0x5a6>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e0b8      	b.n	800775e <UART_SetConfig+0x5a6>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e0b4      	b.n	800775e <UART_SetConfig+0x5a6>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e0b0      	b.n	800775e <UART_SetConfig+0x5a6>
 80075fc:	2320      	movs	r3, #32
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e0ac      	b.n	800775e <UART_SetConfig+0x5a6>
 8007604:	2340      	movs	r3, #64	; 0x40
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e0a8      	b.n	800775e <UART_SetConfig+0x5a6>
 800760c:	2380      	movs	r3, #128	; 0x80
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007612:	e0a4      	b.n	800775e <UART_SetConfig+0x5a6>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a8f      	ldr	r2, [pc, #572]	; (8007858 <UART_SetConfig+0x6a0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d130      	bne.n	8007680 <UART_SetConfig+0x4c8>
 800761e:	4b8d      	ldr	r3, [pc, #564]	; (8007854 <UART_SetConfig+0x69c>)
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	2b05      	cmp	r3, #5
 8007628:	d826      	bhi.n	8007678 <UART_SetConfig+0x4c0>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <UART_SetConfig+0x478>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007649 	.word	0x08007649
 8007634:	08007651 	.word	0x08007651
 8007638:	08007659 	.word	0x08007659
 800763c:	08007661 	.word	0x08007661
 8007640:	08007669 	.word	0x08007669
 8007644:	08007671 	.word	0x08007671
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764e:	e086      	b.n	800775e <UART_SetConfig+0x5a6>
 8007650:	2304      	movs	r3, #4
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e082      	b.n	800775e <UART_SetConfig+0x5a6>
 8007658:	2308      	movs	r3, #8
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e07e      	b.n	800775e <UART_SetConfig+0x5a6>
 8007660:	2310      	movs	r3, #16
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e07a      	b.n	800775e <UART_SetConfig+0x5a6>
 8007668:	2320      	movs	r3, #32
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766e:	e076      	b.n	800775e <UART_SetConfig+0x5a6>
 8007670:	2340      	movs	r3, #64	; 0x40
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007676:	e072      	b.n	800775e <UART_SetConfig+0x5a6>
 8007678:	2380      	movs	r3, #128	; 0x80
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767e:	e06e      	b.n	800775e <UART_SetConfig+0x5a6>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a75      	ldr	r2, [pc, #468]	; (800785c <UART_SetConfig+0x6a4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d130      	bne.n	80076ec <UART_SetConfig+0x534>
 800768a:	4b72      	ldr	r3, [pc, #456]	; (8007854 <UART_SetConfig+0x69c>)
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	2b05      	cmp	r3, #5
 8007694:	d826      	bhi.n	80076e4 <UART_SetConfig+0x52c>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <UART_SetConfig+0x4e4>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076b5 	.word	0x080076b5
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	080076c5 	.word	0x080076c5
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076d5 	.word	0x080076d5
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	2300      	movs	r3, #0
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ba:	e050      	b.n	800775e <UART_SetConfig+0x5a6>
 80076bc:	2304      	movs	r3, #4
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c2:	e04c      	b.n	800775e <UART_SetConfig+0x5a6>
 80076c4:	2308      	movs	r3, #8
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ca:	e048      	b.n	800775e <UART_SetConfig+0x5a6>
 80076cc:	2310      	movs	r3, #16
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d2:	e044      	b.n	800775e <UART_SetConfig+0x5a6>
 80076d4:	2320      	movs	r3, #32
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076da:	e040      	b.n	800775e <UART_SetConfig+0x5a6>
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e2:	e03c      	b.n	800775e <UART_SetConfig+0x5a6>
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ea:	e038      	b.n	800775e <UART_SetConfig+0x5a6>
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5b      	ldr	r2, [pc, #364]	; (8007860 <UART_SetConfig+0x6a8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d130      	bne.n	8007758 <UART_SetConfig+0x5a0>
 80076f6:	4b57      	ldr	r3, [pc, #348]	; (8007854 <UART_SetConfig+0x69c>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	2b05      	cmp	r3, #5
 8007700:	d826      	bhi.n	8007750 <UART_SetConfig+0x598>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <UART_SetConfig+0x550>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	08007721 	.word	0x08007721
 800770c:	08007729 	.word	0x08007729
 8007710:	08007731 	.word	0x08007731
 8007714:	08007739 	.word	0x08007739
 8007718:	08007741 	.word	0x08007741
 800771c:	08007749 	.word	0x08007749
 8007720:	2302      	movs	r3, #2
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007726:	e01a      	b.n	800775e <UART_SetConfig+0x5a6>
 8007728:	2304      	movs	r3, #4
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772e:	e016      	b.n	800775e <UART_SetConfig+0x5a6>
 8007730:	2308      	movs	r3, #8
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007736:	e012      	b.n	800775e <UART_SetConfig+0x5a6>
 8007738:	2310      	movs	r3, #16
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773e:	e00e      	b.n	800775e <UART_SetConfig+0x5a6>
 8007740:	2320      	movs	r3, #32
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007746:	e00a      	b.n	800775e <UART_SetConfig+0x5a6>
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774e:	e006      	b.n	800775e <UART_SetConfig+0x5a6>
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007756:	e002      	b.n	800775e <UART_SetConfig+0x5a6>
 8007758:	2380      	movs	r3, #128	; 0x80
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a3f      	ldr	r2, [pc, #252]	; (8007860 <UART_SetConfig+0x6a8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	f040 80f8 	bne.w	800795a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800776a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800776e:	2b20      	cmp	r3, #32
 8007770:	dc46      	bgt.n	8007800 <UART_SetConfig+0x648>
 8007772:	2b02      	cmp	r3, #2
 8007774:	f2c0 8082 	blt.w	800787c <UART_SetConfig+0x6c4>
 8007778:	3b02      	subs	r3, #2
 800777a:	2b1e      	cmp	r3, #30
 800777c:	d87e      	bhi.n	800787c <UART_SetConfig+0x6c4>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <UART_SetConfig+0x5cc>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	08007807 	.word	0x08007807
 8007788:	0800787d 	.word	0x0800787d
 800778c:	0800780f 	.word	0x0800780f
 8007790:	0800787d 	.word	0x0800787d
 8007794:	0800787d 	.word	0x0800787d
 8007798:	0800787d 	.word	0x0800787d
 800779c:	0800781f 	.word	0x0800781f
 80077a0:	0800787d 	.word	0x0800787d
 80077a4:	0800787d 	.word	0x0800787d
 80077a8:	0800787d 	.word	0x0800787d
 80077ac:	0800787d 	.word	0x0800787d
 80077b0:	0800787d 	.word	0x0800787d
 80077b4:	0800787d 	.word	0x0800787d
 80077b8:	0800787d 	.word	0x0800787d
 80077bc:	0800782f 	.word	0x0800782f
 80077c0:	0800787d 	.word	0x0800787d
 80077c4:	0800787d 	.word	0x0800787d
 80077c8:	0800787d 	.word	0x0800787d
 80077cc:	0800787d 	.word	0x0800787d
 80077d0:	0800787d 	.word	0x0800787d
 80077d4:	0800787d 	.word	0x0800787d
 80077d8:	0800787d 	.word	0x0800787d
 80077dc:	0800787d 	.word	0x0800787d
 80077e0:	0800787d 	.word	0x0800787d
 80077e4:	0800787d 	.word	0x0800787d
 80077e8:	0800787d 	.word	0x0800787d
 80077ec:	0800787d 	.word	0x0800787d
 80077f0:	0800787d 	.word	0x0800787d
 80077f4:	0800787d 	.word	0x0800787d
 80077f8:	0800787d 	.word	0x0800787d
 80077fc:	0800786f 	.word	0x0800786f
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	d037      	beq.n	8007874 <UART_SetConfig+0x6bc>
 8007804:	e03a      	b.n	800787c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007806:	f7fe fbab 	bl	8005f60 <HAL_RCCEx_GetD3PCLK1Freq>
 800780a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800780c:	e03c      	b.n	8007888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800780e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fbba 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800781c:	e034      	b.n	8007888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800781e:	f107 0318 	add.w	r3, r7, #24
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fd06 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800782c:	e02c      	b.n	8007888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <UART_SetConfig+0x69c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d016      	beq.n	8007868 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <UART_SetConfig+0x69c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	08db      	lsrs	r3, r3, #3
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	4a07      	ldr	r2, [pc, #28]	; (8007864 <UART_SetConfig+0x6ac>)
 8007846:	fa22 f303 	lsr.w	r3, r2, r3
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800784c:	e01c      	b.n	8007888 <UART_SetConfig+0x6d0>
 800784e:	bf00      	nop
 8007850:	40011400 	.word	0x40011400
 8007854:	58024400 	.word	0x58024400
 8007858:	40007800 	.word	0x40007800
 800785c:	40007c00 	.word	0x40007c00
 8007860:	58000c00 	.word	0x58000c00
 8007864:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007868:	4b9d      	ldr	r3, [pc, #628]	; (8007ae0 <UART_SetConfig+0x928>)
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786c:	e00c      	b.n	8007888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800786e:	4b9d      	ldr	r3, [pc, #628]	; (8007ae4 <UART_SetConfig+0x92c>)
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007872:	e009      	b.n	8007888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800787a:	e005      	b.n	8007888 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007886:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 81de 	beq.w	8007c4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	4a94      	ldr	r2, [pc, #592]	; (8007ae8 <UART_SetConfig+0x930>)
 8007896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789a:	461a      	mov	r2, r3
 800789c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789e:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	4613      	mov	r3, r2
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	4413      	add	r3, r2
 80078ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d305      	bcc.n	80078c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078bc:	429a      	cmp	r2, r3
 80078be:	d903      	bls.n	80078c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078c6:	e1c1      	b.n	8007c4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	2200      	movs	r2, #0
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	60fa      	str	r2, [r7, #12]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	4a84      	ldr	r2, [pc, #528]	; (8007ae8 <UART_SetConfig+0x930>)
 80078d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2200      	movs	r2, #0
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078ea:	f7f8 fd51 	bl	8000390 <__aeabi_uldivmod>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4610      	mov	r0, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	020b      	lsls	r3, r1, #8
 8007900:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007904:	0202      	lsls	r2, r0, #8
 8007906:	6979      	ldr	r1, [r7, #20]
 8007908:	6849      	ldr	r1, [r1, #4]
 800790a:	0849      	lsrs	r1, r1, #1
 800790c:	2000      	movs	r0, #0
 800790e:	460c      	mov	r4, r1
 8007910:	4605      	mov	r5, r0
 8007912:	eb12 0804 	adds.w	r8, r2, r4
 8007916:	eb43 0905 	adc.w	r9, r3, r5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	469a      	mov	sl, r3
 8007922:	4693      	mov	fp, r2
 8007924:	4652      	mov	r2, sl
 8007926:	465b      	mov	r3, fp
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	f7f8 fd30 	bl	8000390 <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4613      	mov	r3, r2
 8007936:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793e:	d308      	bcc.n	8007952 <UART_SetConfig+0x79a>
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007946:	d204      	bcs.n	8007952 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800794e:	60da      	str	r2, [r3, #12]
 8007950:	e17c      	b.n	8007c4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007958:	e178      	b.n	8007c4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007962:	f040 80c5 	bne.w	8007af0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007966:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800796a:	2b20      	cmp	r3, #32
 800796c:	dc48      	bgt.n	8007a00 <UART_SetConfig+0x848>
 800796e:	2b00      	cmp	r3, #0
 8007970:	db7b      	blt.n	8007a6a <UART_SetConfig+0x8b2>
 8007972:	2b20      	cmp	r3, #32
 8007974:	d879      	bhi.n	8007a6a <UART_SetConfig+0x8b2>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <UART_SetConfig+0x7c4>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	08007a07 	.word	0x08007a07
 8007980:	08007a0f 	.word	0x08007a0f
 8007984:	08007a6b 	.word	0x08007a6b
 8007988:	08007a6b 	.word	0x08007a6b
 800798c:	08007a17 	.word	0x08007a17
 8007990:	08007a6b 	.word	0x08007a6b
 8007994:	08007a6b 	.word	0x08007a6b
 8007998:	08007a6b 	.word	0x08007a6b
 800799c:	08007a27 	.word	0x08007a27
 80079a0:	08007a6b 	.word	0x08007a6b
 80079a4:	08007a6b 	.word	0x08007a6b
 80079a8:	08007a6b 	.word	0x08007a6b
 80079ac:	08007a6b 	.word	0x08007a6b
 80079b0:	08007a6b 	.word	0x08007a6b
 80079b4:	08007a6b 	.word	0x08007a6b
 80079b8:	08007a6b 	.word	0x08007a6b
 80079bc:	08007a37 	.word	0x08007a37
 80079c0:	08007a6b 	.word	0x08007a6b
 80079c4:	08007a6b 	.word	0x08007a6b
 80079c8:	08007a6b 	.word	0x08007a6b
 80079cc:	08007a6b 	.word	0x08007a6b
 80079d0:	08007a6b 	.word	0x08007a6b
 80079d4:	08007a6b 	.word	0x08007a6b
 80079d8:	08007a6b 	.word	0x08007a6b
 80079dc:	08007a6b 	.word	0x08007a6b
 80079e0:	08007a6b 	.word	0x08007a6b
 80079e4:	08007a6b 	.word	0x08007a6b
 80079e8:	08007a6b 	.word	0x08007a6b
 80079ec:	08007a6b 	.word	0x08007a6b
 80079f0:	08007a6b 	.word	0x08007a6b
 80079f4:	08007a6b 	.word	0x08007a6b
 80079f8:	08007a6b 	.word	0x08007a6b
 80079fc:	08007a5d 	.word	0x08007a5d
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d02e      	beq.n	8007a62 <UART_SetConfig+0x8aa>
 8007a04:	e031      	b.n	8007a6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a06:	f7fc fab3 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8007a0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a0c:	e033      	b.n	8007a76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a0e:	f7fc fac5 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8007a12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a14:	e02f      	b.n	8007a76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe fab6 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a24:	e027      	b.n	8007a76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a26:	f107 0318 	add.w	r3, r7, #24
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fc02 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a34:	e01f      	b.n	8007a76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a36:	4b2d      	ldr	r3, [pc, #180]	; (8007aec <UART_SetConfig+0x934>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a42:	4b2a      	ldr	r3, [pc, #168]	; (8007aec <UART_SetConfig+0x934>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	08db      	lsrs	r3, r3, #3
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	4a24      	ldr	r2, [pc, #144]	; (8007ae0 <UART_SetConfig+0x928>)
 8007a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a54:	e00f      	b.n	8007a76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a56:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <UART_SetConfig+0x928>)
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a5a:	e00c      	b.n	8007a76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a5c:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <UART_SetConfig+0x92c>)
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a60:	e009      	b.n	8007a76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a68:	e005      	b.n	8007a76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80e7 	beq.w	8007c4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	4a19      	ldr	r2, [pc, #100]	; (8007ae8 <UART_SetConfig+0x930>)
 8007a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a90:	005a      	lsls	r2, r3, #1
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	085b      	lsrs	r3, r3, #1
 8007a98:	441a      	add	r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d916      	bls.n	8007ad8 <UART_SetConfig+0x920>
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab0:	d212      	bcs.n	8007ad8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f023 030f 	bic.w	r3, r3, #15
 8007aba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007aca:	4313      	orrs	r3, r2
 8007acc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	e0b9      	b.n	8007c4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ade:	e0b5      	b.n	8007c4c <UART_SetConfig+0xa94>
 8007ae0:	03d09000 	.word	0x03d09000
 8007ae4:	003d0900 	.word	0x003d0900
 8007ae8:	0800aef4 	.word	0x0800aef4
 8007aec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007af0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	dc49      	bgt.n	8007b8c <UART_SetConfig+0x9d4>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db7c      	blt.n	8007bf6 <UART_SetConfig+0xa3e>
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d87a      	bhi.n	8007bf6 <UART_SetConfig+0xa3e>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <UART_SetConfig+0x950>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b93 	.word	0x08007b93
 8007b0c:	08007b9b 	.word	0x08007b9b
 8007b10:	08007bf7 	.word	0x08007bf7
 8007b14:	08007bf7 	.word	0x08007bf7
 8007b18:	08007ba3 	.word	0x08007ba3
 8007b1c:	08007bf7 	.word	0x08007bf7
 8007b20:	08007bf7 	.word	0x08007bf7
 8007b24:	08007bf7 	.word	0x08007bf7
 8007b28:	08007bb3 	.word	0x08007bb3
 8007b2c:	08007bf7 	.word	0x08007bf7
 8007b30:	08007bf7 	.word	0x08007bf7
 8007b34:	08007bf7 	.word	0x08007bf7
 8007b38:	08007bf7 	.word	0x08007bf7
 8007b3c:	08007bf7 	.word	0x08007bf7
 8007b40:	08007bf7 	.word	0x08007bf7
 8007b44:	08007bf7 	.word	0x08007bf7
 8007b48:	08007bc3 	.word	0x08007bc3
 8007b4c:	08007bf7 	.word	0x08007bf7
 8007b50:	08007bf7 	.word	0x08007bf7
 8007b54:	08007bf7 	.word	0x08007bf7
 8007b58:	08007bf7 	.word	0x08007bf7
 8007b5c:	08007bf7 	.word	0x08007bf7
 8007b60:	08007bf7 	.word	0x08007bf7
 8007b64:	08007bf7 	.word	0x08007bf7
 8007b68:	08007bf7 	.word	0x08007bf7
 8007b6c:	08007bf7 	.word	0x08007bf7
 8007b70:	08007bf7 	.word	0x08007bf7
 8007b74:	08007bf7 	.word	0x08007bf7
 8007b78:	08007bf7 	.word	0x08007bf7
 8007b7c:	08007bf7 	.word	0x08007bf7
 8007b80:	08007bf7 	.word	0x08007bf7
 8007b84:	08007bf7 	.word	0x08007bf7
 8007b88:	08007be9 	.word	0x08007be9
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	d02e      	beq.n	8007bee <UART_SetConfig+0xa36>
 8007b90:	e031      	b.n	8007bf6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b92:	f7fc f9ed 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8007b96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b98:	e033      	b.n	8007c02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b9a:	f7fc f9ff 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8007b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ba0:	e02f      	b.n	8007c02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe f9f0 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bb0:	e027      	b.n	8007c02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fb3c 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bc0:	e01f      	b.n	8007c02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bc2:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <UART_SetConfig+0xac0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bce:	4b2a      	ldr	r3, [pc, #168]	; (8007c78 <UART_SetConfig+0xac0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	08db      	lsrs	r3, r3, #3
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	4a28      	ldr	r2, [pc, #160]	; (8007c7c <UART_SetConfig+0xac4>)
 8007bda:	fa22 f303 	lsr.w	r3, r2, r3
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007be0:	e00f      	b.n	8007c02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007be2:	4b26      	ldr	r3, [pc, #152]	; (8007c7c <UART_SetConfig+0xac4>)
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be6:	e00c      	b.n	8007c02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007be8:	4b25      	ldr	r3, [pc, #148]	; (8007c80 <UART_SetConfig+0xac8>)
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bec:	e009      	b.n	8007c02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf4:	e005      	b.n	8007c02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007c00:	bf00      	nop
    }

    if (pclk != 0U)
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d021      	beq.n	8007c4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	4a1d      	ldr	r2, [pc, #116]	; (8007c84 <UART_SetConfig+0xacc>)
 8007c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c16:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	441a      	add	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	2b0f      	cmp	r3, #15
 8007c30:	d909      	bls.n	8007c46 <UART_SetConfig+0xa8e>
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c38:	d205      	bcs.n	8007c46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60da      	str	r2, [r3, #12]
 8007c44:	e002      	b.n	8007c4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2200      	movs	r2, #0
 8007c66:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007c68:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3748      	adds	r7, #72	; 0x48
 8007c70:	46bd      	mov	sp, r7
 8007c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c76:	bf00      	nop
 8007c78:	58024400 	.word	0x58024400
 8007c7c:	03d09000 	.word	0x03d09000
 8007c80:	003d0900 	.word	0x003d0900
 8007c84:	0800aef4 	.word	0x0800aef4

08007c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01a      	beq.n	8007d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d86:	d10a      	bne.n	8007d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b098      	sub	sp, #96	; 0x60
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ddc:	f7f9 fa3a 	bl	8001254 <HAL_GetTick>
 8007de0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d12f      	bne.n	8007e50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f88e 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d022      	beq.n	8007e50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e28:	647b      	str	r3, [r7, #68]	; 0x44
 8007e2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e6      	bne.n	8007e0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e063      	b.n	8007f18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d149      	bne.n	8007ef2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e66:	2200      	movs	r2, #0
 8007e68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f857 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d03c      	beq.n	8007ef2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	623b      	str	r3, [r7, #32]
   return(result);
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e96:	633b      	str	r3, [r7, #48]	; 0x30
 8007e98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e6      	bne.n	8007e78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f023 0301 	bic.w	r3, r3, #1
 8007ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eca:	61fa      	str	r2, [r7, #28]
 8007ecc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	69b9      	ldr	r1, [r7, #24]
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e5      	bne.n	8007eaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e012      	b.n	8007f18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3758      	adds	r7, #88	; 0x58
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f30:	e049      	b.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d045      	beq.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3a:	f7f9 f98b 	bl	8001254 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e048      	b.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d031      	beq.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d110      	bne.n	8007f92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2208      	movs	r2, #8
 8007f76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f839 	bl	8007ff0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2208      	movs	r2, #8
 8007f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e029      	b.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa0:	d111      	bne.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f81f 	bl	8007ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e00f      	b.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	bf0c      	ite	eq
 8007fd6:	2301      	moveq	r3, #1
 8007fd8:	2300      	movne	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d0a6      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b095      	sub	sp, #84	; 0x54
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800800c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008016:	643b      	str	r3, [r7, #64]	; 0x40
 8008018:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800801c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e6      	bne.n	8007ff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	61fb      	str	r3, [r7, #28]
   return(result);
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <UART_EndRxTransfer+0xc8>)
 800803e:	4013      	ands	r3, r2
 8008040:	64bb      	str	r3, [r7, #72]	; 0x48
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800804a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e5      	bne.n	800802a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008062:	2b01      	cmp	r3, #1
 8008064:	d118      	bne.n	8008098 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	60bb      	str	r3, [r7, #8]
   return(result);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f023 0310 	bic.w	r3, r3, #16
 800807a:	647b      	str	r3, [r7, #68]	; 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	6979      	ldr	r1, [r7, #20]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	e841 2300 	strex	r3, r2, [r1]
 8008090:	613b      	str	r3, [r7, #16]
   return(result);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e6      	bne.n	8008066 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080ac:	bf00      	nop
 80080ae:	3754      	adds	r7, #84	; 0x54
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	effffffe 	.word	0xeffffffe

080080bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e027      	b.n	8008122 <HAL_UARTEx_DisableFifoMode+0x66>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2224      	movs	r2, #36	; 0x24
 80080de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0201 	bic.w	r2, r2, #1
 80080f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008142:	2302      	movs	r3, #2
 8008144:	e02d      	b.n	80081a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2224      	movs	r2, #36	; 0x24
 8008152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0201 	bic.w	r2, r2, #1
 800816c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f850 	bl	8008228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d101      	bne.n	80081c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081be:	2302      	movs	r3, #2
 80081c0:	e02d      	b.n	800821e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2224      	movs	r2, #36	; 0x24
 80081ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0201 	bic.w	r2, r2, #1
 80081e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f812 	bl	8008228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008234:	2b00      	cmp	r3, #0
 8008236:	d108      	bne.n	800824a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008248:	e031      	b.n	80082ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800824a:	2310      	movs	r3, #16
 800824c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800824e:	2310      	movs	r3, #16
 8008250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	0e5b      	lsrs	r3, r3, #25
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	0f5b      	lsrs	r3, r3, #29
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	7b3a      	ldrb	r2, [r7, #12]
 8008276:	4911      	ldr	r1, [pc, #68]	; (80082bc <UARTEx_SetNbDataToProcess+0x94>)
 8008278:	5c8a      	ldrb	r2, [r1, r2]
 800827a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800827e:	7b3a      	ldrb	r2, [r7, #12]
 8008280:	490f      	ldr	r1, [pc, #60]	; (80082c0 <UARTEx_SetNbDataToProcess+0x98>)
 8008282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008284:	fb93 f3f2 	sdiv	r3, r3, r2
 8008288:	b29a      	uxth	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	7b7a      	ldrb	r2, [r7, #13]
 8008294:	4909      	ldr	r1, [pc, #36]	; (80082bc <UARTEx_SetNbDataToProcess+0x94>)
 8008296:	5c8a      	ldrb	r2, [r1, r2]
 8008298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800829c:	7b7a      	ldrb	r2, [r7, #13]
 800829e:	4908      	ldr	r1, [pc, #32]	; (80082c0 <UARTEx_SetNbDataToProcess+0x98>)
 80082a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082ae:	bf00      	nop
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	0800af0c 	.word	0x0800af0c
 80082c0:	0800af14 	.word	0x0800af14

080082c4 <__cvt>:
 80082c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c6:	ed2d 8b02 	vpush	{d8}
 80082ca:	eeb0 8b40 	vmov.f64	d8, d0
 80082ce:	b085      	sub	sp, #20
 80082d0:	4617      	mov	r7, r2
 80082d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80082d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80082d6:	ee18 2a90 	vmov	r2, s17
 80082da:	f025 0520 	bic.w	r5, r5, #32
 80082de:	2a00      	cmp	r2, #0
 80082e0:	bfb6      	itet	lt
 80082e2:	222d      	movlt	r2, #45	; 0x2d
 80082e4:	2200      	movge	r2, #0
 80082e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80082ea:	2d46      	cmp	r5, #70	; 0x46
 80082ec:	460c      	mov	r4, r1
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	d004      	beq.n	80082fc <__cvt+0x38>
 80082f2:	2d45      	cmp	r5, #69	; 0x45
 80082f4:	d100      	bne.n	80082f8 <__cvt+0x34>
 80082f6:	3401      	adds	r4, #1
 80082f8:	2102      	movs	r1, #2
 80082fa:	e000      	b.n	80082fe <__cvt+0x3a>
 80082fc:	2103      	movs	r1, #3
 80082fe:	ab03      	add	r3, sp, #12
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	ab02      	add	r3, sp, #8
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	4622      	mov	r2, r4
 8008308:	4633      	mov	r3, r6
 800830a:	eeb0 0b48 	vmov.f64	d0, d8
 800830e:	f000 fe5b 	bl	8008fc8 <_dtoa_r>
 8008312:	2d47      	cmp	r5, #71	; 0x47
 8008314:	d101      	bne.n	800831a <__cvt+0x56>
 8008316:	07fb      	lsls	r3, r7, #31
 8008318:	d51a      	bpl.n	8008350 <__cvt+0x8c>
 800831a:	2d46      	cmp	r5, #70	; 0x46
 800831c:	eb00 0204 	add.w	r2, r0, r4
 8008320:	d10c      	bne.n	800833c <__cvt+0x78>
 8008322:	7803      	ldrb	r3, [r0, #0]
 8008324:	2b30      	cmp	r3, #48	; 0x30
 8008326:	d107      	bne.n	8008338 <__cvt+0x74>
 8008328:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800832c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008330:	bf1c      	itt	ne
 8008332:	f1c4 0401 	rsbne	r4, r4, #1
 8008336:	6034      	strne	r4, [r6, #0]
 8008338:	6833      	ldr	r3, [r6, #0]
 800833a:	441a      	add	r2, r3
 800833c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008344:	bf08      	it	eq
 8008346:	9203      	streq	r2, [sp, #12]
 8008348:	2130      	movs	r1, #48	; 0x30
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	4293      	cmp	r3, r2
 800834e:	d307      	bcc.n	8008360 <__cvt+0x9c>
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008354:	1a1b      	subs	r3, r3, r0
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	b005      	add	sp, #20
 800835a:	ecbd 8b02 	vpop	{d8}
 800835e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008360:	1c5c      	adds	r4, r3, #1
 8008362:	9403      	str	r4, [sp, #12]
 8008364:	7019      	strb	r1, [r3, #0]
 8008366:	e7f0      	b.n	800834a <__cvt+0x86>

08008368 <__exponent>:
 8008368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800836a:	4603      	mov	r3, r0
 800836c:	2900      	cmp	r1, #0
 800836e:	bfb8      	it	lt
 8008370:	4249      	neglt	r1, r1
 8008372:	f803 2b02 	strb.w	r2, [r3], #2
 8008376:	bfb4      	ite	lt
 8008378:	222d      	movlt	r2, #45	; 0x2d
 800837a:	222b      	movge	r2, #43	; 0x2b
 800837c:	2909      	cmp	r1, #9
 800837e:	7042      	strb	r2, [r0, #1]
 8008380:	dd2a      	ble.n	80083d8 <__exponent+0x70>
 8008382:	f10d 0207 	add.w	r2, sp, #7
 8008386:	4617      	mov	r7, r2
 8008388:	260a      	movs	r6, #10
 800838a:	4694      	mov	ip, r2
 800838c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008390:	fb06 1415 	mls	r4, r6, r5, r1
 8008394:	3430      	adds	r4, #48	; 0x30
 8008396:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800839a:	460c      	mov	r4, r1
 800839c:	2c63      	cmp	r4, #99	; 0x63
 800839e:	f102 32ff 	add.w	r2, r2, #4294967295
 80083a2:	4629      	mov	r1, r5
 80083a4:	dcf1      	bgt.n	800838a <__exponent+0x22>
 80083a6:	3130      	adds	r1, #48	; 0x30
 80083a8:	f1ac 0402 	sub.w	r4, ip, #2
 80083ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80083b0:	1c41      	adds	r1, r0, #1
 80083b2:	4622      	mov	r2, r4
 80083b4:	42ba      	cmp	r2, r7
 80083b6:	d30a      	bcc.n	80083ce <__exponent+0x66>
 80083b8:	f10d 0209 	add.w	r2, sp, #9
 80083bc:	eba2 020c 	sub.w	r2, r2, ip
 80083c0:	42bc      	cmp	r4, r7
 80083c2:	bf88      	it	hi
 80083c4:	2200      	movhi	r2, #0
 80083c6:	4413      	add	r3, r2
 80083c8:	1a18      	subs	r0, r3, r0
 80083ca:	b003      	add	sp, #12
 80083cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80083d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80083d6:	e7ed      	b.n	80083b4 <__exponent+0x4c>
 80083d8:	2330      	movs	r3, #48	; 0x30
 80083da:	3130      	adds	r1, #48	; 0x30
 80083dc:	7083      	strb	r3, [r0, #2]
 80083de:	70c1      	strb	r1, [r0, #3]
 80083e0:	1d03      	adds	r3, r0, #4
 80083e2:	e7f1      	b.n	80083c8 <__exponent+0x60>
 80083e4:	0000      	movs	r0, r0
	...

080083e8 <_printf_float>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	b08b      	sub	sp, #44	; 0x2c
 80083ee:	460c      	mov	r4, r1
 80083f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80083f4:	4616      	mov	r6, r2
 80083f6:	461f      	mov	r7, r3
 80083f8:	4605      	mov	r5, r0
 80083fa:	f000 fce5 	bl	8008dc8 <_localeconv_r>
 80083fe:	f8d0 b000 	ldr.w	fp, [r0]
 8008402:	4658      	mov	r0, fp
 8008404:	f7f7 ffbc 	bl	8000380 <strlen>
 8008408:	2300      	movs	r3, #0
 800840a:	9308      	str	r3, [sp, #32]
 800840c:	f8d8 3000 	ldr.w	r3, [r8]
 8008410:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008414:	6822      	ldr	r2, [r4, #0]
 8008416:	3307      	adds	r3, #7
 8008418:	f023 0307 	bic.w	r3, r3, #7
 800841c:	f103 0108 	add.w	r1, r3, #8
 8008420:	f8c8 1000 	str.w	r1, [r8]
 8008424:	ed93 0b00 	vldr	d0, [r3]
 8008428:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008688 <_printf_float+0x2a0>
 800842c:	eeb0 7bc0 	vabs.f64	d7, d0
 8008430:	eeb4 7b46 	vcmp.f64	d7, d6
 8008434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008438:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800843c:	4682      	mov	sl, r0
 800843e:	dd24      	ble.n	800848a <_printf_float+0xa2>
 8008440:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008448:	d502      	bpl.n	8008450 <_printf_float+0x68>
 800844a:	232d      	movs	r3, #45	; 0x2d
 800844c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008450:	498f      	ldr	r1, [pc, #572]	; (8008690 <_printf_float+0x2a8>)
 8008452:	4b90      	ldr	r3, [pc, #576]	; (8008694 <_printf_float+0x2ac>)
 8008454:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008458:	bf94      	ite	ls
 800845a:	4688      	movls	r8, r1
 800845c:	4698      	movhi	r8, r3
 800845e:	2303      	movs	r3, #3
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	f022 0204 	bic.w	r2, r2, #4
 8008466:	2300      	movs	r3, #0
 8008468:	6022      	str	r2, [r4, #0]
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	9700      	str	r7, [sp, #0]
 800846e:	4633      	mov	r3, r6
 8008470:	aa09      	add	r2, sp, #36	; 0x24
 8008472:	4621      	mov	r1, r4
 8008474:	4628      	mov	r0, r5
 8008476:	f000 f9d1 	bl	800881c <_printf_common>
 800847a:	3001      	adds	r0, #1
 800847c:	f040 808a 	bne.w	8008594 <_printf_float+0x1ac>
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	b00b      	add	sp, #44	; 0x2c
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	eeb4 0b40 	vcmp.f64	d0, d0
 800848e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008492:	d709      	bvc.n	80084a8 <_printf_float+0xc0>
 8008494:	ee10 3a90 	vmov	r3, s1
 8008498:	2b00      	cmp	r3, #0
 800849a:	bfbc      	itt	lt
 800849c:	232d      	movlt	r3, #45	; 0x2d
 800849e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084a2:	497d      	ldr	r1, [pc, #500]	; (8008698 <_printf_float+0x2b0>)
 80084a4:	4b7d      	ldr	r3, [pc, #500]	; (800869c <_printf_float+0x2b4>)
 80084a6:	e7d5      	b.n	8008454 <_printf_float+0x6c>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80084ae:	9104      	str	r1, [sp, #16]
 80084b0:	1c59      	adds	r1, r3, #1
 80084b2:	d13c      	bne.n	800852e <_printf_float+0x146>
 80084b4:	2306      	movs	r3, #6
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	2300      	movs	r3, #0
 80084ba:	9303      	str	r3, [sp, #12]
 80084bc:	ab08      	add	r3, sp, #32
 80084be:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80084c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084c6:	ab07      	add	r3, sp, #28
 80084c8:	6861      	ldr	r1, [r4, #4]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	6022      	str	r2, [r4, #0]
 80084ce:	f10d 031b 	add.w	r3, sp, #27
 80084d2:	4628      	mov	r0, r5
 80084d4:	f7ff fef6 	bl	80082c4 <__cvt>
 80084d8:	9b04      	ldr	r3, [sp, #16]
 80084da:	9907      	ldr	r1, [sp, #28]
 80084dc:	2b47      	cmp	r3, #71	; 0x47
 80084de:	4680      	mov	r8, r0
 80084e0:	d108      	bne.n	80084f4 <_printf_float+0x10c>
 80084e2:	1cc8      	adds	r0, r1, #3
 80084e4:	db02      	blt.n	80084ec <_printf_float+0x104>
 80084e6:	6863      	ldr	r3, [r4, #4]
 80084e8:	4299      	cmp	r1, r3
 80084ea:	dd41      	ble.n	8008570 <_printf_float+0x188>
 80084ec:	f1a9 0902 	sub.w	r9, r9, #2
 80084f0:	fa5f f989 	uxtb.w	r9, r9
 80084f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80084f8:	d820      	bhi.n	800853c <_printf_float+0x154>
 80084fa:	3901      	subs	r1, #1
 80084fc:	464a      	mov	r2, r9
 80084fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008502:	9107      	str	r1, [sp, #28]
 8008504:	f7ff ff30 	bl	8008368 <__exponent>
 8008508:	9a08      	ldr	r2, [sp, #32]
 800850a:	9004      	str	r0, [sp, #16]
 800850c:	1813      	adds	r3, r2, r0
 800850e:	2a01      	cmp	r2, #1
 8008510:	6123      	str	r3, [r4, #16]
 8008512:	dc02      	bgt.n	800851a <_printf_float+0x132>
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	07d2      	lsls	r2, r2, #31
 8008518:	d501      	bpl.n	800851e <_printf_float+0x136>
 800851a:	3301      	adds	r3, #1
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0a2      	beq.n	800846c <_printf_float+0x84>
 8008526:	232d      	movs	r3, #45	; 0x2d
 8008528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800852c:	e79e      	b.n	800846c <_printf_float+0x84>
 800852e:	9904      	ldr	r1, [sp, #16]
 8008530:	2947      	cmp	r1, #71	; 0x47
 8008532:	d1c1      	bne.n	80084b8 <_printf_float+0xd0>
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1bf      	bne.n	80084b8 <_printf_float+0xd0>
 8008538:	2301      	movs	r3, #1
 800853a:	e7bc      	b.n	80084b6 <_printf_float+0xce>
 800853c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008540:	d118      	bne.n	8008574 <_printf_float+0x18c>
 8008542:	2900      	cmp	r1, #0
 8008544:	6863      	ldr	r3, [r4, #4]
 8008546:	dd0b      	ble.n	8008560 <_printf_float+0x178>
 8008548:	6121      	str	r1, [r4, #16]
 800854a:	b913      	cbnz	r3, 8008552 <_printf_float+0x16a>
 800854c:	6822      	ldr	r2, [r4, #0]
 800854e:	07d0      	lsls	r0, r2, #31
 8008550:	d502      	bpl.n	8008558 <_printf_float+0x170>
 8008552:	3301      	adds	r3, #1
 8008554:	440b      	add	r3, r1
 8008556:	6123      	str	r3, [r4, #16]
 8008558:	2300      	movs	r3, #0
 800855a:	65a1      	str	r1, [r4, #88]	; 0x58
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	e7de      	b.n	800851e <_printf_float+0x136>
 8008560:	b913      	cbnz	r3, 8008568 <_printf_float+0x180>
 8008562:	6822      	ldr	r2, [r4, #0]
 8008564:	07d2      	lsls	r2, r2, #31
 8008566:	d501      	bpl.n	800856c <_printf_float+0x184>
 8008568:	3302      	adds	r3, #2
 800856a:	e7f4      	b.n	8008556 <_printf_float+0x16e>
 800856c:	2301      	movs	r3, #1
 800856e:	e7f2      	b.n	8008556 <_printf_float+0x16e>
 8008570:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008574:	9b08      	ldr	r3, [sp, #32]
 8008576:	4299      	cmp	r1, r3
 8008578:	db05      	blt.n	8008586 <_printf_float+0x19e>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	6121      	str	r1, [r4, #16]
 800857e:	07d8      	lsls	r0, r3, #31
 8008580:	d5ea      	bpl.n	8008558 <_printf_float+0x170>
 8008582:	1c4b      	adds	r3, r1, #1
 8008584:	e7e7      	b.n	8008556 <_printf_float+0x16e>
 8008586:	2900      	cmp	r1, #0
 8008588:	bfd4      	ite	le
 800858a:	f1c1 0202 	rsble	r2, r1, #2
 800858e:	2201      	movgt	r2, #1
 8008590:	4413      	add	r3, r2
 8008592:	e7e0      	b.n	8008556 <_printf_float+0x16e>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	055a      	lsls	r2, r3, #21
 8008598:	d407      	bmi.n	80085aa <_printf_float+0x1c2>
 800859a:	6923      	ldr	r3, [r4, #16]
 800859c:	4642      	mov	r2, r8
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	d12a      	bne.n	80085fe <_printf_float+0x216>
 80085a8:	e76a      	b.n	8008480 <_printf_float+0x98>
 80085aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80085ae:	f240 80e0 	bls.w	8008772 <_printf_float+0x38a>
 80085b2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80085b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085be:	d133      	bne.n	8008628 <_printf_float+0x240>
 80085c0:	4a37      	ldr	r2, [pc, #220]	; (80086a0 <_printf_float+0x2b8>)
 80085c2:	2301      	movs	r3, #1
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f af58 	beq.w	8008480 <_printf_float+0x98>
 80085d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	db02      	blt.n	80085de <_printf_float+0x1f6>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	07d8      	lsls	r0, r3, #31
 80085dc:	d50f      	bpl.n	80085fe <_printf_float+0x216>
 80085de:	4653      	mov	r3, sl
 80085e0:	465a      	mov	r2, fp
 80085e2:	4631      	mov	r1, r6
 80085e4:	4628      	mov	r0, r5
 80085e6:	47b8      	blx	r7
 80085e8:	3001      	adds	r0, #1
 80085ea:	f43f af49 	beq.w	8008480 <_printf_float+0x98>
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	f104 091a 	add.w	r9, r4, #26
 80085f6:	9b08      	ldr	r3, [sp, #32]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	4543      	cmp	r3, r8
 80085fc:	dc09      	bgt.n	8008612 <_printf_float+0x22a>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	079b      	lsls	r3, r3, #30
 8008602:	f100 8106 	bmi.w	8008812 <_printf_float+0x42a>
 8008606:	68e0      	ldr	r0, [r4, #12]
 8008608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860a:	4298      	cmp	r0, r3
 800860c:	bfb8      	it	lt
 800860e:	4618      	movlt	r0, r3
 8008610:	e738      	b.n	8008484 <_printf_float+0x9c>
 8008612:	2301      	movs	r3, #1
 8008614:	464a      	mov	r2, r9
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f af2f 	beq.w	8008480 <_printf_float+0x98>
 8008622:	f108 0801 	add.w	r8, r8, #1
 8008626:	e7e6      	b.n	80085f6 <_printf_float+0x20e>
 8008628:	9b07      	ldr	r3, [sp, #28]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dc3a      	bgt.n	80086a4 <_printf_float+0x2bc>
 800862e:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <_printf_float+0x2b8>)
 8008630:	2301      	movs	r3, #1
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f af21 	beq.w	8008480 <_printf_float+0x98>
 800863e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008642:	4313      	orrs	r3, r2
 8008644:	d102      	bne.n	800864c <_printf_float+0x264>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	07d9      	lsls	r1, r3, #31
 800864a:	d5d8      	bpl.n	80085fe <_printf_float+0x216>
 800864c:	4653      	mov	r3, sl
 800864e:	465a      	mov	r2, fp
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f af12 	beq.w	8008480 <_printf_float+0x98>
 800865c:	f04f 0900 	mov.w	r9, #0
 8008660:	f104 0a1a 	add.w	sl, r4, #26
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	425b      	negs	r3, r3
 8008668:	454b      	cmp	r3, r9
 800866a:	dc01      	bgt.n	8008670 <_printf_float+0x288>
 800866c:	9b08      	ldr	r3, [sp, #32]
 800866e:	e795      	b.n	800859c <_printf_float+0x1b4>
 8008670:	2301      	movs	r3, #1
 8008672:	4652      	mov	r2, sl
 8008674:	4631      	mov	r1, r6
 8008676:	4628      	mov	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	f43f af00 	beq.w	8008480 <_printf_float+0x98>
 8008680:	f109 0901 	add.w	r9, r9, #1
 8008684:	e7ee      	b.n	8008664 <_printf_float+0x27c>
 8008686:	bf00      	nop
 8008688:	ffffffff 	.word	0xffffffff
 800868c:	7fefffff 	.word	0x7fefffff
 8008690:	0800af1c 	.word	0x0800af1c
 8008694:	0800af20 	.word	0x0800af20
 8008698:	0800af24 	.word	0x0800af24
 800869c:	0800af28 	.word	0x0800af28
 80086a0:	0800af2c 	.word	0x0800af2c
 80086a4:	9a08      	ldr	r2, [sp, #32]
 80086a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a8:	429a      	cmp	r2, r3
 80086aa:	bfa8      	it	ge
 80086ac:	461a      	movge	r2, r3
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	4691      	mov	r9, r2
 80086b2:	dc38      	bgt.n	8008726 <_printf_float+0x33e>
 80086b4:	2300      	movs	r3, #0
 80086b6:	9305      	str	r3, [sp, #20]
 80086b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086bc:	f104 021a 	add.w	r2, r4, #26
 80086c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086c2:	9905      	ldr	r1, [sp, #20]
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	eba3 0309 	sub.w	r3, r3, r9
 80086ca:	428b      	cmp	r3, r1
 80086cc:	dc33      	bgt.n	8008736 <_printf_float+0x34e>
 80086ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	db3c      	blt.n	8008750 <_printf_float+0x368>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	07da      	lsls	r2, r3, #31
 80086da:	d439      	bmi.n	8008750 <_printf_float+0x368>
 80086dc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80086e0:	eba2 0903 	sub.w	r9, r2, r3
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	4591      	cmp	r9, r2
 80086ea:	bfa8      	it	ge
 80086ec:	4691      	movge	r9, r2
 80086ee:	f1b9 0f00 	cmp.w	r9, #0
 80086f2:	dc35      	bgt.n	8008760 <_printf_float+0x378>
 80086f4:	f04f 0800 	mov.w	r8, #0
 80086f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086fc:	f104 0a1a 	add.w	sl, r4, #26
 8008700:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	eba3 0309 	sub.w	r3, r3, r9
 800870a:	4543      	cmp	r3, r8
 800870c:	f77f af77 	ble.w	80085fe <_printf_float+0x216>
 8008710:	2301      	movs	r3, #1
 8008712:	4652      	mov	r2, sl
 8008714:	4631      	mov	r1, r6
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f aeb0 	beq.w	8008480 <_printf_float+0x98>
 8008720:	f108 0801 	add.w	r8, r8, #1
 8008724:	e7ec      	b.n	8008700 <_printf_float+0x318>
 8008726:	4613      	mov	r3, r2
 8008728:	4631      	mov	r1, r6
 800872a:	4642      	mov	r2, r8
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	d1bf      	bne.n	80086b4 <_printf_float+0x2cc>
 8008734:	e6a4      	b.n	8008480 <_printf_float+0x98>
 8008736:	2301      	movs	r3, #1
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	9204      	str	r2, [sp, #16]
 800873e:	47b8      	blx	r7
 8008740:	3001      	adds	r0, #1
 8008742:	f43f ae9d 	beq.w	8008480 <_printf_float+0x98>
 8008746:	9b05      	ldr	r3, [sp, #20]
 8008748:	9a04      	ldr	r2, [sp, #16]
 800874a:	3301      	adds	r3, #1
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	e7b7      	b.n	80086c0 <_printf_float+0x2d8>
 8008750:	4653      	mov	r3, sl
 8008752:	465a      	mov	r2, fp
 8008754:	4631      	mov	r1, r6
 8008756:	4628      	mov	r0, r5
 8008758:	47b8      	blx	r7
 800875a:	3001      	adds	r0, #1
 800875c:	d1be      	bne.n	80086dc <_printf_float+0x2f4>
 800875e:	e68f      	b.n	8008480 <_printf_float+0x98>
 8008760:	9a04      	ldr	r2, [sp, #16]
 8008762:	464b      	mov	r3, r9
 8008764:	4442      	add	r2, r8
 8008766:	4631      	mov	r1, r6
 8008768:	4628      	mov	r0, r5
 800876a:	47b8      	blx	r7
 800876c:	3001      	adds	r0, #1
 800876e:	d1c1      	bne.n	80086f4 <_printf_float+0x30c>
 8008770:	e686      	b.n	8008480 <_printf_float+0x98>
 8008772:	9a08      	ldr	r2, [sp, #32]
 8008774:	2a01      	cmp	r2, #1
 8008776:	dc01      	bgt.n	800877c <_printf_float+0x394>
 8008778:	07db      	lsls	r3, r3, #31
 800877a:	d537      	bpl.n	80087ec <_printf_float+0x404>
 800877c:	2301      	movs	r3, #1
 800877e:	4642      	mov	r2, r8
 8008780:	4631      	mov	r1, r6
 8008782:	4628      	mov	r0, r5
 8008784:	47b8      	blx	r7
 8008786:	3001      	adds	r0, #1
 8008788:	f43f ae7a 	beq.w	8008480 <_printf_float+0x98>
 800878c:	4653      	mov	r3, sl
 800878e:	465a      	mov	r2, fp
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	f43f ae72 	beq.w	8008480 <_printf_float+0x98>
 800879c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80087a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a8:	9b08      	ldr	r3, [sp, #32]
 80087aa:	d01a      	beq.n	80087e2 <_printf_float+0x3fa>
 80087ac:	3b01      	subs	r3, #1
 80087ae:	f108 0201 	add.w	r2, r8, #1
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	d10e      	bne.n	80087da <_printf_float+0x3f2>
 80087bc:	e660      	b.n	8008480 <_printf_float+0x98>
 80087be:	2301      	movs	r3, #1
 80087c0:	464a      	mov	r2, r9
 80087c2:	4631      	mov	r1, r6
 80087c4:	4628      	mov	r0, r5
 80087c6:	47b8      	blx	r7
 80087c8:	3001      	adds	r0, #1
 80087ca:	f43f ae59 	beq.w	8008480 <_printf_float+0x98>
 80087ce:	f108 0801 	add.w	r8, r8, #1
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	4543      	cmp	r3, r8
 80087d8:	dcf1      	bgt.n	80087be <_printf_float+0x3d6>
 80087da:	9b04      	ldr	r3, [sp, #16]
 80087dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087e0:	e6dd      	b.n	800859e <_printf_float+0x1b6>
 80087e2:	f04f 0800 	mov.w	r8, #0
 80087e6:	f104 091a 	add.w	r9, r4, #26
 80087ea:	e7f2      	b.n	80087d2 <_printf_float+0x3ea>
 80087ec:	2301      	movs	r3, #1
 80087ee:	4642      	mov	r2, r8
 80087f0:	e7df      	b.n	80087b2 <_printf_float+0x3ca>
 80087f2:	2301      	movs	r3, #1
 80087f4:	464a      	mov	r2, r9
 80087f6:	4631      	mov	r1, r6
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f ae3f 	beq.w	8008480 <_printf_float+0x98>
 8008802:	f108 0801 	add.w	r8, r8, #1
 8008806:	68e3      	ldr	r3, [r4, #12]
 8008808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800880a:	1a5b      	subs	r3, r3, r1
 800880c:	4543      	cmp	r3, r8
 800880e:	dcf0      	bgt.n	80087f2 <_printf_float+0x40a>
 8008810:	e6f9      	b.n	8008606 <_printf_float+0x21e>
 8008812:	f04f 0800 	mov.w	r8, #0
 8008816:	f104 0919 	add.w	r9, r4, #25
 800881a:	e7f4      	b.n	8008806 <_printf_float+0x41e>

0800881c <_printf_common>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	4616      	mov	r6, r2
 8008822:	4699      	mov	r9, r3
 8008824:	688a      	ldr	r2, [r1, #8]
 8008826:	690b      	ldr	r3, [r1, #16]
 8008828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800882c:	4293      	cmp	r3, r2
 800882e:	bfb8      	it	lt
 8008830:	4613      	movlt	r3, r2
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008838:	4607      	mov	r7, r0
 800883a:	460c      	mov	r4, r1
 800883c:	b10a      	cbz	r2, 8008842 <_printf_common+0x26>
 800883e:	3301      	adds	r3, #1
 8008840:	6033      	str	r3, [r6, #0]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	0699      	lsls	r1, r3, #26
 8008846:	bf42      	ittt	mi
 8008848:	6833      	ldrmi	r3, [r6, #0]
 800884a:	3302      	addmi	r3, #2
 800884c:	6033      	strmi	r3, [r6, #0]
 800884e:	6825      	ldr	r5, [r4, #0]
 8008850:	f015 0506 	ands.w	r5, r5, #6
 8008854:	d106      	bne.n	8008864 <_printf_common+0x48>
 8008856:	f104 0a19 	add.w	sl, r4, #25
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	6832      	ldr	r2, [r6, #0]
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	42ab      	cmp	r3, r5
 8008862:	dc26      	bgt.n	80088b2 <_printf_common+0x96>
 8008864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008868:	1e13      	subs	r3, r2, #0
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	bf18      	it	ne
 800886e:	2301      	movne	r3, #1
 8008870:	0692      	lsls	r2, r2, #26
 8008872:	d42b      	bmi.n	80088cc <_printf_common+0xb0>
 8008874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008878:	4649      	mov	r1, r9
 800887a:	4638      	mov	r0, r7
 800887c:	47c0      	blx	r8
 800887e:	3001      	adds	r0, #1
 8008880:	d01e      	beq.n	80088c0 <_printf_common+0xa4>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	6922      	ldr	r2, [r4, #16]
 8008886:	f003 0306 	and.w	r3, r3, #6
 800888a:	2b04      	cmp	r3, #4
 800888c:	bf02      	ittt	eq
 800888e:	68e5      	ldreq	r5, [r4, #12]
 8008890:	6833      	ldreq	r3, [r6, #0]
 8008892:	1aed      	subeq	r5, r5, r3
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	bf0c      	ite	eq
 8008898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800889c:	2500      	movne	r5, #0
 800889e:	4293      	cmp	r3, r2
 80088a0:	bfc4      	itt	gt
 80088a2:	1a9b      	subgt	r3, r3, r2
 80088a4:	18ed      	addgt	r5, r5, r3
 80088a6:	2600      	movs	r6, #0
 80088a8:	341a      	adds	r4, #26
 80088aa:	42b5      	cmp	r5, r6
 80088ac:	d11a      	bne.n	80088e4 <_printf_common+0xc8>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e008      	b.n	80088c4 <_printf_common+0xa8>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4652      	mov	r2, sl
 80088b6:	4649      	mov	r1, r9
 80088b8:	4638      	mov	r0, r7
 80088ba:	47c0      	blx	r8
 80088bc:	3001      	adds	r0, #1
 80088be:	d103      	bne.n	80088c8 <_printf_common+0xac>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	3501      	adds	r5, #1
 80088ca:	e7c6      	b.n	800885a <_printf_common+0x3e>
 80088cc:	18e1      	adds	r1, r4, r3
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	2030      	movs	r0, #48	; 0x30
 80088d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d6:	4422      	add	r2, r4
 80088d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e0:	3302      	adds	r3, #2
 80088e2:	e7c7      	b.n	8008874 <_printf_common+0x58>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4622      	mov	r2, r4
 80088e8:	4649      	mov	r1, r9
 80088ea:	4638      	mov	r0, r7
 80088ec:	47c0      	blx	r8
 80088ee:	3001      	adds	r0, #1
 80088f0:	d0e6      	beq.n	80088c0 <_printf_common+0xa4>
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7d9      	b.n	80088aa <_printf_common+0x8e>
	...

080088f8 <_printf_i>:
 80088f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	7e0f      	ldrb	r7, [r1, #24]
 80088fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008900:	2f78      	cmp	r7, #120	; 0x78
 8008902:	4691      	mov	r9, r2
 8008904:	4680      	mov	r8, r0
 8008906:	460c      	mov	r4, r1
 8008908:	469a      	mov	sl, r3
 800890a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800890e:	d807      	bhi.n	8008920 <_printf_i+0x28>
 8008910:	2f62      	cmp	r7, #98	; 0x62
 8008912:	d80a      	bhi.n	800892a <_printf_i+0x32>
 8008914:	2f00      	cmp	r7, #0
 8008916:	f000 80d4 	beq.w	8008ac2 <_printf_i+0x1ca>
 800891a:	2f58      	cmp	r7, #88	; 0x58
 800891c:	f000 80c0 	beq.w	8008aa0 <_printf_i+0x1a8>
 8008920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008928:	e03a      	b.n	80089a0 <_printf_i+0xa8>
 800892a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800892e:	2b15      	cmp	r3, #21
 8008930:	d8f6      	bhi.n	8008920 <_printf_i+0x28>
 8008932:	a101      	add	r1, pc, #4	; (adr r1, 8008938 <_printf_i+0x40>)
 8008934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008938:	08008991 	.word	0x08008991
 800893c:	080089a5 	.word	0x080089a5
 8008940:	08008921 	.word	0x08008921
 8008944:	08008921 	.word	0x08008921
 8008948:	08008921 	.word	0x08008921
 800894c:	08008921 	.word	0x08008921
 8008950:	080089a5 	.word	0x080089a5
 8008954:	08008921 	.word	0x08008921
 8008958:	08008921 	.word	0x08008921
 800895c:	08008921 	.word	0x08008921
 8008960:	08008921 	.word	0x08008921
 8008964:	08008aa9 	.word	0x08008aa9
 8008968:	080089d1 	.word	0x080089d1
 800896c:	08008a63 	.word	0x08008a63
 8008970:	08008921 	.word	0x08008921
 8008974:	08008921 	.word	0x08008921
 8008978:	08008acb 	.word	0x08008acb
 800897c:	08008921 	.word	0x08008921
 8008980:	080089d1 	.word	0x080089d1
 8008984:	08008921 	.word	0x08008921
 8008988:	08008921 	.word	0x08008921
 800898c:	08008a6b 	.word	0x08008a6b
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	1d1a      	adds	r2, r3, #4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800899c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a0:	2301      	movs	r3, #1
 80089a2:	e09f      	b.n	8008ae4 <_printf_i+0x1ec>
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	0607      	lsls	r7, r0, #24
 80089aa:	f103 0104 	add.w	r1, r3, #4
 80089ae:	6029      	str	r1, [r5, #0]
 80089b0:	d501      	bpl.n	80089b6 <_printf_i+0xbe>
 80089b2:	681e      	ldr	r6, [r3, #0]
 80089b4:	e003      	b.n	80089be <_printf_i+0xc6>
 80089b6:	0646      	lsls	r6, r0, #25
 80089b8:	d5fb      	bpl.n	80089b2 <_printf_i+0xba>
 80089ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089be:	2e00      	cmp	r6, #0
 80089c0:	da03      	bge.n	80089ca <_printf_i+0xd2>
 80089c2:	232d      	movs	r3, #45	; 0x2d
 80089c4:	4276      	negs	r6, r6
 80089c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ca:	485a      	ldr	r0, [pc, #360]	; (8008b34 <_printf_i+0x23c>)
 80089cc:	230a      	movs	r3, #10
 80089ce:	e012      	b.n	80089f6 <_printf_i+0xfe>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	6820      	ldr	r0, [r4, #0]
 80089d4:	1d19      	adds	r1, r3, #4
 80089d6:	6029      	str	r1, [r5, #0]
 80089d8:	0605      	lsls	r5, r0, #24
 80089da:	d501      	bpl.n	80089e0 <_printf_i+0xe8>
 80089dc:	681e      	ldr	r6, [r3, #0]
 80089de:	e002      	b.n	80089e6 <_printf_i+0xee>
 80089e0:	0641      	lsls	r1, r0, #25
 80089e2:	d5fb      	bpl.n	80089dc <_printf_i+0xe4>
 80089e4:	881e      	ldrh	r6, [r3, #0]
 80089e6:	4853      	ldr	r0, [pc, #332]	; (8008b34 <_printf_i+0x23c>)
 80089e8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ea:	bf0c      	ite	eq
 80089ec:	2308      	moveq	r3, #8
 80089ee:	230a      	movne	r3, #10
 80089f0:	2100      	movs	r1, #0
 80089f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089f6:	6865      	ldr	r5, [r4, #4]
 80089f8:	60a5      	str	r5, [r4, #8]
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	bfa2      	ittt	ge
 80089fe:	6821      	ldrge	r1, [r4, #0]
 8008a00:	f021 0104 	bicge.w	r1, r1, #4
 8008a04:	6021      	strge	r1, [r4, #0]
 8008a06:	b90e      	cbnz	r6, 8008a0c <_printf_i+0x114>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	d04b      	beq.n	8008aa4 <_printf_i+0x1ac>
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a12:	fb03 6711 	mls	r7, r3, r1, r6
 8008a16:	5dc7      	ldrb	r7, [r0, r7]
 8008a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a1c:	4637      	mov	r7, r6
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	460e      	mov	r6, r1
 8008a22:	d9f4      	bls.n	8008a0e <_printf_i+0x116>
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d10b      	bne.n	8008a40 <_printf_i+0x148>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	07de      	lsls	r6, r3, #31
 8008a2c:	d508      	bpl.n	8008a40 <_printf_i+0x148>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	4299      	cmp	r1, r3
 8008a34:	bfde      	ittt	le
 8008a36:	2330      	movle	r3, #48	; 0x30
 8008a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a40:	1b52      	subs	r2, r2, r5
 8008a42:	6122      	str	r2, [r4, #16]
 8008a44:	f8cd a000 	str.w	sl, [sp]
 8008a48:	464b      	mov	r3, r9
 8008a4a:	aa03      	add	r2, sp, #12
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7ff fee4 	bl	800881c <_printf_common>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d14a      	bne.n	8008aee <_printf_i+0x1f6>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	b004      	add	sp, #16
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	f043 0320 	orr.w	r3, r3, #32
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	4833      	ldr	r0, [pc, #204]	; (8008b38 <_printf_i+0x240>)
 8008a6c:	2778      	movs	r7, #120	; 0x78
 8008a6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6829      	ldr	r1, [r5, #0]
 8008a76:	061f      	lsls	r7, r3, #24
 8008a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a7c:	d402      	bmi.n	8008a84 <_printf_i+0x18c>
 8008a7e:	065f      	lsls	r7, r3, #25
 8008a80:	bf48      	it	mi
 8008a82:	b2b6      	uxthmi	r6, r6
 8008a84:	07df      	lsls	r7, r3, #31
 8008a86:	bf48      	it	mi
 8008a88:	f043 0320 	orrmi.w	r3, r3, #32
 8008a8c:	6029      	str	r1, [r5, #0]
 8008a8e:	bf48      	it	mi
 8008a90:	6023      	strmi	r3, [r4, #0]
 8008a92:	b91e      	cbnz	r6, 8008a9c <_printf_i+0x1a4>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	f023 0320 	bic.w	r3, r3, #32
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	2310      	movs	r3, #16
 8008a9e:	e7a7      	b.n	80089f0 <_printf_i+0xf8>
 8008aa0:	4824      	ldr	r0, [pc, #144]	; (8008b34 <_printf_i+0x23c>)
 8008aa2:	e7e4      	b.n	8008a6e <_printf_i+0x176>
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	e7bd      	b.n	8008a24 <_printf_i+0x12c>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	6826      	ldr	r6, [r4, #0]
 8008aac:	6961      	ldr	r1, [r4, #20]
 8008aae:	1d18      	adds	r0, r3, #4
 8008ab0:	6028      	str	r0, [r5, #0]
 8008ab2:	0635      	lsls	r5, r6, #24
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	d501      	bpl.n	8008abc <_printf_i+0x1c4>
 8008ab8:	6019      	str	r1, [r3, #0]
 8008aba:	e002      	b.n	8008ac2 <_printf_i+0x1ca>
 8008abc:	0670      	lsls	r0, r6, #25
 8008abe:	d5fb      	bpl.n	8008ab8 <_printf_i+0x1c0>
 8008ac0:	8019      	strh	r1, [r3, #0]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	4615      	mov	r5, r2
 8008ac8:	e7bc      	b.n	8008a44 <_printf_i+0x14c>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	602a      	str	r2, [r5, #0]
 8008ad0:	681d      	ldr	r5, [r3, #0]
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7f7 fc02 	bl	80002e0 <memchr>
 8008adc:	b108      	cbz	r0, 8008ae2 <_printf_i+0x1ea>
 8008ade:	1b40      	subs	r0, r0, r5
 8008ae0:	6060      	str	r0, [r4, #4]
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aec:	e7aa      	b.n	8008a44 <_printf_i+0x14c>
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	462a      	mov	r2, r5
 8008af2:	4649      	mov	r1, r9
 8008af4:	4640      	mov	r0, r8
 8008af6:	47d0      	blx	sl
 8008af8:	3001      	adds	r0, #1
 8008afa:	d0ad      	beq.n	8008a58 <_printf_i+0x160>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	079b      	lsls	r3, r3, #30
 8008b00:	d413      	bmi.n	8008b2a <_printf_i+0x232>
 8008b02:	68e0      	ldr	r0, [r4, #12]
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	4298      	cmp	r0, r3
 8008b08:	bfb8      	it	lt
 8008b0a:	4618      	movlt	r0, r3
 8008b0c:	e7a6      	b.n	8008a5c <_printf_i+0x164>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4632      	mov	r2, r6
 8008b12:	4649      	mov	r1, r9
 8008b14:	4640      	mov	r0, r8
 8008b16:	47d0      	blx	sl
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d09d      	beq.n	8008a58 <_printf_i+0x160>
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	9903      	ldr	r1, [sp, #12]
 8008b22:	1a5b      	subs	r3, r3, r1
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dcf2      	bgt.n	8008b0e <_printf_i+0x216>
 8008b28:	e7eb      	b.n	8008b02 <_printf_i+0x20a>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	f104 0619 	add.w	r6, r4, #25
 8008b30:	e7f5      	b.n	8008b1e <_printf_i+0x226>
 8008b32:	bf00      	nop
 8008b34:	0800af2e 	.word	0x0800af2e
 8008b38:	0800af3f 	.word	0x0800af3f

08008b3c <std>:
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	4604      	mov	r4, r0
 8008b42:	e9c0 3300 	strd	r3, r3, [r0]
 8008b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b4a:	6083      	str	r3, [r0, #8]
 8008b4c:	8181      	strh	r1, [r0, #12]
 8008b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b50:	81c2      	strh	r2, [r0, #14]
 8008b52:	6183      	str	r3, [r0, #24]
 8008b54:	4619      	mov	r1, r3
 8008b56:	2208      	movs	r2, #8
 8008b58:	305c      	adds	r0, #92	; 0x5c
 8008b5a:	f000 f92d 	bl	8008db8 <memset>
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <std+0x58>)
 8008b60:	6263      	str	r3, [r4, #36]	; 0x24
 8008b62:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <std+0x5c>)
 8008b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <std+0x60>)
 8008b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ba0 <std+0x64>)
 8008b6c:	6323      	str	r3, [r4, #48]	; 0x30
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <std+0x68>)
 8008b70:	6224      	str	r4, [r4, #32]
 8008b72:	429c      	cmp	r4, r3
 8008b74:	d006      	beq.n	8008b84 <std+0x48>
 8008b76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b7a:	4294      	cmp	r4, r2
 8008b7c:	d002      	beq.n	8008b84 <std+0x48>
 8008b7e:	33d0      	adds	r3, #208	; 0xd0
 8008b80:	429c      	cmp	r4, r3
 8008b82:	d105      	bne.n	8008b90 <std+0x54>
 8008b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b8c:	f000 b990 	b.w	8008eb0 <__retarget_lock_init_recursive>
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	bf00      	nop
 8008b94:	08008cc1 	.word	0x08008cc1
 8008b98:	08008ce3 	.word	0x08008ce3
 8008b9c:	08008d1b 	.word	0x08008d1b
 8008ba0:	08008d3f 	.word	0x08008d3f
 8008ba4:	24000340 	.word	0x24000340

08008ba8 <stdio_exit_handler>:
 8008ba8:	4a02      	ldr	r2, [pc, #8]	; (8008bb4 <stdio_exit_handler+0xc>)
 8008baa:	4903      	ldr	r1, [pc, #12]	; (8008bb8 <stdio_exit_handler+0x10>)
 8008bac:	4803      	ldr	r0, [pc, #12]	; (8008bbc <stdio_exit_handler+0x14>)
 8008bae:	f000 b869 	b.w	8008c84 <_fwalk_sglue>
 8008bb2:	bf00      	nop
 8008bb4:	24000010 	.word	0x24000010
 8008bb8:	0800a755 	.word	0x0800a755
 8008bbc:	2400001c 	.word	0x2400001c

08008bc0 <cleanup_stdio>:
 8008bc0:	6841      	ldr	r1, [r0, #4]
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <cleanup_stdio+0x34>)
 8008bc4:	4299      	cmp	r1, r3
 8008bc6:	b510      	push	{r4, lr}
 8008bc8:	4604      	mov	r4, r0
 8008bca:	d001      	beq.n	8008bd0 <cleanup_stdio+0x10>
 8008bcc:	f001 fdc2 	bl	800a754 <_fflush_r>
 8008bd0:	68a1      	ldr	r1, [r4, #8]
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <cleanup_stdio+0x38>)
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	d002      	beq.n	8008bde <cleanup_stdio+0x1e>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f001 fdbb 	bl	800a754 <_fflush_r>
 8008bde:	68e1      	ldr	r1, [r4, #12]
 8008be0:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <cleanup_stdio+0x3c>)
 8008be2:	4299      	cmp	r1, r3
 8008be4:	d004      	beq.n	8008bf0 <cleanup_stdio+0x30>
 8008be6:	4620      	mov	r0, r4
 8008be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bec:	f001 bdb2 	b.w	800a754 <_fflush_r>
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	bf00      	nop
 8008bf4:	24000340 	.word	0x24000340
 8008bf8:	240003a8 	.word	0x240003a8
 8008bfc:	24000410 	.word	0x24000410

08008c00 <global_stdio_init.part.0>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <global_stdio_init.part.0+0x30>)
 8008c04:	4c0b      	ldr	r4, [pc, #44]	; (8008c34 <global_stdio_init.part.0+0x34>)
 8008c06:	4a0c      	ldr	r2, [pc, #48]	; (8008c38 <global_stdio_init.part.0+0x38>)
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2104      	movs	r1, #4
 8008c10:	f7ff ff94 	bl	8008b3c <std>
 8008c14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c18:	2201      	movs	r2, #1
 8008c1a:	2109      	movs	r1, #9
 8008c1c:	f7ff ff8e 	bl	8008b3c <std>
 8008c20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008c24:	2202      	movs	r2, #2
 8008c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c2a:	2112      	movs	r1, #18
 8008c2c:	f7ff bf86 	b.w	8008b3c <std>
 8008c30:	24000478 	.word	0x24000478
 8008c34:	24000340 	.word	0x24000340
 8008c38:	08008ba9 	.word	0x08008ba9

08008c3c <__sfp_lock_acquire>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__sfp_lock_acquire+0x8>)
 8008c3e:	f000 b938 	b.w	8008eb2 <__retarget_lock_acquire_recursive>
 8008c42:	bf00      	nop
 8008c44:	24000481 	.word	0x24000481

08008c48 <__sfp_lock_release>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__sfp_lock_release+0x8>)
 8008c4a:	f000 b933 	b.w	8008eb4 <__retarget_lock_release_recursive>
 8008c4e:	bf00      	nop
 8008c50:	24000481 	.word	0x24000481

08008c54 <__sinit>:
 8008c54:	b510      	push	{r4, lr}
 8008c56:	4604      	mov	r4, r0
 8008c58:	f7ff fff0 	bl	8008c3c <__sfp_lock_acquire>
 8008c5c:	6a23      	ldr	r3, [r4, #32]
 8008c5e:	b11b      	cbz	r3, 8008c68 <__sinit+0x14>
 8008c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c64:	f7ff bff0 	b.w	8008c48 <__sfp_lock_release>
 8008c68:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <__sinit+0x28>)
 8008c6a:	6223      	str	r3, [r4, #32]
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <__sinit+0x2c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1f5      	bne.n	8008c60 <__sinit+0xc>
 8008c74:	f7ff ffc4 	bl	8008c00 <global_stdio_init.part.0>
 8008c78:	e7f2      	b.n	8008c60 <__sinit+0xc>
 8008c7a:	bf00      	nop
 8008c7c:	08008bc1 	.word	0x08008bc1
 8008c80:	24000478 	.word	0x24000478

08008c84 <_fwalk_sglue>:
 8008c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c88:	4607      	mov	r7, r0
 8008c8a:	4688      	mov	r8, r1
 8008c8c:	4614      	mov	r4, r2
 8008c8e:	2600      	movs	r6, #0
 8008c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c94:	f1b9 0901 	subs.w	r9, r9, #1
 8008c98:	d505      	bpl.n	8008ca6 <_fwalk_sglue+0x22>
 8008c9a:	6824      	ldr	r4, [r4, #0]
 8008c9c:	2c00      	cmp	r4, #0
 8008c9e:	d1f7      	bne.n	8008c90 <_fwalk_sglue+0xc>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	89ab      	ldrh	r3, [r5, #12]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d907      	bls.n	8008cbc <_fwalk_sglue+0x38>
 8008cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	d003      	beq.n	8008cbc <_fwalk_sglue+0x38>
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	47c0      	blx	r8
 8008cba:	4306      	orrs	r6, r0
 8008cbc:	3568      	adds	r5, #104	; 0x68
 8008cbe:	e7e9      	b.n	8008c94 <_fwalk_sglue+0x10>

08008cc0 <__sread>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	f000 f8a4 	bl	8008e14 <_read_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	bfab      	itete	ge
 8008cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008cd4:	181b      	addge	r3, r3, r0
 8008cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cda:	bfac      	ite	ge
 8008cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cde:	81a3      	strhlt	r3, [r4, #12]
 8008ce0:	bd10      	pop	{r4, pc}

08008ce2 <__swrite>:
 8008ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	461f      	mov	r7, r3
 8008ce8:	898b      	ldrh	r3, [r1, #12]
 8008cea:	05db      	lsls	r3, r3, #23
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	4616      	mov	r6, r2
 8008cf2:	d505      	bpl.n	8008d00 <__swrite+0x1e>
 8008cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f000 f878 	bl	8008df0 <_lseek_r>
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d0a:	81a3      	strh	r3, [r4, #12]
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	463b      	mov	r3, r7
 8008d10:	4628      	mov	r0, r5
 8008d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	f000 b88f 	b.w	8008e38 <_write_r>

08008d1a <__sseek>:
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d22:	f000 f865 	bl	8008df0 <_lseek_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	bf15      	itete	ne
 8008d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d36:	81a3      	strheq	r3, [r4, #12]
 8008d38:	bf18      	it	ne
 8008d3a:	81a3      	strhne	r3, [r4, #12]
 8008d3c:	bd10      	pop	{r4, pc}

08008d3e <__sclose>:
 8008d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d42:	f000 b845 	b.w	8008dd0 <_close_r>

08008d46 <_vsniprintf_r>:
 8008d46:	b530      	push	{r4, r5, lr}
 8008d48:	4614      	mov	r4, r2
 8008d4a:	2c00      	cmp	r4, #0
 8008d4c:	b09b      	sub	sp, #108	; 0x6c
 8008d4e:	4605      	mov	r5, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	da05      	bge.n	8008d60 <_vsniprintf_r+0x1a>
 8008d54:	238b      	movs	r3, #139	; 0x8b
 8008d56:	6003      	str	r3, [r0, #0]
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	b01b      	add	sp, #108	; 0x6c
 8008d5e:	bd30      	pop	{r4, r5, pc}
 8008d60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d64:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d68:	bf14      	ite	ne
 8008d6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d6e:	4623      	moveq	r3, r4
 8008d70:	9302      	str	r3, [sp, #8]
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d78:	9100      	str	r1, [sp, #0]
 8008d7a:	9104      	str	r1, [sp, #16]
 8008d7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d80:	4669      	mov	r1, sp
 8008d82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d84:	f001 fb62 	bl	800a44c <_svfiprintf_r>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	bfbc      	itt	lt
 8008d8c:	238b      	movlt	r3, #139	; 0x8b
 8008d8e:	602b      	strlt	r3, [r5, #0]
 8008d90:	2c00      	cmp	r4, #0
 8008d92:	d0e3      	beq.n	8008d5c <_vsniprintf_r+0x16>
 8008d94:	9b00      	ldr	r3, [sp, #0]
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	e7df      	b.n	8008d5c <_vsniprintf_r+0x16>

08008d9c <vsniprintf>:
 8008d9c:	b507      	push	{r0, r1, r2, lr}
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	460a      	mov	r2, r1
 8008da4:	4601      	mov	r1, r0
 8008da6:	4803      	ldr	r0, [pc, #12]	; (8008db4 <vsniprintf+0x18>)
 8008da8:	6800      	ldr	r0, [r0, #0]
 8008daa:	f7ff ffcc 	bl	8008d46 <_vsniprintf_r>
 8008dae:	b003      	add	sp, #12
 8008db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008db4:	24000068 	.word	0x24000068

08008db8 <memset>:
 8008db8:	4402      	add	r2, r0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d100      	bne.n	8008dc2 <memset+0xa>
 8008dc0:	4770      	bx	lr
 8008dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc6:	e7f9      	b.n	8008dbc <memset+0x4>

08008dc8 <_localeconv_r>:
 8008dc8:	4800      	ldr	r0, [pc, #0]	; (8008dcc <_localeconv_r+0x4>)
 8008dca:	4770      	bx	lr
 8008dcc:	2400015c 	.word	0x2400015c

08008dd0 <_close_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d06      	ldr	r5, [pc, #24]	; (8008dec <_close_r+0x1c>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	f7f8 f8cd 	bl	8000f7a <_close>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_close_r+0x1a>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_close_r+0x1a>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	2400047c 	.word	0x2400047c

08008df0 <_lseek_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d07      	ldr	r5, [pc, #28]	; (8008e10 <_lseek_r+0x20>)
 8008df4:	4604      	mov	r4, r0
 8008df6:	4608      	mov	r0, r1
 8008df8:	4611      	mov	r1, r2
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	602a      	str	r2, [r5, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f7f8 f8e2 	bl	8000fc8 <_lseek>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d102      	bne.n	8008e0e <_lseek_r+0x1e>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	b103      	cbz	r3, 8008e0e <_lseek_r+0x1e>
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	2400047c 	.word	0x2400047c

08008e14 <_read_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4d07      	ldr	r5, [pc, #28]	; (8008e34 <_read_r+0x20>)
 8008e18:	4604      	mov	r4, r0
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	2200      	movs	r2, #0
 8008e20:	602a      	str	r2, [r5, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f7f8 f870 	bl	8000f08 <_read>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_read_r+0x1e>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_read_r+0x1e>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	2400047c 	.word	0x2400047c

08008e38 <_write_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d07      	ldr	r5, [pc, #28]	; (8008e58 <_write_r+0x20>)
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	4608      	mov	r0, r1
 8008e40:	4611      	mov	r1, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	602a      	str	r2, [r5, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f7f8 f87b 	bl	8000f42 <_write>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_write_r+0x1e>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_write_r+0x1e>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	2400047c 	.word	0x2400047c

08008e5c <__errno>:
 8008e5c:	4b01      	ldr	r3, [pc, #4]	; (8008e64 <__errno+0x8>)
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	24000068 	.word	0x24000068

08008e68 <__libc_init_array>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	4d0d      	ldr	r5, [pc, #52]	; (8008ea0 <__libc_init_array+0x38>)
 8008e6c:	4c0d      	ldr	r4, [pc, #52]	; (8008ea4 <__libc_init_array+0x3c>)
 8008e6e:	1b64      	subs	r4, r4, r5
 8008e70:	10a4      	asrs	r4, r4, #2
 8008e72:	2600      	movs	r6, #0
 8008e74:	42a6      	cmp	r6, r4
 8008e76:	d109      	bne.n	8008e8c <__libc_init_array+0x24>
 8008e78:	4d0b      	ldr	r5, [pc, #44]	; (8008ea8 <__libc_init_array+0x40>)
 8008e7a:	4c0c      	ldr	r4, [pc, #48]	; (8008eac <__libc_init_array+0x44>)
 8008e7c:	f002 f80e 	bl	800ae9c <_init>
 8008e80:	1b64      	subs	r4, r4, r5
 8008e82:	10a4      	asrs	r4, r4, #2
 8008e84:	2600      	movs	r6, #0
 8008e86:	42a6      	cmp	r6, r4
 8008e88:	d105      	bne.n	8008e96 <__libc_init_array+0x2e>
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e90:	4798      	blx	r3
 8008e92:	3601      	adds	r6, #1
 8008e94:	e7ee      	b.n	8008e74 <__libc_init_array+0xc>
 8008e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e9a:	4798      	blx	r3
 8008e9c:	3601      	adds	r6, #1
 8008e9e:	e7f2      	b.n	8008e86 <__libc_init_array+0x1e>
 8008ea0:	0800b294 	.word	0x0800b294
 8008ea4:	0800b294 	.word	0x0800b294
 8008ea8:	0800b294 	.word	0x0800b294
 8008eac:	0800b298 	.word	0x0800b298

08008eb0 <__retarget_lock_init_recursive>:
 8008eb0:	4770      	bx	lr

08008eb2 <__retarget_lock_acquire_recursive>:
 8008eb2:	4770      	bx	lr

08008eb4 <__retarget_lock_release_recursive>:
 8008eb4:	4770      	bx	lr

08008eb6 <quorem>:
 8008eb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	6903      	ldr	r3, [r0, #16]
 8008ebc:	690c      	ldr	r4, [r1, #16]
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	db7e      	blt.n	8008fc2 <quorem+0x10c>
 8008ec4:	3c01      	subs	r4, #1
 8008ec6:	f101 0814 	add.w	r8, r1, #20
 8008eca:	f100 0514 	add.w	r5, r0, #20
 8008ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008edc:	3301      	adds	r3, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ee4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008eec:	d331      	bcc.n	8008f52 <quorem+0x9c>
 8008eee:	f04f 0e00 	mov.w	lr, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	46ac      	mov	ip, r5
 8008ef6:	46f2      	mov	sl, lr
 8008ef8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008efc:	b293      	uxth	r3, r2
 8008efe:	fb06 e303 	mla	r3, r6, r3, lr
 8008f02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f06:	0c1a      	lsrs	r2, r3, #16
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	ebaa 0303 	sub.w	r3, sl, r3
 8008f0e:	f8dc a000 	ldr.w	sl, [ip]
 8008f12:	fa13 f38a 	uxtah	r3, r3, sl
 8008f16:	fb06 220e 	mla	r2, r6, lr, r2
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	9b00      	ldr	r3, [sp, #0]
 8008f1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f22:	b292      	uxth	r2, r2
 8008f24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f30:	4581      	cmp	r9, r0
 8008f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f36:	f84c 3b04 	str.w	r3, [ip], #4
 8008f3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f3e:	d2db      	bcs.n	8008ef8 <quorem+0x42>
 8008f40:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f44:	b92b      	cbnz	r3, 8008f52 <quorem+0x9c>
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	3b04      	subs	r3, #4
 8008f4a:	429d      	cmp	r5, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	d32c      	bcc.n	8008faa <quorem+0xf4>
 8008f50:	613c      	str	r4, [r7, #16]
 8008f52:	4638      	mov	r0, r7
 8008f54:	f001 f920 	bl	800a198 <__mcmp>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	db22      	blt.n	8008fa2 <quorem+0xec>
 8008f5c:	3601      	adds	r6, #1
 8008f5e:	4629      	mov	r1, r5
 8008f60:	2000      	movs	r0, #0
 8008f62:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f66:	f8d1 c000 	ldr.w	ip, [r1]
 8008f6a:	b293      	uxth	r3, r2
 8008f6c:	1ac3      	subs	r3, r0, r3
 8008f6e:	0c12      	lsrs	r2, r2, #16
 8008f70:	fa13 f38c 	uxtah	r3, r3, ip
 8008f74:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008f78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f82:	45c1      	cmp	r9, r8
 8008f84:	f841 3b04 	str.w	r3, [r1], #4
 8008f88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f8c:	d2e9      	bcs.n	8008f62 <quorem+0xac>
 8008f8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f96:	b922      	cbnz	r2, 8008fa2 <quorem+0xec>
 8008f98:	3b04      	subs	r3, #4
 8008f9a:	429d      	cmp	r5, r3
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	d30a      	bcc.n	8008fb6 <quorem+0x100>
 8008fa0:	613c      	str	r4, [r7, #16]
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	b003      	add	sp, #12
 8008fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008faa:	6812      	ldr	r2, [r2, #0]
 8008fac:	3b04      	subs	r3, #4
 8008fae:	2a00      	cmp	r2, #0
 8008fb0:	d1ce      	bne.n	8008f50 <quorem+0x9a>
 8008fb2:	3c01      	subs	r4, #1
 8008fb4:	e7c9      	b.n	8008f4a <quorem+0x94>
 8008fb6:	6812      	ldr	r2, [r2, #0]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	d1f0      	bne.n	8008fa0 <quorem+0xea>
 8008fbe:	3c01      	subs	r4, #1
 8008fc0:	e7eb      	b.n	8008f9a <quorem+0xe4>
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e7ee      	b.n	8008fa4 <quorem+0xee>
	...

08008fc8 <_dtoa_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	ed2d 8b02 	vpush	{d8}
 8008fd0:	69c5      	ldr	r5, [r0, #28]
 8008fd2:	b091      	sub	sp, #68	; 0x44
 8008fd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fd8:	ec59 8b10 	vmov	r8, r9, d0
 8008fdc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008fde:	9106      	str	r1, [sp, #24]
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	9208      	str	r2, [sp, #32]
 8008fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe6:	b975      	cbnz	r5, 8009006 <_dtoa_r+0x3e>
 8008fe8:	2010      	movs	r0, #16
 8008fea:	f000 fda5 	bl	8009b38 <malloc>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	61f0      	str	r0, [r6, #28]
 8008ff2:	b920      	cbnz	r0, 8008ffe <_dtoa_r+0x36>
 8008ff4:	4ba6      	ldr	r3, [pc, #664]	; (8009290 <_dtoa_r+0x2c8>)
 8008ff6:	21ef      	movs	r1, #239	; 0xef
 8008ff8:	48a6      	ldr	r0, [pc, #664]	; (8009294 <_dtoa_r+0x2cc>)
 8008ffa:	f001 fc0b 	bl	800a814 <__assert_func>
 8008ffe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009002:	6005      	str	r5, [r0, #0]
 8009004:	60c5      	str	r5, [r0, #12]
 8009006:	69f3      	ldr	r3, [r6, #28]
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	b151      	cbz	r1, 8009022 <_dtoa_r+0x5a>
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	604a      	str	r2, [r1, #4]
 8009010:	2301      	movs	r3, #1
 8009012:	4093      	lsls	r3, r2
 8009014:	608b      	str	r3, [r1, #8]
 8009016:	4630      	mov	r0, r6
 8009018:	f000 fe82 	bl	8009d20 <_Bfree>
 800901c:	69f3      	ldr	r3, [r6, #28]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	f1b9 0300 	subs.w	r3, r9, #0
 8009026:	bfbb      	ittet	lt
 8009028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800902c:	9303      	strlt	r3, [sp, #12]
 800902e:	2300      	movge	r3, #0
 8009030:	2201      	movlt	r2, #1
 8009032:	bfac      	ite	ge
 8009034:	6023      	strge	r3, [r4, #0]
 8009036:	6022      	strlt	r2, [r4, #0]
 8009038:	4b97      	ldr	r3, [pc, #604]	; (8009298 <_dtoa_r+0x2d0>)
 800903a:	9c03      	ldr	r4, [sp, #12]
 800903c:	43a3      	bics	r3, r4
 800903e:	d11c      	bne.n	800907a <_dtoa_r+0xb2>
 8009040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009042:	f242 730f 	movw	r3, #9999	; 0x270f
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800904c:	ea53 0308 	orrs.w	r3, r3, r8
 8009050:	f000 84fb 	beq.w	8009a4a <_dtoa_r+0xa82>
 8009054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009056:	b963      	cbnz	r3, 8009072 <_dtoa_r+0xaa>
 8009058:	4b90      	ldr	r3, [pc, #576]	; (800929c <_dtoa_r+0x2d4>)
 800905a:	e020      	b.n	800909e <_dtoa_r+0xd6>
 800905c:	4b90      	ldr	r3, [pc, #576]	; (80092a0 <_dtoa_r+0x2d8>)
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	3308      	adds	r3, #8
 8009062:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	9801      	ldr	r0, [sp, #4]
 8009068:	b011      	add	sp, #68	; 0x44
 800906a:	ecbd 8b02 	vpop	{d8}
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	4b8a      	ldr	r3, [pc, #552]	; (800929c <_dtoa_r+0x2d4>)
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	3303      	adds	r3, #3
 8009078:	e7f3      	b.n	8009062 <_dtoa_r+0x9a>
 800907a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800907e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009086:	d10c      	bne.n	80090a2 <_dtoa_r+0xda>
 8009088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800908a:	2301      	movs	r3, #1
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 84d7 	beq.w	8009a44 <_dtoa_r+0xa7c>
 8009096:	4b83      	ldr	r3, [pc, #524]	; (80092a4 <_dtoa_r+0x2dc>)
 8009098:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	3b01      	subs	r3, #1
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	e7e1      	b.n	8009066 <_dtoa_r+0x9e>
 80090a2:	aa0e      	add	r2, sp, #56	; 0x38
 80090a4:	a90f      	add	r1, sp, #60	; 0x3c
 80090a6:	4630      	mov	r0, r6
 80090a8:	eeb0 0b48 	vmov.f64	d0, d8
 80090ac:	f001 f91a 	bl	800a2e4 <__d2b>
 80090b0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80090b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090b6:	4605      	mov	r5, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d046      	beq.n	800914a <_dtoa_r+0x182>
 80090bc:	eeb0 7b48 	vmov.f64	d7, d8
 80090c0:	ee18 1a90 	vmov	r1, s17
 80090c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80090c8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80090cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80090d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090d4:	2000      	movs	r0, #0
 80090d6:	ee07 1a90 	vmov	s15, r1
 80090da:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80090de:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009278 <_dtoa_r+0x2b0>
 80090e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80090e6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009280 <_dtoa_r+0x2b8>
 80090ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80090ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009288 <_dtoa_r+0x2c0>
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80090fa:	eeb0 7b46 	vmov.f64	d7, d6
 80090fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009102:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009106:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800910a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910e:	ee16 ba90 	vmov	fp, s13
 8009112:	9009      	str	r0, [sp, #36]	; 0x24
 8009114:	d508      	bpl.n	8009128 <_dtoa_r+0x160>
 8009116:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800911a:	eeb4 6b47 	vcmp.f64	d6, d7
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	bf18      	it	ne
 8009124:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009128:	f1bb 0f16 	cmp.w	fp, #22
 800912c:	d82b      	bhi.n	8009186 <_dtoa_r+0x1be>
 800912e:	495e      	ldr	r1, [pc, #376]	; (80092a8 <_dtoa_r+0x2e0>)
 8009130:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009134:	ed91 7b00 	vldr	d7, [r1]
 8009138:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800913c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009140:	d501      	bpl.n	8009146 <_dtoa_r+0x17e>
 8009142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009146:	2100      	movs	r1, #0
 8009148:	e01e      	b.n	8009188 <_dtoa_r+0x1c0>
 800914a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800914c:	4413      	add	r3, r2
 800914e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009152:	2920      	cmp	r1, #32
 8009154:	bfc1      	itttt	gt
 8009156:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800915a:	408c      	lslgt	r4, r1
 800915c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009160:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009164:	bfd6      	itet	le
 8009166:	f1c1 0120 	rsble	r1, r1, #32
 800916a:	4321      	orrgt	r1, r4
 800916c:	fa08 f101 	lslle.w	r1, r8, r1
 8009170:	ee07 1a90 	vmov	s15, r1
 8009174:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009178:	3b01      	subs	r3, #1
 800917a:	ee17 1a90 	vmov	r1, s15
 800917e:	2001      	movs	r0, #1
 8009180:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009184:	e7a7      	b.n	80090d6 <_dtoa_r+0x10e>
 8009186:	2101      	movs	r1, #1
 8009188:	1ad2      	subs	r2, r2, r3
 800918a:	1e53      	subs	r3, r2, #1
 800918c:	9305      	str	r3, [sp, #20]
 800918e:	bf45      	ittet	mi
 8009190:	f1c2 0301 	rsbmi	r3, r2, #1
 8009194:	9304      	strmi	r3, [sp, #16]
 8009196:	2300      	movpl	r3, #0
 8009198:	2300      	movmi	r3, #0
 800919a:	bf4c      	ite	mi
 800919c:	9305      	strmi	r3, [sp, #20]
 800919e:	9304      	strpl	r3, [sp, #16]
 80091a0:	f1bb 0f00 	cmp.w	fp, #0
 80091a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80091a6:	db18      	blt.n	80091da <_dtoa_r+0x212>
 80091a8:	9b05      	ldr	r3, [sp, #20]
 80091aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80091ae:	445b      	add	r3, fp
 80091b0:	9305      	str	r3, [sp, #20]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9a06      	ldr	r2, [sp, #24]
 80091b6:	2a09      	cmp	r2, #9
 80091b8:	d848      	bhi.n	800924c <_dtoa_r+0x284>
 80091ba:	2a05      	cmp	r2, #5
 80091bc:	bfc4      	itt	gt
 80091be:	3a04      	subgt	r2, #4
 80091c0:	9206      	strgt	r2, [sp, #24]
 80091c2:	9a06      	ldr	r2, [sp, #24]
 80091c4:	f1a2 0202 	sub.w	r2, r2, #2
 80091c8:	bfcc      	ite	gt
 80091ca:	2400      	movgt	r4, #0
 80091cc:	2401      	movle	r4, #1
 80091ce:	2a03      	cmp	r2, #3
 80091d0:	d847      	bhi.n	8009262 <_dtoa_r+0x29a>
 80091d2:	e8df f002 	tbb	[pc, r2]
 80091d6:	2d0b      	.short	0x2d0b
 80091d8:	392b      	.short	0x392b
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	2200      	movs	r2, #0
 80091de:	eba3 030b 	sub.w	r3, r3, fp
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	920a      	str	r2, [sp, #40]	; 0x28
 80091e6:	f1cb 0300 	rsb	r3, fp, #0
 80091ea:	e7e3      	b.n	80091b4 <_dtoa_r+0x1ec>
 80091ec:	2200      	movs	r2, #0
 80091ee:	9207      	str	r2, [sp, #28]
 80091f0:	9a08      	ldr	r2, [sp, #32]
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	dc38      	bgt.n	8009268 <_dtoa_r+0x2a0>
 80091f6:	f04f 0a01 	mov.w	sl, #1
 80091fa:	46d1      	mov	r9, sl
 80091fc:	4652      	mov	r2, sl
 80091fe:	f8cd a020 	str.w	sl, [sp, #32]
 8009202:	69f7      	ldr	r7, [r6, #28]
 8009204:	2100      	movs	r1, #0
 8009206:	2004      	movs	r0, #4
 8009208:	f100 0c14 	add.w	ip, r0, #20
 800920c:	4594      	cmp	ip, r2
 800920e:	d930      	bls.n	8009272 <_dtoa_r+0x2aa>
 8009210:	6079      	str	r1, [r7, #4]
 8009212:	4630      	mov	r0, r6
 8009214:	930d      	str	r3, [sp, #52]	; 0x34
 8009216:	f000 fd43 	bl	8009ca0 <_Balloc>
 800921a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800921c:	9001      	str	r0, [sp, #4]
 800921e:	4602      	mov	r2, r0
 8009220:	2800      	cmp	r0, #0
 8009222:	d145      	bne.n	80092b0 <_dtoa_r+0x2e8>
 8009224:	4b21      	ldr	r3, [pc, #132]	; (80092ac <_dtoa_r+0x2e4>)
 8009226:	f240 11af 	movw	r1, #431	; 0x1af
 800922a:	e6e5      	b.n	8008ff8 <_dtoa_r+0x30>
 800922c:	2201      	movs	r2, #1
 800922e:	e7de      	b.n	80091ee <_dtoa_r+0x226>
 8009230:	2200      	movs	r2, #0
 8009232:	9207      	str	r2, [sp, #28]
 8009234:	9a08      	ldr	r2, [sp, #32]
 8009236:	eb0b 0a02 	add.w	sl, fp, r2
 800923a:	f10a 0901 	add.w	r9, sl, #1
 800923e:	464a      	mov	r2, r9
 8009240:	2a01      	cmp	r2, #1
 8009242:	bfb8      	it	lt
 8009244:	2201      	movlt	r2, #1
 8009246:	e7dc      	b.n	8009202 <_dtoa_r+0x23a>
 8009248:	2201      	movs	r2, #1
 800924a:	e7f2      	b.n	8009232 <_dtoa_r+0x26a>
 800924c:	2401      	movs	r4, #1
 800924e:	2200      	movs	r2, #0
 8009250:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009254:	f04f 3aff 	mov.w	sl, #4294967295
 8009258:	2100      	movs	r1, #0
 800925a:	46d1      	mov	r9, sl
 800925c:	2212      	movs	r2, #18
 800925e:	9108      	str	r1, [sp, #32]
 8009260:	e7cf      	b.n	8009202 <_dtoa_r+0x23a>
 8009262:	2201      	movs	r2, #1
 8009264:	9207      	str	r2, [sp, #28]
 8009266:	e7f5      	b.n	8009254 <_dtoa_r+0x28c>
 8009268:	f8dd a020 	ldr.w	sl, [sp, #32]
 800926c:	46d1      	mov	r9, sl
 800926e:	4652      	mov	r2, sl
 8009270:	e7c7      	b.n	8009202 <_dtoa_r+0x23a>
 8009272:	3101      	adds	r1, #1
 8009274:	0040      	lsls	r0, r0, #1
 8009276:	e7c7      	b.n	8009208 <_dtoa_r+0x240>
 8009278:	636f4361 	.word	0x636f4361
 800927c:	3fd287a7 	.word	0x3fd287a7
 8009280:	8b60c8b3 	.word	0x8b60c8b3
 8009284:	3fc68a28 	.word	0x3fc68a28
 8009288:	509f79fb 	.word	0x509f79fb
 800928c:	3fd34413 	.word	0x3fd34413
 8009290:	0800af5d 	.word	0x0800af5d
 8009294:	0800af74 	.word	0x0800af74
 8009298:	7ff00000 	.word	0x7ff00000
 800929c:	0800af59 	.word	0x0800af59
 80092a0:	0800af50 	.word	0x0800af50
 80092a4:	0800af2d 	.word	0x0800af2d
 80092a8:	0800b060 	.word	0x0800b060
 80092ac:	0800afcc 	.word	0x0800afcc
 80092b0:	69f2      	ldr	r2, [r6, #28]
 80092b2:	9901      	ldr	r1, [sp, #4]
 80092b4:	6011      	str	r1, [r2, #0]
 80092b6:	f1b9 0f0e 	cmp.w	r9, #14
 80092ba:	d86c      	bhi.n	8009396 <_dtoa_r+0x3ce>
 80092bc:	2c00      	cmp	r4, #0
 80092be:	d06a      	beq.n	8009396 <_dtoa_r+0x3ce>
 80092c0:	f1bb 0f00 	cmp.w	fp, #0
 80092c4:	f340 80a0 	ble.w	8009408 <_dtoa_r+0x440>
 80092c8:	4ac1      	ldr	r2, [pc, #772]	; (80095d0 <_dtoa_r+0x608>)
 80092ca:	f00b 010f 	and.w	r1, fp, #15
 80092ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80092d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80092d6:	ed92 7b00 	vldr	d7, [r2]
 80092da:	ea4f 122b 	mov.w	r2, fp, asr #4
 80092de:	f000 8087 	beq.w	80093f0 <_dtoa_r+0x428>
 80092e2:	49bc      	ldr	r1, [pc, #752]	; (80095d4 <_dtoa_r+0x60c>)
 80092e4:	ed91 6b08 	vldr	d6, [r1, #32]
 80092e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80092ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80092f0:	f002 020f 	and.w	r2, r2, #15
 80092f4:	2103      	movs	r1, #3
 80092f6:	48b7      	ldr	r0, [pc, #732]	; (80095d4 <_dtoa_r+0x60c>)
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	d17b      	bne.n	80093f4 <_dtoa_r+0x42c>
 80092fc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009300:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009304:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800930a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800930e:	2a00      	cmp	r2, #0
 8009310:	f000 80a0 	beq.w	8009454 <_dtoa_r+0x48c>
 8009314:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009318:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800931c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009320:	f140 8098 	bpl.w	8009454 <_dtoa_r+0x48c>
 8009324:	f1b9 0f00 	cmp.w	r9, #0
 8009328:	f000 8094 	beq.w	8009454 <_dtoa_r+0x48c>
 800932c:	f1ba 0f00 	cmp.w	sl, #0
 8009330:	dd2f      	ble.n	8009392 <_dtoa_r+0x3ca>
 8009332:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009336:	ee27 7b06 	vmul.f64	d7, d7, d6
 800933a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800933e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009342:	3101      	adds	r1, #1
 8009344:	4654      	mov	r4, sl
 8009346:	ed9d 6b02 	vldr	d6, [sp, #8]
 800934a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800934e:	ee07 1a90 	vmov	s15, r1
 8009352:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009356:	eea7 5b06 	vfma.f64	d5, d7, d6
 800935a:	ee15 7a90 	vmov	r7, s11
 800935e:	ec51 0b15 	vmov	r0, r1, d5
 8009362:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009366:	2c00      	cmp	r4, #0
 8009368:	d177      	bne.n	800945a <_dtoa_r+0x492>
 800936a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800936e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009372:	ec41 0b17 	vmov	d7, r0, r1
 8009376:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800937a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937e:	f300 826a 	bgt.w	8009856 <_dtoa_r+0x88e>
 8009382:	eeb1 7b47 	vneg.f64	d7, d7
 8009386:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800938a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938e:	f100 8260 	bmi.w	8009852 <_dtoa_r+0x88a>
 8009392:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009398:	2a00      	cmp	r2, #0
 800939a:	f2c0 811d 	blt.w	80095d8 <_dtoa_r+0x610>
 800939e:	f1bb 0f0e 	cmp.w	fp, #14
 80093a2:	f300 8119 	bgt.w	80095d8 <_dtoa_r+0x610>
 80093a6:	4b8a      	ldr	r3, [pc, #552]	; (80095d0 <_dtoa_r+0x608>)
 80093a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093ac:	ed93 6b00 	vldr	d6, [r3]
 80093b0:	9b08      	ldr	r3, [sp, #32]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f280 80b7 	bge.w	8009526 <_dtoa_r+0x55e>
 80093b8:	f1b9 0f00 	cmp.w	r9, #0
 80093bc:	f300 80b3 	bgt.w	8009526 <_dtoa_r+0x55e>
 80093c0:	f040 8246 	bne.w	8009850 <_dtoa_r+0x888>
 80093c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80093c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80093cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80093d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d8:	464c      	mov	r4, r9
 80093da:	464f      	mov	r7, r9
 80093dc:	f280 821c 	bge.w	8009818 <_dtoa_r+0x850>
 80093e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093e4:	2331      	movs	r3, #49	; 0x31
 80093e6:	f808 3b01 	strb.w	r3, [r8], #1
 80093ea:	f10b 0b01 	add.w	fp, fp, #1
 80093ee:	e218      	b.n	8009822 <_dtoa_r+0x85a>
 80093f0:	2102      	movs	r1, #2
 80093f2:	e780      	b.n	80092f6 <_dtoa_r+0x32e>
 80093f4:	07d4      	lsls	r4, r2, #31
 80093f6:	d504      	bpl.n	8009402 <_dtoa_r+0x43a>
 80093f8:	ed90 6b00 	vldr	d6, [r0]
 80093fc:	3101      	adds	r1, #1
 80093fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009402:	1052      	asrs	r2, r2, #1
 8009404:	3008      	adds	r0, #8
 8009406:	e777      	b.n	80092f8 <_dtoa_r+0x330>
 8009408:	d022      	beq.n	8009450 <_dtoa_r+0x488>
 800940a:	f1cb 0200 	rsb	r2, fp, #0
 800940e:	4970      	ldr	r1, [pc, #448]	; (80095d0 <_dtoa_r+0x608>)
 8009410:	f002 000f 	and.w	r0, r2, #15
 8009414:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009418:	ed91 7b00 	vldr	d7, [r1]
 800941c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009424:	486b      	ldr	r0, [pc, #428]	; (80095d4 <_dtoa_r+0x60c>)
 8009426:	1112      	asrs	r2, r2, #4
 8009428:	2400      	movs	r4, #0
 800942a:	2102      	movs	r1, #2
 800942c:	b92a      	cbnz	r2, 800943a <_dtoa_r+0x472>
 800942e:	2c00      	cmp	r4, #0
 8009430:	f43f af6a 	beq.w	8009308 <_dtoa_r+0x340>
 8009434:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009438:	e766      	b.n	8009308 <_dtoa_r+0x340>
 800943a:	07d7      	lsls	r7, r2, #31
 800943c:	d505      	bpl.n	800944a <_dtoa_r+0x482>
 800943e:	ed90 6b00 	vldr	d6, [r0]
 8009442:	3101      	adds	r1, #1
 8009444:	2401      	movs	r4, #1
 8009446:	ee27 7b06 	vmul.f64	d7, d7, d6
 800944a:	1052      	asrs	r2, r2, #1
 800944c:	3008      	adds	r0, #8
 800944e:	e7ed      	b.n	800942c <_dtoa_r+0x464>
 8009450:	2102      	movs	r1, #2
 8009452:	e759      	b.n	8009308 <_dtoa_r+0x340>
 8009454:	465a      	mov	r2, fp
 8009456:	464c      	mov	r4, r9
 8009458:	e775      	b.n	8009346 <_dtoa_r+0x37e>
 800945a:	ec41 0b17 	vmov	d7, r0, r1
 800945e:	495c      	ldr	r1, [pc, #368]	; (80095d0 <_dtoa_r+0x608>)
 8009460:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009464:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009468:	9901      	ldr	r1, [sp, #4]
 800946a:	440c      	add	r4, r1
 800946c:	9907      	ldr	r1, [sp, #28]
 800946e:	b351      	cbz	r1, 80094c6 <_dtoa_r+0x4fe>
 8009470:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009474:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009478:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800947c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009480:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009484:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009488:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800948c:	ee14 1a90 	vmov	r1, s9
 8009490:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009494:	3130      	adds	r1, #48	; 0x30
 8009496:	ee36 6b45 	vsub.f64	d6, d6, d5
 800949a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	f808 1b01 	strb.w	r1, [r8], #1
 80094a6:	d439      	bmi.n	800951c <_dtoa_r+0x554>
 80094a8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80094ac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80094b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b4:	d472      	bmi.n	800959c <_dtoa_r+0x5d4>
 80094b6:	45a0      	cmp	r8, r4
 80094b8:	f43f af6b 	beq.w	8009392 <_dtoa_r+0x3ca>
 80094bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80094c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80094c4:	e7e0      	b.n	8009488 <_dtoa_r+0x4c0>
 80094c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80094ce:	4620      	mov	r0, r4
 80094d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80094d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80094d8:	ee14 1a90 	vmov	r1, s9
 80094dc:	3130      	adds	r1, #48	; 0x30
 80094de:	f808 1b01 	strb.w	r1, [r8], #1
 80094e2:	45a0      	cmp	r8, r4
 80094e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80094e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80094ec:	d118      	bne.n	8009520 <_dtoa_r+0x558>
 80094ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80094f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80094f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80094fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fe:	dc4d      	bgt.n	800959c <_dtoa_r+0x5d4>
 8009500:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009504:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950c:	f57f af41 	bpl.w	8009392 <_dtoa_r+0x3ca>
 8009510:	4680      	mov	r8, r0
 8009512:	3801      	subs	r0, #1
 8009514:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009518:	2b30      	cmp	r3, #48	; 0x30
 800951a:	d0f9      	beq.n	8009510 <_dtoa_r+0x548>
 800951c:	4693      	mov	fp, r2
 800951e:	e02a      	b.n	8009576 <_dtoa_r+0x5ae>
 8009520:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009524:	e7d6      	b.n	80094d4 <_dtoa_r+0x50c>
 8009526:	ed9d 7b02 	vldr	d7, [sp, #8]
 800952a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800952e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009532:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009536:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800953a:	ee15 3a10 	vmov	r3, s10
 800953e:	3330      	adds	r3, #48	; 0x30
 8009540:	f808 3b01 	strb.w	r3, [r8], #1
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	eba8 0303 	sub.w	r3, r8, r3
 800954a:	4599      	cmp	r9, r3
 800954c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009550:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009554:	d133      	bne.n	80095be <_dtoa_r+0x5f6>
 8009556:	ee37 7b07 	vadd.f64	d7, d7, d7
 800955a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800955e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009562:	dc1a      	bgt.n	800959a <_dtoa_r+0x5d2>
 8009564:	eeb4 7b46 	vcmp.f64	d7, d6
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	d103      	bne.n	8009576 <_dtoa_r+0x5ae>
 800956e:	ee15 3a10 	vmov	r3, s10
 8009572:	07d9      	lsls	r1, r3, #31
 8009574:	d411      	bmi.n	800959a <_dtoa_r+0x5d2>
 8009576:	4629      	mov	r1, r5
 8009578:	4630      	mov	r0, r6
 800957a:	f000 fbd1 	bl	8009d20 <_Bfree>
 800957e:	2300      	movs	r3, #0
 8009580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009582:	f888 3000 	strb.w	r3, [r8]
 8009586:	f10b 0301 	add.w	r3, fp, #1
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800958e:	2b00      	cmp	r3, #0
 8009590:	f43f ad69 	beq.w	8009066 <_dtoa_r+0x9e>
 8009594:	f8c3 8000 	str.w	r8, [r3]
 8009598:	e565      	b.n	8009066 <_dtoa_r+0x9e>
 800959a:	465a      	mov	r2, fp
 800959c:	4643      	mov	r3, r8
 800959e:	4698      	mov	r8, r3
 80095a0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80095a4:	2939      	cmp	r1, #57	; 0x39
 80095a6:	d106      	bne.n	80095b6 <_dtoa_r+0x5ee>
 80095a8:	9901      	ldr	r1, [sp, #4]
 80095aa:	4299      	cmp	r1, r3
 80095ac:	d1f7      	bne.n	800959e <_dtoa_r+0x5d6>
 80095ae:	9801      	ldr	r0, [sp, #4]
 80095b0:	2130      	movs	r1, #48	; 0x30
 80095b2:	3201      	adds	r2, #1
 80095b4:	7001      	strb	r1, [r0, #0]
 80095b6:	7819      	ldrb	r1, [r3, #0]
 80095b8:	3101      	adds	r1, #1
 80095ba:	7019      	strb	r1, [r3, #0]
 80095bc:	e7ae      	b.n	800951c <_dtoa_r+0x554>
 80095be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ca:	d1b2      	bne.n	8009532 <_dtoa_r+0x56a>
 80095cc:	e7d3      	b.n	8009576 <_dtoa_r+0x5ae>
 80095ce:	bf00      	nop
 80095d0:	0800b060 	.word	0x0800b060
 80095d4:	0800b038 	.word	0x0800b038
 80095d8:	9907      	ldr	r1, [sp, #28]
 80095da:	2900      	cmp	r1, #0
 80095dc:	f000 80d0 	beq.w	8009780 <_dtoa_r+0x7b8>
 80095e0:	9906      	ldr	r1, [sp, #24]
 80095e2:	2901      	cmp	r1, #1
 80095e4:	f300 80b4 	bgt.w	8009750 <_dtoa_r+0x788>
 80095e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095ea:	2900      	cmp	r1, #0
 80095ec:	f000 80ac 	beq.w	8009748 <_dtoa_r+0x780>
 80095f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80095f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80095f8:	461c      	mov	r4, r3
 80095fa:	9309      	str	r3, [sp, #36]	; 0x24
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	4413      	add	r3, r2
 8009600:	9304      	str	r3, [sp, #16]
 8009602:	9b05      	ldr	r3, [sp, #20]
 8009604:	2101      	movs	r1, #1
 8009606:	4413      	add	r3, r2
 8009608:	4630      	mov	r0, r6
 800960a:	9305      	str	r3, [sp, #20]
 800960c:	f000 fc3e 	bl	8009e8c <__i2b>
 8009610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009612:	4607      	mov	r7, r0
 8009614:	f1b8 0f00 	cmp.w	r8, #0
 8009618:	d00d      	beq.n	8009636 <_dtoa_r+0x66e>
 800961a:	9a05      	ldr	r2, [sp, #20]
 800961c:	2a00      	cmp	r2, #0
 800961e:	dd0a      	ble.n	8009636 <_dtoa_r+0x66e>
 8009620:	4542      	cmp	r2, r8
 8009622:	9904      	ldr	r1, [sp, #16]
 8009624:	bfa8      	it	ge
 8009626:	4642      	movge	r2, r8
 8009628:	1a89      	subs	r1, r1, r2
 800962a:	9104      	str	r1, [sp, #16]
 800962c:	9905      	ldr	r1, [sp, #20]
 800962e:	eba8 0802 	sub.w	r8, r8, r2
 8009632:	1a8a      	subs	r2, r1, r2
 8009634:	9205      	str	r2, [sp, #20]
 8009636:	b303      	cbz	r3, 800967a <_dtoa_r+0x6b2>
 8009638:	9a07      	ldr	r2, [sp, #28]
 800963a:	2a00      	cmp	r2, #0
 800963c:	f000 80a5 	beq.w	800978a <_dtoa_r+0x7c2>
 8009640:	2c00      	cmp	r4, #0
 8009642:	dd13      	ble.n	800966c <_dtoa_r+0x6a4>
 8009644:	4639      	mov	r1, r7
 8009646:	4622      	mov	r2, r4
 8009648:	4630      	mov	r0, r6
 800964a:	930d      	str	r3, [sp, #52]	; 0x34
 800964c:	f000 fcde 	bl	800a00c <__pow5mult>
 8009650:	462a      	mov	r2, r5
 8009652:	4601      	mov	r1, r0
 8009654:	4607      	mov	r7, r0
 8009656:	4630      	mov	r0, r6
 8009658:	f000 fc2e 	bl	8009eb8 <__multiply>
 800965c:	4629      	mov	r1, r5
 800965e:	9009      	str	r0, [sp, #36]	; 0x24
 8009660:	4630      	mov	r0, r6
 8009662:	f000 fb5d 	bl	8009d20 <_Bfree>
 8009666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800966a:	4615      	mov	r5, r2
 800966c:	1b1a      	subs	r2, r3, r4
 800966e:	d004      	beq.n	800967a <_dtoa_r+0x6b2>
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f000 fcca 	bl	800a00c <__pow5mult>
 8009678:	4605      	mov	r5, r0
 800967a:	2101      	movs	r1, #1
 800967c:	4630      	mov	r0, r6
 800967e:	f000 fc05 	bl	8009e8c <__i2b>
 8009682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009684:	2b00      	cmp	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	f340 8081 	ble.w	800978e <_dtoa_r+0x7c6>
 800968c:	461a      	mov	r2, r3
 800968e:	4601      	mov	r1, r0
 8009690:	4630      	mov	r0, r6
 8009692:	f000 fcbb 	bl	800a00c <__pow5mult>
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	2b01      	cmp	r3, #1
 800969a:	4604      	mov	r4, r0
 800969c:	dd7a      	ble.n	8009794 <_dtoa_r+0x7cc>
 800969e:	2300      	movs	r3, #0
 80096a0:	9309      	str	r3, [sp, #36]	; 0x24
 80096a2:	6922      	ldr	r2, [r4, #16]
 80096a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80096a8:	6910      	ldr	r0, [r2, #16]
 80096aa:	f000 fba1 	bl	8009df0 <__hi0bits>
 80096ae:	f1c0 0020 	rsb	r0, r0, #32
 80096b2:	9b05      	ldr	r3, [sp, #20]
 80096b4:	4418      	add	r0, r3
 80096b6:	f010 001f 	ands.w	r0, r0, #31
 80096ba:	f000 8093 	beq.w	80097e4 <_dtoa_r+0x81c>
 80096be:	f1c0 0220 	rsb	r2, r0, #32
 80096c2:	2a04      	cmp	r2, #4
 80096c4:	f340 8085 	ble.w	80097d2 <_dtoa_r+0x80a>
 80096c8:	9b04      	ldr	r3, [sp, #16]
 80096ca:	f1c0 001c 	rsb	r0, r0, #28
 80096ce:	4403      	add	r3, r0
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	9b05      	ldr	r3, [sp, #20]
 80096d4:	4480      	add	r8, r0
 80096d6:	4403      	add	r3, r0
 80096d8:	9305      	str	r3, [sp, #20]
 80096da:	9b04      	ldr	r3, [sp, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd05      	ble.n	80096ec <_dtoa_r+0x724>
 80096e0:	4629      	mov	r1, r5
 80096e2:	461a      	mov	r2, r3
 80096e4:	4630      	mov	r0, r6
 80096e6:	f000 fceb 	bl	800a0c0 <__lshift>
 80096ea:	4605      	mov	r5, r0
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dd05      	ble.n	80096fe <_dtoa_r+0x736>
 80096f2:	4621      	mov	r1, r4
 80096f4:	461a      	mov	r2, r3
 80096f6:	4630      	mov	r0, r6
 80096f8:	f000 fce2 	bl	800a0c0 <__lshift>
 80096fc:	4604      	mov	r4, r0
 80096fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d071      	beq.n	80097e8 <_dtoa_r+0x820>
 8009704:	4621      	mov	r1, r4
 8009706:	4628      	mov	r0, r5
 8009708:	f000 fd46 	bl	800a198 <__mcmp>
 800970c:	2800      	cmp	r0, #0
 800970e:	da6b      	bge.n	80097e8 <_dtoa_r+0x820>
 8009710:	2300      	movs	r3, #0
 8009712:	4629      	mov	r1, r5
 8009714:	220a      	movs	r2, #10
 8009716:	4630      	mov	r0, r6
 8009718:	f000 fb24 	bl	8009d64 <__multadd>
 800971c:	9b07      	ldr	r3, [sp, #28]
 800971e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009722:	4605      	mov	r5, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 8197 	beq.w	8009a58 <_dtoa_r+0xa90>
 800972a:	4639      	mov	r1, r7
 800972c:	2300      	movs	r3, #0
 800972e:	220a      	movs	r2, #10
 8009730:	4630      	mov	r0, r6
 8009732:	f000 fb17 	bl	8009d64 <__multadd>
 8009736:	f1ba 0f00 	cmp.w	sl, #0
 800973a:	4607      	mov	r7, r0
 800973c:	f300 8093 	bgt.w	8009866 <_dtoa_r+0x89e>
 8009740:	9b06      	ldr	r3, [sp, #24]
 8009742:	2b02      	cmp	r3, #2
 8009744:	dc57      	bgt.n	80097f6 <_dtoa_r+0x82e>
 8009746:	e08e      	b.n	8009866 <_dtoa_r+0x89e>
 8009748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800974a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800974e:	e751      	b.n	80095f4 <_dtoa_r+0x62c>
 8009750:	f109 34ff 	add.w	r4, r9, #4294967295
 8009754:	42a3      	cmp	r3, r4
 8009756:	bfbf      	itttt	lt
 8009758:	1ae2      	sublt	r2, r4, r3
 800975a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800975c:	189b      	addlt	r3, r3, r2
 800975e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009760:	bfae      	itee	ge
 8009762:	1b1c      	subge	r4, r3, r4
 8009764:	4623      	movlt	r3, r4
 8009766:	2400      	movlt	r4, #0
 8009768:	f1b9 0f00 	cmp.w	r9, #0
 800976c:	bfb5      	itete	lt
 800976e:	9a04      	ldrlt	r2, [sp, #16]
 8009770:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009774:	eba2 0809 	sublt.w	r8, r2, r9
 8009778:	464a      	movge	r2, r9
 800977a:	bfb8      	it	lt
 800977c:	2200      	movlt	r2, #0
 800977e:	e73c      	b.n	80095fa <_dtoa_r+0x632>
 8009780:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009784:	9f07      	ldr	r7, [sp, #28]
 8009786:	461c      	mov	r4, r3
 8009788:	e744      	b.n	8009614 <_dtoa_r+0x64c>
 800978a:	461a      	mov	r2, r3
 800978c:	e770      	b.n	8009670 <_dtoa_r+0x6a8>
 800978e:	9b06      	ldr	r3, [sp, #24]
 8009790:	2b01      	cmp	r3, #1
 8009792:	dc18      	bgt.n	80097c6 <_dtoa_r+0x7fe>
 8009794:	9b02      	ldr	r3, [sp, #8]
 8009796:	b9b3      	cbnz	r3, 80097c6 <_dtoa_r+0x7fe>
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800979e:	b9a2      	cbnz	r2, 80097ca <_dtoa_r+0x802>
 80097a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097a4:	0d12      	lsrs	r2, r2, #20
 80097a6:	0512      	lsls	r2, r2, #20
 80097a8:	b18a      	cbz	r2, 80097ce <_dtoa_r+0x806>
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	3301      	adds	r3, #1
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	9b05      	ldr	r3, [sp, #20]
 80097b2:	3301      	adds	r3, #1
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	2301      	movs	r3, #1
 80097b8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f47f af70 	bne.w	80096a2 <_dtoa_r+0x6da>
 80097c2:	2001      	movs	r0, #1
 80097c4:	e775      	b.n	80096b2 <_dtoa_r+0x6ea>
 80097c6:	2300      	movs	r3, #0
 80097c8:	e7f6      	b.n	80097b8 <_dtoa_r+0x7f0>
 80097ca:	9b02      	ldr	r3, [sp, #8]
 80097cc:	e7f4      	b.n	80097b8 <_dtoa_r+0x7f0>
 80097ce:	9209      	str	r2, [sp, #36]	; 0x24
 80097d0:	e7f3      	b.n	80097ba <_dtoa_r+0x7f2>
 80097d2:	d082      	beq.n	80096da <_dtoa_r+0x712>
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	321c      	adds	r2, #28
 80097d8:	4413      	add	r3, r2
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	9b05      	ldr	r3, [sp, #20]
 80097de:	4490      	add	r8, r2
 80097e0:	4413      	add	r3, r2
 80097e2:	e779      	b.n	80096d8 <_dtoa_r+0x710>
 80097e4:	4602      	mov	r2, r0
 80097e6:	e7f5      	b.n	80097d4 <_dtoa_r+0x80c>
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	dc36      	bgt.n	800985c <_dtoa_r+0x894>
 80097ee:	9b06      	ldr	r3, [sp, #24]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	dd33      	ble.n	800985c <_dtoa_r+0x894>
 80097f4:	46ca      	mov	sl, r9
 80097f6:	f1ba 0f00 	cmp.w	sl, #0
 80097fa:	d10d      	bne.n	8009818 <_dtoa_r+0x850>
 80097fc:	4621      	mov	r1, r4
 80097fe:	4653      	mov	r3, sl
 8009800:	2205      	movs	r2, #5
 8009802:	4630      	mov	r0, r6
 8009804:	f000 faae 	bl	8009d64 <__multadd>
 8009808:	4601      	mov	r1, r0
 800980a:	4604      	mov	r4, r0
 800980c:	4628      	mov	r0, r5
 800980e:	f000 fcc3 	bl	800a198 <__mcmp>
 8009812:	2800      	cmp	r0, #0
 8009814:	f73f ade4 	bgt.w	80093e0 <_dtoa_r+0x418>
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800981e:	ea6f 0b03 	mvn.w	fp, r3
 8009822:	f04f 0900 	mov.w	r9, #0
 8009826:	4621      	mov	r1, r4
 8009828:	4630      	mov	r0, r6
 800982a:	f000 fa79 	bl	8009d20 <_Bfree>
 800982e:	2f00      	cmp	r7, #0
 8009830:	f43f aea1 	beq.w	8009576 <_dtoa_r+0x5ae>
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	d005      	beq.n	8009846 <_dtoa_r+0x87e>
 800983a:	45b9      	cmp	r9, r7
 800983c:	d003      	beq.n	8009846 <_dtoa_r+0x87e>
 800983e:	4649      	mov	r1, r9
 8009840:	4630      	mov	r0, r6
 8009842:	f000 fa6d 	bl	8009d20 <_Bfree>
 8009846:	4639      	mov	r1, r7
 8009848:	4630      	mov	r0, r6
 800984a:	f000 fa69 	bl	8009d20 <_Bfree>
 800984e:	e692      	b.n	8009576 <_dtoa_r+0x5ae>
 8009850:	2400      	movs	r4, #0
 8009852:	4627      	mov	r7, r4
 8009854:	e7e0      	b.n	8009818 <_dtoa_r+0x850>
 8009856:	4693      	mov	fp, r2
 8009858:	4627      	mov	r7, r4
 800985a:	e5c1      	b.n	80093e0 <_dtoa_r+0x418>
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	46ca      	mov	sl, r9
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 8100 	beq.w	8009a66 <_dtoa_r+0xa9e>
 8009866:	f1b8 0f00 	cmp.w	r8, #0
 800986a:	dd05      	ble.n	8009878 <_dtoa_r+0x8b0>
 800986c:	4639      	mov	r1, r7
 800986e:	4642      	mov	r2, r8
 8009870:	4630      	mov	r0, r6
 8009872:	f000 fc25 	bl	800a0c0 <__lshift>
 8009876:	4607      	mov	r7, r0
 8009878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987a:	2b00      	cmp	r3, #0
 800987c:	d05d      	beq.n	800993a <_dtoa_r+0x972>
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fa0d 	bl	8009ca0 <_Balloc>
 8009886:	4680      	mov	r8, r0
 8009888:	b928      	cbnz	r0, 8009896 <_dtoa_r+0x8ce>
 800988a:	4b82      	ldr	r3, [pc, #520]	; (8009a94 <_dtoa_r+0xacc>)
 800988c:	4602      	mov	r2, r0
 800988e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009892:	f7ff bbb1 	b.w	8008ff8 <_dtoa_r+0x30>
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	3202      	adds	r2, #2
 800989a:	0092      	lsls	r2, r2, #2
 800989c:	f107 010c 	add.w	r1, r7, #12
 80098a0:	300c      	adds	r0, #12
 80098a2:	f000 ffa9 	bl	800a7f8 <memcpy>
 80098a6:	2201      	movs	r2, #1
 80098a8:	4641      	mov	r1, r8
 80098aa:	4630      	mov	r0, r6
 80098ac:	f000 fc08 	bl	800a0c0 <__lshift>
 80098b0:	9b01      	ldr	r3, [sp, #4]
 80098b2:	3301      	adds	r3, #1
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	9b01      	ldr	r3, [sp, #4]
 80098b8:	4453      	add	r3, sl
 80098ba:	9308      	str	r3, [sp, #32]
 80098bc:	9b02      	ldr	r3, [sp, #8]
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	46b9      	mov	r9, r7
 80098c4:	9307      	str	r3, [sp, #28]
 80098c6:	4607      	mov	r7, r0
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	4621      	mov	r1, r4
 80098cc:	3b01      	subs	r3, #1
 80098ce:	4628      	mov	r0, r5
 80098d0:	9302      	str	r3, [sp, #8]
 80098d2:	f7ff faf0 	bl	8008eb6 <quorem>
 80098d6:	4603      	mov	r3, r0
 80098d8:	3330      	adds	r3, #48	; 0x30
 80098da:	9005      	str	r0, [sp, #20]
 80098dc:	4649      	mov	r1, r9
 80098de:	4628      	mov	r0, r5
 80098e0:	9309      	str	r3, [sp, #36]	; 0x24
 80098e2:	f000 fc59 	bl	800a198 <__mcmp>
 80098e6:	463a      	mov	r2, r7
 80098e8:	4682      	mov	sl, r0
 80098ea:	4621      	mov	r1, r4
 80098ec:	4630      	mov	r0, r6
 80098ee:	f000 fc6f 	bl	800a1d0 <__mdiff>
 80098f2:	68c2      	ldr	r2, [r0, #12]
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	4680      	mov	r8, r0
 80098f8:	bb0a      	cbnz	r2, 800993e <_dtoa_r+0x976>
 80098fa:	4601      	mov	r1, r0
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 fc4b 	bl	800a198 <__mcmp>
 8009902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009904:	4602      	mov	r2, r0
 8009906:	4641      	mov	r1, r8
 8009908:	4630      	mov	r0, r6
 800990a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800990e:	f000 fa07 	bl	8009d20 <_Bfree>
 8009912:	9b06      	ldr	r3, [sp, #24]
 8009914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009916:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800991a:	ea43 0102 	orr.w	r1, r3, r2
 800991e:	9b07      	ldr	r3, [sp, #28]
 8009920:	4319      	orrs	r1, r3
 8009922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009924:	d10d      	bne.n	8009942 <_dtoa_r+0x97a>
 8009926:	2b39      	cmp	r3, #57	; 0x39
 8009928:	d029      	beq.n	800997e <_dtoa_r+0x9b6>
 800992a:	f1ba 0f00 	cmp.w	sl, #0
 800992e:	dd01      	ble.n	8009934 <_dtoa_r+0x96c>
 8009930:	9b05      	ldr	r3, [sp, #20]
 8009932:	3331      	adds	r3, #49	; 0x31
 8009934:	9a02      	ldr	r2, [sp, #8]
 8009936:	7013      	strb	r3, [r2, #0]
 8009938:	e775      	b.n	8009826 <_dtoa_r+0x85e>
 800993a:	4638      	mov	r0, r7
 800993c:	e7b8      	b.n	80098b0 <_dtoa_r+0x8e8>
 800993e:	2201      	movs	r2, #1
 8009940:	e7e1      	b.n	8009906 <_dtoa_r+0x93e>
 8009942:	f1ba 0f00 	cmp.w	sl, #0
 8009946:	db06      	blt.n	8009956 <_dtoa_r+0x98e>
 8009948:	9906      	ldr	r1, [sp, #24]
 800994a:	ea41 0a0a 	orr.w	sl, r1, sl
 800994e:	9907      	ldr	r1, [sp, #28]
 8009950:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009954:	d120      	bne.n	8009998 <_dtoa_r+0x9d0>
 8009956:	2a00      	cmp	r2, #0
 8009958:	ddec      	ble.n	8009934 <_dtoa_r+0x96c>
 800995a:	4629      	mov	r1, r5
 800995c:	2201      	movs	r2, #1
 800995e:	4630      	mov	r0, r6
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	f000 fbad 	bl	800a0c0 <__lshift>
 8009966:	4621      	mov	r1, r4
 8009968:	4605      	mov	r5, r0
 800996a:	f000 fc15 	bl	800a198 <__mcmp>
 800996e:	2800      	cmp	r0, #0
 8009970:	9b04      	ldr	r3, [sp, #16]
 8009972:	dc02      	bgt.n	800997a <_dtoa_r+0x9b2>
 8009974:	d1de      	bne.n	8009934 <_dtoa_r+0x96c>
 8009976:	07da      	lsls	r2, r3, #31
 8009978:	d5dc      	bpl.n	8009934 <_dtoa_r+0x96c>
 800997a:	2b39      	cmp	r3, #57	; 0x39
 800997c:	d1d8      	bne.n	8009930 <_dtoa_r+0x968>
 800997e:	9a02      	ldr	r2, [sp, #8]
 8009980:	2339      	movs	r3, #57	; 0x39
 8009982:	7013      	strb	r3, [r2, #0]
 8009984:	4643      	mov	r3, r8
 8009986:	4698      	mov	r8, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800998e:	2a39      	cmp	r2, #57	; 0x39
 8009990:	d051      	beq.n	8009a36 <_dtoa_r+0xa6e>
 8009992:	3201      	adds	r2, #1
 8009994:	701a      	strb	r2, [r3, #0]
 8009996:	e746      	b.n	8009826 <_dtoa_r+0x85e>
 8009998:	2a00      	cmp	r2, #0
 800999a:	dd03      	ble.n	80099a4 <_dtoa_r+0x9dc>
 800999c:	2b39      	cmp	r3, #57	; 0x39
 800999e:	d0ee      	beq.n	800997e <_dtoa_r+0x9b6>
 80099a0:	3301      	adds	r3, #1
 80099a2:	e7c7      	b.n	8009934 <_dtoa_r+0x96c>
 80099a4:	9a04      	ldr	r2, [sp, #16]
 80099a6:	9908      	ldr	r1, [sp, #32]
 80099a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099ac:	428a      	cmp	r2, r1
 80099ae:	d02b      	beq.n	8009a08 <_dtoa_r+0xa40>
 80099b0:	4629      	mov	r1, r5
 80099b2:	2300      	movs	r3, #0
 80099b4:	220a      	movs	r2, #10
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 f9d4 	bl	8009d64 <__multadd>
 80099bc:	45b9      	cmp	r9, r7
 80099be:	4605      	mov	r5, r0
 80099c0:	f04f 0300 	mov.w	r3, #0
 80099c4:	f04f 020a 	mov.w	r2, #10
 80099c8:	4649      	mov	r1, r9
 80099ca:	4630      	mov	r0, r6
 80099cc:	d107      	bne.n	80099de <_dtoa_r+0xa16>
 80099ce:	f000 f9c9 	bl	8009d64 <__multadd>
 80099d2:	4681      	mov	r9, r0
 80099d4:	4607      	mov	r7, r0
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	3301      	adds	r3, #1
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	e774      	b.n	80098c8 <_dtoa_r+0x900>
 80099de:	f000 f9c1 	bl	8009d64 <__multadd>
 80099e2:	4639      	mov	r1, r7
 80099e4:	4681      	mov	r9, r0
 80099e6:	2300      	movs	r3, #0
 80099e8:	220a      	movs	r2, #10
 80099ea:	4630      	mov	r0, r6
 80099ec:	f000 f9ba 	bl	8009d64 <__multadd>
 80099f0:	4607      	mov	r7, r0
 80099f2:	e7f0      	b.n	80099d6 <_dtoa_r+0xa0e>
 80099f4:	f1ba 0f00 	cmp.w	sl, #0
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	bfcc      	ite	gt
 80099fc:	46d0      	movgt	r8, sl
 80099fe:	f04f 0801 	movle.w	r8, #1
 8009a02:	4490      	add	r8, r2
 8009a04:	f04f 0900 	mov.w	r9, #0
 8009a08:	4629      	mov	r1, r5
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	9302      	str	r3, [sp, #8]
 8009a10:	f000 fb56 	bl	800a0c0 <__lshift>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4605      	mov	r5, r0
 8009a18:	f000 fbbe 	bl	800a198 <__mcmp>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	dcb1      	bgt.n	8009984 <_dtoa_r+0x9bc>
 8009a20:	d102      	bne.n	8009a28 <_dtoa_r+0xa60>
 8009a22:	9b02      	ldr	r3, [sp, #8]
 8009a24:	07db      	lsls	r3, r3, #31
 8009a26:	d4ad      	bmi.n	8009984 <_dtoa_r+0x9bc>
 8009a28:	4643      	mov	r3, r8
 8009a2a:	4698      	mov	r8, r3
 8009a2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a30:	2a30      	cmp	r2, #48	; 0x30
 8009a32:	d0fa      	beq.n	8009a2a <_dtoa_r+0xa62>
 8009a34:	e6f7      	b.n	8009826 <_dtoa_r+0x85e>
 8009a36:	9a01      	ldr	r2, [sp, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d1a4      	bne.n	8009986 <_dtoa_r+0x9be>
 8009a3c:	f10b 0b01 	add.w	fp, fp, #1
 8009a40:	2331      	movs	r3, #49	; 0x31
 8009a42:	e778      	b.n	8009936 <_dtoa_r+0x96e>
 8009a44:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <_dtoa_r+0xad0>)
 8009a46:	f7ff bb2a 	b.w	800909e <_dtoa_r+0xd6>
 8009a4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f47f ab05 	bne.w	800905c <_dtoa_r+0x94>
 8009a52:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <_dtoa_r+0xad4>)
 8009a54:	f7ff bb23 	b.w	800909e <_dtoa_r+0xd6>
 8009a58:	f1ba 0f00 	cmp.w	sl, #0
 8009a5c:	dc03      	bgt.n	8009a66 <_dtoa_r+0xa9e>
 8009a5e:	9b06      	ldr	r3, [sp, #24]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	f73f aec8 	bgt.w	80097f6 <_dtoa_r+0x82e>
 8009a66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f7ff fa22 	bl	8008eb6 <quorem>
 8009a72:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a76:	f808 3b01 	strb.w	r3, [r8], #1
 8009a7a:	9a01      	ldr	r2, [sp, #4]
 8009a7c:	eba8 0202 	sub.w	r2, r8, r2
 8009a80:	4592      	cmp	sl, r2
 8009a82:	ddb7      	ble.n	80099f4 <_dtoa_r+0xa2c>
 8009a84:	4629      	mov	r1, r5
 8009a86:	2300      	movs	r3, #0
 8009a88:	220a      	movs	r2, #10
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f000 f96a 	bl	8009d64 <__multadd>
 8009a90:	4605      	mov	r5, r0
 8009a92:	e7ea      	b.n	8009a6a <_dtoa_r+0xaa2>
 8009a94:	0800afcc 	.word	0x0800afcc
 8009a98:	0800af2c 	.word	0x0800af2c
 8009a9c:	0800af50 	.word	0x0800af50

08009aa0 <_free_r>:
 8009aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aa2:	2900      	cmp	r1, #0
 8009aa4:	d044      	beq.n	8009b30 <_free_r+0x90>
 8009aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aaa:	9001      	str	r0, [sp, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f1a1 0404 	sub.w	r4, r1, #4
 8009ab2:	bfb8      	it	lt
 8009ab4:	18e4      	addlt	r4, r4, r3
 8009ab6:	f000 f8e7 	bl	8009c88 <__malloc_lock>
 8009aba:	4a1e      	ldr	r2, [pc, #120]	; (8009b34 <_free_r+0x94>)
 8009abc:	9801      	ldr	r0, [sp, #4]
 8009abe:	6813      	ldr	r3, [r2, #0]
 8009ac0:	b933      	cbnz	r3, 8009ad0 <_free_r+0x30>
 8009ac2:	6063      	str	r3, [r4, #4]
 8009ac4:	6014      	str	r4, [r2, #0]
 8009ac6:	b003      	add	sp, #12
 8009ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009acc:	f000 b8e2 	b.w	8009c94 <__malloc_unlock>
 8009ad0:	42a3      	cmp	r3, r4
 8009ad2:	d908      	bls.n	8009ae6 <_free_r+0x46>
 8009ad4:	6825      	ldr	r5, [r4, #0]
 8009ad6:	1961      	adds	r1, r4, r5
 8009ad8:	428b      	cmp	r3, r1
 8009ada:	bf01      	itttt	eq
 8009adc:	6819      	ldreq	r1, [r3, #0]
 8009ade:	685b      	ldreq	r3, [r3, #4]
 8009ae0:	1949      	addeq	r1, r1, r5
 8009ae2:	6021      	streq	r1, [r4, #0]
 8009ae4:	e7ed      	b.n	8009ac2 <_free_r+0x22>
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	b10b      	cbz	r3, 8009af0 <_free_r+0x50>
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	d9fa      	bls.n	8009ae6 <_free_r+0x46>
 8009af0:	6811      	ldr	r1, [r2, #0]
 8009af2:	1855      	adds	r5, r2, r1
 8009af4:	42a5      	cmp	r5, r4
 8009af6:	d10b      	bne.n	8009b10 <_free_r+0x70>
 8009af8:	6824      	ldr	r4, [r4, #0]
 8009afa:	4421      	add	r1, r4
 8009afc:	1854      	adds	r4, r2, r1
 8009afe:	42a3      	cmp	r3, r4
 8009b00:	6011      	str	r1, [r2, #0]
 8009b02:	d1e0      	bne.n	8009ac6 <_free_r+0x26>
 8009b04:	681c      	ldr	r4, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	6053      	str	r3, [r2, #4]
 8009b0a:	440c      	add	r4, r1
 8009b0c:	6014      	str	r4, [r2, #0]
 8009b0e:	e7da      	b.n	8009ac6 <_free_r+0x26>
 8009b10:	d902      	bls.n	8009b18 <_free_r+0x78>
 8009b12:	230c      	movs	r3, #12
 8009b14:	6003      	str	r3, [r0, #0]
 8009b16:	e7d6      	b.n	8009ac6 <_free_r+0x26>
 8009b18:	6825      	ldr	r5, [r4, #0]
 8009b1a:	1961      	adds	r1, r4, r5
 8009b1c:	428b      	cmp	r3, r1
 8009b1e:	bf04      	itt	eq
 8009b20:	6819      	ldreq	r1, [r3, #0]
 8009b22:	685b      	ldreq	r3, [r3, #4]
 8009b24:	6063      	str	r3, [r4, #4]
 8009b26:	bf04      	itt	eq
 8009b28:	1949      	addeq	r1, r1, r5
 8009b2a:	6021      	streq	r1, [r4, #0]
 8009b2c:	6054      	str	r4, [r2, #4]
 8009b2e:	e7ca      	b.n	8009ac6 <_free_r+0x26>
 8009b30:	b003      	add	sp, #12
 8009b32:	bd30      	pop	{r4, r5, pc}
 8009b34:	24000484 	.word	0x24000484

08009b38 <malloc>:
 8009b38:	4b02      	ldr	r3, [pc, #8]	; (8009b44 <malloc+0xc>)
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	f000 b823 	b.w	8009b88 <_malloc_r>
 8009b42:	bf00      	nop
 8009b44:	24000068 	.word	0x24000068

08009b48 <sbrk_aligned>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	4e0e      	ldr	r6, [pc, #56]	; (8009b84 <sbrk_aligned+0x3c>)
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	6831      	ldr	r1, [r6, #0]
 8009b50:	4605      	mov	r5, r0
 8009b52:	b911      	cbnz	r1, 8009b5a <sbrk_aligned+0x12>
 8009b54:	f000 fe40 	bl	800a7d8 <_sbrk_r>
 8009b58:	6030      	str	r0, [r6, #0]
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f000 fe3b 	bl	800a7d8 <_sbrk_r>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	d00a      	beq.n	8009b7c <sbrk_aligned+0x34>
 8009b66:	1cc4      	adds	r4, r0, #3
 8009b68:	f024 0403 	bic.w	r4, r4, #3
 8009b6c:	42a0      	cmp	r0, r4
 8009b6e:	d007      	beq.n	8009b80 <sbrk_aligned+0x38>
 8009b70:	1a21      	subs	r1, r4, r0
 8009b72:	4628      	mov	r0, r5
 8009b74:	f000 fe30 	bl	800a7d8 <_sbrk_r>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d101      	bne.n	8009b80 <sbrk_aligned+0x38>
 8009b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b80:	4620      	mov	r0, r4
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	24000488 	.word	0x24000488

08009b88 <_malloc_r>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	1ccd      	adds	r5, r1, #3
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	db01      	blt.n	8009ba4 <_malloc_r+0x1c>
 8009ba0:	42a9      	cmp	r1, r5
 8009ba2:	d905      	bls.n	8009bb0 <_malloc_r+0x28>
 8009ba4:	230c      	movs	r3, #12
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	2600      	movs	r6, #0
 8009baa:	4630      	mov	r0, r6
 8009bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c84 <_malloc_r+0xfc>
 8009bb4:	f000 f868 	bl	8009c88 <__malloc_lock>
 8009bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bbc:	461c      	mov	r4, r3
 8009bbe:	bb5c      	cbnz	r4, 8009c18 <_malloc_r+0x90>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f7ff ffc0 	bl	8009b48 <sbrk_aligned>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	4604      	mov	r4, r0
 8009bcc:	d155      	bne.n	8009c7a <_malloc_r+0xf2>
 8009bce:	f8d8 4000 	ldr.w	r4, [r8]
 8009bd2:	4626      	mov	r6, r4
 8009bd4:	2e00      	cmp	r6, #0
 8009bd6:	d145      	bne.n	8009c64 <_malloc_r+0xdc>
 8009bd8:	2c00      	cmp	r4, #0
 8009bda:	d048      	beq.n	8009c6e <_malloc_r+0xe6>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	4631      	mov	r1, r6
 8009be0:	4638      	mov	r0, r7
 8009be2:	eb04 0903 	add.w	r9, r4, r3
 8009be6:	f000 fdf7 	bl	800a7d8 <_sbrk_r>
 8009bea:	4581      	cmp	r9, r0
 8009bec:	d13f      	bne.n	8009c6e <_malloc_r+0xe6>
 8009bee:	6821      	ldr	r1, [r4, #0]
 8009bf0:	1a6d      	subs	r5, r5, r1
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7ff ffa7 	bl	8009b48 <sbrk_aligned>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d037      	beq.n	8009c6e <_malloc_r+0xe6>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	442b      	add	r3, r5
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	f8d8 3000 	ldr.w	r3, [r8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d038      	beq.n	8009c7e <_malloc_r+0xf6>
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	42a2      	cmp	r2, r4
 8009c10:	d12b      	bne.n	8009c6a <_malloc_r+0xe2>
 8009c12:	2200      	movs	r2, #0
 8009c14:	605a      	str	r2, [r3, #4]
 8009c16:	e00f      	b.n	8009c38 <_malloc_r+0xb0>
 8009c18:	6822      	ldr	r2, [r4, #0]
 8009c1a:	1b52      	subs	r2, r2, r5
 8009c1c:	d41f      	bmi.n	8009c5e <_malloc_r+0xd6>
 8009c1e:	2a0b      	cmp	r2, #11
 8009c20:	d917      	bls.n	8009c52 <_malloc_r+0xca>
 8009c22:	1961      	adds	r1, r4, r5
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	6025      	str	r5, [r4, #0]
 8009c28:	bf18      	it	ne
 8009c2a:	6059      	strne	r1, [r3, #4]
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	bf08      	it	eq
 8009c30:	f8c8 1000 	streq.w	r1, [r8]
 8009c34:	5162      	str	r2, [r4, r5]
 8009c36:	604b      	str	r3, [r1, #4]
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f104 060b 	add.w	r6, r4, #11
 8009c3e:	f000 f829 	bl	8009c94 <__malloc_unlock>
 8009c42:	f026 0607 	bic.w	r6, r6, #7
 8009c46:	1d23      	adds	r3, r4, #4
 8009c48:	1af2      	subs	r2, r6, r3
 8009c4a:	d0ae      	beq.n	8009baa <_malloc_r+0x22>
 8009c4c:	1b9b      	subs	r3, r3, r6
 8009c4e:	50a3      	str	r3, [r4, r2]
 8009c50:	e7ab      	b.n	8009baa <_malloc_r+0x22>
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	6862      	ldr	r2, [r4, #4]
 8009c56:	d1dd      	bne.n	8009c14 <_malloc_r+0x8c>
 8009c58:	f8c8 2000 	str.w	r2, [r8]
 8009c5c:	e7ec      	b.n	8009c38 <_malloc_r+0xb0>
 8009c5e:	4623      	mov	r3, r4
 8009c60:	6864      	ldr	r4, [r4, #4]
 8009c62:	e7ac      	b.n	8009bbe <_malloc_r+0x36>
 8009c64:	4634      	mov	r4, r6
 8009c66:	6876      	ldr	r6, [r6, #4]
 8009c68:	e7b4      	b.n	8009bd4 <_malloc_r+0x4c>
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	e7cc      	b.n	8009c08 <_malloc_r+0x80>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	603b      	str	r3, [r7, #0]
 8009c72:	4638      	mov	r0, r7
 8009c74:	f000 f80e 	bl	8009c94 <__malloc_unlock>
 8009c78:	e797      	b.n	8009baa <_malloc_r+0x22>
 8009c7a:	6025      	str	r5, [r4, #0]
 8009c7c:	e7dc      	b.n	8009c38 <_malloc_r+0xb0>
 8009c7e:	605b      	str	r3, [r3, #4]
 8009c80:	deff      	udf	#255	; 0xff
 8009c82:	bf00      	nop
 8009c84:	24000484 	.word	0x24000484

08009c88 <__malloc_lock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	; (8009c90 <__malloc_lock+0x8>)
 8009c8a:	f7ff b912 	b.w	8008eb2 <__retarget_lock_acquire_recursive>
 8009c8e:	bf00      	nop
 8009c90:	24000480 	.word	0x24000480

08009c94 <__malloc_unlock>:
 8009c94:	4801      	ldr	r0, [pc, #4]	; (8009c9c <__malloc_unlock+0x8>)
 8009c96:	f7ff b90d 	b.w	8008eb4 <__retarget_lock_release_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	24000480 	.word	0x24000480

08009ca0 <_Balloc>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	69c6      	ldr	r6, [r0, #28]
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	b976      	cbnz	r6, 8009cc8 <_Balloc+0x28>
 8009caa:	2010      	movs	r0, #16
 8009cac:	f7ff ff44 	bl	8009b38 <malloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	61e0      	str	r0, [r4, #28]
 8009cb4:	b920      	cbnz	r0, 8009cc0 <_Balloc+0x20>
 8009cb6:	4b18      	ldr	r3, [pc, #96]	; (8009d18 <_Balloc+0x78>)
 8009cb8:	4818      	ldr	r0, [pc, #96]	; (8009d1c <_Balloc+0x7c>)
 8009cba:	216b      	movs	r1, #107	; 0x6b
 8009cbc:	f000 fdaa 	bl	800a814 <__assert_func>
 8009cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc4:	6006      	str	r6, [r0, #0]
 8009cc6:	60c6      	str	r6, [r0, #12]
 8009cc8:	69e6      	ldr	r6, [r4, #28]
 8009cca:	68f3      	ldr	r3, [r6, #12]
 8009ccc:	b183      	cbz	r3, 8009cf0 <_Balloc+0x50>
 8009cce:	69e3      	ldr	r3, [r4, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cd6:	b9b8      	cbnz	r0, 8009d08 <_Balloc+0x68>
 8009cd8:	2101      	movs	r1, #1
 8009cda:	fa01 f605 	lsl.w	r6, r1, r5
 8009cde:	1d72      	adds	r2, r6, #5
 8009ce0:	0092      	lsls	r2, r2, #2
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 fdb4 	bl	800a850 <_calloc_r>
 8009ce8:	b160      	cbz	r0, 8009d04 <_Balloc+0x64>
 8009cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cee:	e00e      	b.n	8009d0e <_Balloc+0x6e>
 8009cf0:	2221      	movs	r2, #33	; 0x21
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fdab 	bl	800a850 <_calloc_r>
 8009cfa:	69e3      	ldr	r3, [r4, #28]
 8009cfc:	60f0      	str	r0, [r6, #12]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e4      	bne.n	8009cce <_Balloc+0x2e>
 8009d04:	2000      	movs	r0, #0
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	6802      	ldr	r2, [r0, #0]
 8009d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d14:	e7f7      	b.n	8009d06 <_Balloc+0x66>
 8009d16:	bf00      	nop
 8009d18:	0800af5d 	.word	0x0800af5d
 8009d1c:	0800afdd 	.word	0x0800afdd

08009d20 <_Bfree>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	69c6      	ldr	r6, [r0, #28]
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	b976      	cbnz	r6, 8009d48 <_Bfree+0x28>
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f7ff ff04 	bl	8009b38 <malloc>
 8009d30:	4602      	mov	r2, r0
 8009d32:	61e8      	str	r0, [r5, #28]
 8009d34:	b920      	cbnz	r0, 8009d40 <_Bfree+0x20>
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <_Bfree+0x3c>)
 8009d38:	4809      	ldr	r0, [pc, #36]	; (8009d60 <_Bfree+0x40>)
 8009d3a:	218f      	movs	r1, #143	; 0x8f
 8009d3c:	f000 fd6a 	bl	800a814 <__assert_func>
 8009d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d44:	6006      	str	r6, [r0, #0]
 8009d46:	60c6      	str	r6, [r0, #12]
 8009d48:	b13c      	cbz	r4, 8009d5a <_Bfree+0x3a>
 8009d4a:	69eb      	ldr	r3, [r5, #28]
 8009d4c:	6862      	ldr	r2, [r4, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d54:	6021      	str	r1, [r4, #0]
 8009d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	0800af5d 	.word	0x0800af5d
 8009d60:	0800afdd 	.word	0x0800afdd

08009d64 <__multadd>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	690d      	ldr	r5, [r1, #16]
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	461e      	mov	r6, r3
 8009d70:	f101 0c14 	add.w	ip, r1, #20
 8009d74:	2000      	movs	r0, #0
 8009d76:	f8dc 3000 	ldr.w	r3, [ip]
 8009d7a:	b299      	uxth	r1, r3
 8009d7c:	fb02 6101 	mla	r1, r2, r1, r6
 8009d80:	0c1e      	lsrs	r6, r3, #16
 8009d82:	0c0b      	lsrs	r3, r1, #16
 8009d84:	fb02 3306 	mla	r3, r2, r6, r3
 8009d88:	b289      	uxth	r1, r1
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d90:	4285      	cmp	r5, r0
 8009d92:	f84c 1b04 	str.w	r1, [ip], #4
 8009d96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d9a:	dcec      	bgt.n	8009d76 <__multadd+0x12>
 8009d9c:	b30e      	cbz	r6, 8009de2 <__multadd+0x7e>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	dc19      	bgt.n	8009dd8 <__multadd+0x74>
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	4638      	mov	r0, r7
 8009da8:	3101      	adds	r1, #1
 8009daa:	f7ff ff79 	bl	8009ca0 <_Balloc>
 8009dae:	4680      	mov	r8, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <__multadd+0x5a>
 8009db2:	4602      	mov	r2, r0
 8009db4:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <__multadd+0x84>)
 8009db6:	480d      	ldr	r0, [pc, #52]	; (8009dec <__multadd+0x88>)
 8009db8:	21ba      	movs	r1, #186	; 0xba
 8009dba:	f000 fd2b 	bl	800a814 <__assert_func>
 8009dbe:	6922      	ldr	r2, [r4, #16]
 8009dc0:	3202      	adds	r2, #2
 8009dc2:	f104 010c 	add.w	r1, r4, #12
 8009dc6:	0092      	lsls	r2, r2, #2
 8009dc8:	300c      	adds	r0, #12
 8009dca:	f000 fd15 	bl	800a7f8 <memcpy>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff ffa5 	bl	8009d20 <_Bfree>
 8009dd6:	4644      	mov	r4, r8
 8009dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ddc:	3501      	adds	r5, #1
 8009dde:	615e      	str	r6, [r3, #20]
 8009de0:	6125      	str	r5, [r4, #16]
 8009de2:	4620      	mov	r0, r4
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	0800afcc 	.word	0x0800afcc
 8009dec:	0800afdd 	.word	0x0800afdd

08009df0 <__hi0bits>:
 8009df0:	0c03      	lsrs	r3, r0, #16
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	b9d3      	cbnz	r3, 8009e2c <__hi0bits+0x3c>
 8009df6:	0400      	lsls	r0, r0, #16
 8009df8:	2310      	movs	r3, #16
 8009dfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009dfe:	bf04      	itt	eq
 8009e00:	0200      	lsleq	r0, r0, #8
 8009e02:	3308      	addeq	r3, #8
 8009e04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e08:	bf04      	itt	eq
 8009e0a:	0100      	lsleq	r0, r0, #4
 8009e0c:	3304      	addeq	r3, #4
 8009e0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e12:	bf04      	itt	eq
 8009e14:	0080      	lsleq	r0, r0, #2
 8009e16:	3302      	addeq	r3, #2
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	db05      	blt.n	8009e28 <__hi0bits+0x38>
 8009e1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e20:	f103 0301 	add.w	r3, r3, #1
 8009e24:	bf08      	it	eq
 8009e26:	2320      	moveq	r3, #32
 8009e28:	4618      	mov	r0, r3
 8009e2a:	4770      	bx	lr
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	e7e4      	b.n	8009dfa <__hi0bits+0xa>

08009e30 <__lo0bits>:
 8009e30:	6803      	ldr	r3, [r0, #0]
 8009e32:	f013 0207 	ands.w	r2, r3, #7
 8009e36:	d00c      	beq.n	8009e52 <__lo0bits+0x22>
 8009e38:	07d9      	lsls	r1, r3, #31
 8009e3a:	d422      	bmi.n	8009e82 <__lo0bits+0x52>
 8009e3c:	079a      	lsls	r2, r3, #30
 8009e3e:	bf49      	itett	mi
 8009e40:	085b      	lsrmi	r3, r3, #1
 8009e42:	089b      	lsrpl	r3, r3, #2
 8009e44:	6003      	strmi	r3, [r0, #0]
 8009e46:	2201      	movmi	r2, #1
 8009e48:	bf5c      	itt	pl
 8009e4a:	6003      	strpl	r3, [r0, #0]
 8009e4c:	2202      	movpl	r2, #2
 8009e4e:	4610      	mov	r0, r2
 8009e50:	4770      	bx	lr
 8009e52:	b299      	uxth	r1, r3
 8009e54:	b909      	cbnz	r1, 8009e5a <__lo0bits+0x2a>
 8009e56:	0c1b      	lsrs	r3, r3, #16
 8009e58:	2210      	movs	r2, #16
 8009e5a:	b2d9      	uxtb	r1, r3
 8009e5c:	b909      	cbnz	r1, 8009e62 <__lo0bits+0x32>
 8009e5e:	3208      	adds	r2, #8
 8009e60:	0a1b      	lsrs	r3, r3, #8
 8009e62:	0719      	lsls	r1, r3, #28
 8009e64:	bf04      	itt	eq
 8009e66:	091b      	lsreq	r3, r3, #4
 8009e68:	3204      	addeq	r2, #4
 8009e6a:	0799      	lsls	r1, r3, #30
 8009e6c:	bf04      	itt	eq
 8009e6e:	089b      	lsreq	r3, r3, #2
 8009e70:	3202      	addeq	r2, #2
 8009e72:	07d9      	lsls	r1, r3, #31
 8009e74:	d403      	bmi.n	8009e7e <__lo0bits+0x4e>
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	f102 0201 	add.w	r2, r2, #1
 8009e7c:	d003      	beq.n	8009e86 <__lo0bits+0x56>
 8009e7e:	6003      	str	r3, [r0, #0]
 8009e80:	e7e5      	b.n	8009e4e <__lo0bits+0x1e>
 8009e82:	2200      	movs	r2, #0
 8009e84:	e7e3      	b.n	8009e4e <__lo0bits+0x1e>
 8009e86:	2220      	movs	r2, #32
 8009e88:	e7e1      	b.n	8009e4e <__lo0bits+0x1e>
	...

08009e8c <__i2b>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	2101      	movs	r1, #1
 8009e92:	f7ff ff05 	bl	8009ca0 <_Balloc>
 8009e96:	4602      	mov	r2, r0
 8009e98:	b928      	cbnz	r0, 8009ea6 <__i2b+0x1a>
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <__i2b+0x24>)
 8009e9c:	4805      	ldr	r0, [pc, #20]	; (8009eb4 <__i2b+0x28>)
 8009e9e:	f240 1145 	movw	r1, #325	; 0x145
 8009ea2:	f000 fcb7 	bl	800a814 <__assert_func>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	6144      	str	r4, [r0, #20]
 8009eaa:	6103      	str	r3, [r0, #16]
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800afcc 	.word	0x0800afcc
 8009eb4:	0800afdd 	.word	0x0800afdd

08009eb8 <__multiply>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	4691      	mov	r9, r2
 8009ebe:	690a      	ldr	r2, [r1, #16]
 8009ec0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	bfb8      	it	lt
 8009ec8:	460b      	movlt	r3, r1
 8009eca:	460c      	mov	r4, r1
 8009ecc:	bfbc      	itt	lt
 8009ece:	464c      	movlt	r4, r9
 8009ed0:	4699      	movlt	r9, r3
 8009ed2:	6927      	ldr	r7, [r4, #16]
 8009ed4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ed8:	68a3      	ldr	r3, [r4, #8]
 8009eda:	6861      	ldr	r1, [r4, #4]
 8009edc:	eb07 060a 	add.w	r6, r7, sl
 8009ee0:	42b3      	cmp	r3, r6
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	bfb8      	it	lt
 8009ee6:	3101      	addlt	r1, #1
 8009ee8:	f7ff feda 	bl	8009ca0 <_Balloc>
 8009eec:	b930      	cbnz	r0, 8009efc <__multiply+0x44>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4b44      	ldr	r3, [pc, #272]	; (800a004 <__multiply+0x14c>)
 8009ef2:	4845      	ldr	r0, [pc, #276]	; (800a008 <__multiply+0x150>)
 8009ef4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009ef8:	f000 fc8c 	bl	800a814 <__assert_func>
 8009efc:	f100 0514 	add.w	r5, r0, #20
 8009f00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f04:	462b      	mov	r3, r5
 8009f06:	2200      	movs	r2, #0
 8009f08:	4543      	cmp	r3, r8
 8009f0a:	d321      	bcc.n	8009f50 <__multiply+0x98>
 8009f0c:	f104 0314 	add.w	r3, r4, #20
 8009f10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f14:	f109 0314 	add.w	r3, r9, #20
 8009f18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f1c:	9202      	str	r2, [sp, #8]
 8009f1e:	1b3a      	subs	r2, r7, r4
 8009f20:	3a15      	subs	r2, #21
 8009f22:	f022 0203 	bic.w	r2, r2, #3
 8009f26:	3204      	adds	r2, #4
 8009f28:	f104 0115 	add.w	r1, r4, #21
 8009f2c:	428f      	cmp	r7, r1
 8009f2e:	bf38      	it	cc
 8009f30:	2204      	movcc	r2, #4
 8009f32:	9201      	str	r2, [sp, #4]
 8009f34:	9a02      	ldr	r2, [sp, #8]
 8009f36:	9303      	str	r3, [sp, #12]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d80c      	bhi.n	8009f56 <__multiply+0x9e>
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	dd03      	ble.n	8009f48 <__multiply+0x90>
 8009f40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d05b      	beq.n	800a000 <__multiply+0x148>
 8009f48:	6106      	str	r6, [r0, #16]
 8009f4a:	b005      	add	sp, #20
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	f843 2b04 	str.w	r2, [r3], #4
 8009f54:	e7d8      	b.n	8009f08 <__multiply+0x50>
 8009f56:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f5a:	f1ba 0f00 	cmp.w	sl, #0
 8009f5e:	d024      	beq.n	8009faa <__multiply+0xf2>
 8009f60:	f104 0e14 	add.w	lr, r4, #20
 8009f64:	46a9      	mov	r9, r5
 8009f66:	f04f 0c00 	mov.w	ip, #0
 8009f6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f6e:	f8d9 1000 	ldr.w	r1, [r9]
 8009f72:	fa1f fb82 	uxth.w	fp, r2
 8009f76:	b289      	uxth	r1, r1
 8009f78:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f80:	f8d9 2000 	ldr.w	r2, [r9]
 8009f84:	4461      	add	r1, ip
 8009f86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f92:	b289      	uxth	r1, r1
 8009f94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f98:	4577      	cmp	r7, lr
 8009f9a:	f849 1b04 	str.w	r1, [r9], #4
 8009f9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fa2:	d8e2      	bhi.n	8009f6a <__multiply+0xb2>
 8009fa4:	9a01      	ldr	r2, [sp, #4]
 8009fa6:	f845 c002 	str.w	ip, [r5, r2]
 8009faa:	9a03      	ldr	r2, [sp, #12]
 8009fac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	f1b9 0f00 	cmp.w	r9, #0
 8009fb6:	d021      	beq.n	8009ffc <__multiply+0x144>
 8009fb8:	6829      	ldr	r1, [r5, #0]
 8009fba:	f104 0c14 	add.w	ip, r4, #20
 8009fbe:	46ae      	mov	lr, r5
 8009fc0:	f04f 0a00 	mov.w	sl, #0
 8009fc4:	f8bc b000 	ldrh.w	fp, [ip]
 8009fc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fcc:	fb09 220b 	mla	r2, r9, fp, r2
 8009fd0:	4452      	add	r2, sl
 8009fd2:	b289      	uxth	r1, r1
 8009fd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fd8:	f84e 1b04 	str.w	r1, [lr], #4
 8009fdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009fe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fe4:	f8be 1000 	ldrh.w	r1, [lr]
 8009fe8:	fb09 110a 	mla	r1, r9, sl, r1
 8009fec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009ff0:	4567      	cmp	r7, ip
 8009ff2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ff6:	d8e5      	bhi.n	8009fc4 <__multiply+0x10c>
 8009ff8:	9a01      	ldr	r2, [sp, #4]
 8009ffa:	50a9      	str	r1, [r5, r2]
 8009ffc:	3504      	adds	r5, #4
 8009ffe:	e799      	b.n	8009f34 <__multiply+0x7c>
 800a000:	3e01      	subs	r6, #1
 800a002:	e79b      	b.n	8009f3c <__multiply+0x84>
 800a004:	0800afcc 	.word	0x0800afcc
 800a008:	0800afdd 	.word	0x0800afdd

0800a00c <__pow5mult>:
 800a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4615      	mov	r5, r2
 800a012:	f012 0203 	ands.w	r2, r2, #3
 800a016:	4606      	mov	r6, r0
 800a018:	460f      	mov	r7, r1
 800a01a:	d007      	beq.n	800a02c <__pow5mult+0x20>
 800a01c:	4c25      	ldr	r4, [pc, #148]	; (800a0b4 <__pow5mult+0xa8>)
 800a01e:	3a01      	subs	r2, #1
 800a020:	2300      	movs	r3, #0
 800a022:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a026:	f7ff fe9d 	bl	8009d64 <__multadd>
 800a02a:	4607      	mov	r7, r0
 800a02c:	10ad      	asrs	r5, r5, #2
 800a02e:	d03d      	beq.n	800a0ac <__pow5mult+0xa0>
 800a030:	69f4      	ldr	r4, [r6, #28]
 800a032:	b97c      	cbnz	r4, 800a054 <__pow5mult+0x48>
 800a034:	2010      	movs	r0, #16
 800a036:	f7ff fd7f 	bl	8009b38 <malloc>
 800a03a:	4602      	mov	r2, r0
 800a03c:	61f0      	str	r0, [r6, #28]
 800a03e:	b928      	cbnz	r0, 800a04c <__pow5mult+0x40>
 800a040:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <__pow5mult+0xac>)
 800a042:	481e      	ldr	r0, [pc, #120]	; (800a0bc <__pow5mult+0xb0>)
 800a044:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a048:	f000 fbe4 	bl	800a814 <__assert_func>
 800a04c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a050:	6004      	str	r4, [r0, #0]
 800a052:	60c4      	str	r4, [r0, #12]
 800a054:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a05c:	b94c      	cbnz	r4, 800a072 <__pow5mult+0x66>
 800a05e:	f240 2171 	movw	r1, #625	; 0x271
 800a062:	4630      	mov	r0, r6
 800a064:	f7ff ff12 	bl	8009e8c <__i2b>
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a06e:	4604      	mov	r4, r0
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	f04f 0900 	mov.w	r9, #0
 800a076:	07eb      	lsls	r3, r5, #31
 800a078:	d50a      	bpl.n	800a090 <__pow5mult+0x84>
 800a07a:	4639      	mov	r1, r7
 800a07c:	4622      	mov	r2, r4
 800a07e:	4630      	mov	r0, r6
 800a080:	f7ff ff1a 	bl	8009eb8 <__multiply>
 800a084:	4639      	mov	r1, r7
 800a086:	4680      	mov	r8, r0
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff fe49 	bl	8009d20 <_Bfree>
 800a08e:	4647      	mov	r7, r8
 800a090:	106d      	asrs	r5, r5, #1
 800a092:	d00b      	beq.n	800a0ac <__pow5mult+0xa0>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	b938      	cbnz	r0, 800a0a8 <__pow5mult+0x9c>
 800a098:	4622      	mov	r2, r4
 800a09a:	4621      	mov	r1, r4
 800a09c:	4630      	mov	r0, r6
 800a09e:	f7ff ff0b 	bl	8009eb8 <__multiply>
 800a0a2:	6020      	str	r0, [r4, #0]
 800a0a4:	f8c0 9000 	str.w	r9, [r0]
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	e7e4      	b.n	800a076 <__pow5mult+0x6a>
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b2:	bf00      	nop
 800a0b4:	0800b128 	.word	0x0800b128
 800a0b8:	0800af5d 	.word	0x0800af5d
 800a0bc:	0800afdd 	.word	0x0800afdd

0800a0c0 <__lshift>:
 800a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	6849      	ldr	r1, [r1, #4]
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	4691      	mov	r9, r2
 800a0d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0d8:	f108 0601 	add.w	r6, r8, #1
 800a0dc:	42b3      	cmp	r3, r6
 800a0de:	db0b      	blt.n	800a0f8 <__lshift+0x38>
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff fddd 	bl	8009ca0 <_Balloc>
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	b948      	cbnz	r0, 800a0fe <__lshift+0x3e>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4b28      	ldr	r3, [pc, #160]	; (800a190 <__lshift+0xd0>)
 800a0ee:	4829      	ldr	r0, [pc, #164]	; (800a194 <__lshift+0xd4>)
 800a0f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a0f4:	f000 fb8e 	bl	800a814 <__assert_func>
 800a0f8:	3101      	adds	r1, #1
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	e7ee      	b.n	800a0dc <__lshift+0x1c>
 800a0fe:	2300      	movs	r3, #0
 800a100:	f100 0114 	add.w	r1, r0, #20
 800a104:	f100 0210 	add.w	r2, r0, #16
 800a108:	4618      	mov	r0, r3
 800a10a:	4553      	cmp	r3, sl
 800a10c:	db33      	blt.n	800a176 <__lshift+0xb6>
 800a10e:	6920      	ldr	r0, [r4, #16]
 800a110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a114:	f104 0314 	add.w	r3, r4, #20
 800a118:	f019 091f 	ands.w	r9, r9, #31
 800a11c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a120:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a124:	d02b      	beq.n	800a17e <__lshift+0xbe>
 800a126:	f1c9 0e20 	rsb	lr, r9, #32
 800a12a:	468a      	mov	sl, r1
 800a12c:	2200      	movs	r2, #0
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	fa00 f009 	lsl.w	r0, r0, r9
 800a134:	4310      	orrs	r0, r2
 800a136:	f84a 0b04 	str.w	r0, [sl], #4
 800a13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13e:	459c      	cmp	ip, r3
 800a140:	fa22 f20e 	lsr.w	r2, r2, lr
 800a144:	d8f3      	bhi.n	800a12e <__lshift+0x6e>
 800a146:	ebac 0304 	sub.w	r3, ip, r4
 800a14a:	3b15      	subs	r3, #21
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	3304      	adds	r3, #4
 800a152:	f104 0015 	add.w	r0, r4, #21
 800a156:	4584      	cmp	ip, r0
 800a158:	bf38      	it	cc
 800a15a:	2304      	movcc	r3, #4
 800a15c:	50ca      	str	r2, [r1, r3]
 800a15e:	b10a      	cbz	r2, 800a164 <__lshift+0xa4>
 800a160:	f108 0602 	add.w	r6, r8, #2
 800a164:	3e01      	subs	r6, #1
 800a166:	4638      	mov	r0, r7
 800a168:	612e      	str	r6, [r5, #16]
 800a16a:	4621      	mov	r1, r4
 800a16c:	f7ff fdd8 	bl	8009d20 <_Bfree>
 800a170:	4628      	mov	r0, r5
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	f842 0f04 	str.w	r0, [r2, #4]!
 800a17a:	3301      	adds	r3, #1
 800a17c:	e7c5      	b.n	800a10a <__lshift+0x4a>
 800a17e:	3904      	subs	r1, #4
 800a180:	f853 2b04 	ldr.w	r2, [r3], #4
 800a184:	f841 2f04 	str.w	r2, [r1, #4]!
 800a188:	459c      	cmp	ip, r3
 800a18a:	d8f9      	bhi.n	800a180 <__lshift+0xc0>
 800a18c:	e7ea      	b.n	800a164 <__lshift+0xa4>
 800a18e:	bf00      	nop
 800a190:	0800afcc 	.word	0x0800afcc
 800a194:	0800afdd 	.word	0x0800afdd

0800a198 <__mcmp>:
 800a198:	b530      	push	{r4, r5, lr}
 800a19a:	6902      	ldr	r2, [r0, #16]
 800a19c:	690c      	ldr	r4, [r1, #16]
 800a19e:	1b12      	subs	r2, r2, r4
 800a1a0:	d10e      	bne.n	800a1c0 <__mcmp+0x28>
 800a1a2:	f100 0314 	add.w	r3, r0, #20
 800a1a6:	3114      	adds	r1, #20
 800a1a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1b8:	42a5      	cmp	r5, r4
 800a1ba:	d003      	beq.n	800a1c4 <__mcmp+0x2c>
 800a1bc:	d305      	bcc.n	800a1ca <__mcmp+0x32>
 800a1be:	2201      	movs	r2, #1
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	bd30      	pop	{r4, r5, pc}
 800a1c4:	4283      	cmp	r3, r0
 800a1c6:	d3f3      	bcc.n	800a1b0 <__mcmp+0x18>
 800a1c8:	e7fa      	b.n	800a1c0 <__mcmp+0x28>
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ce:	e7f7      	b.n	800a1c0 <__mcmp+0x28>

0800a1d0 <__mdiff>:
 800a1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4690      	mov	r8, r2
 800a1de:	f7ff ffdb 	bl	800a198 <__mcmp>
 800a1e2:	1e05      	subs	r5, r0, #0
 800a1e4:	d110      	bne.n	800a208 <__mdiff+0x38>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7ff fd59 	bl	8009ca0 <_Balloc>
 800a1ee:	b930      	cbnz	r0, 800a1fe <__mdiff+0x2e>
 800a1f0:	4b3a      	ldr	r3, [pc, #232]	; (800a2dc <__mdiff+0x10c>)
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	f240 2137 	movw	r1, #567	; 0x237
 800a1f8:	4839      	ldr	r0, [pc, #228]	; (800a2e0 <__mdiff+0x110>)
 800a1fa:	f000 fb0b 	bl	800a814 <__assert_func>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	bfa4      	itt	ge
 800a20a:	4643      	movge	r3, r8
 800a20c:	46a0      	movge	r8, r4
 800a20e:	4630      	mov	r0, r6
 800a210:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a214:	bfa6      	itte	ge
 800a216:	461c      	movge	r4, r3
 800a218:	2500      	movge	r5, #0
 800a21a:	2501      	movlt	r5, #1
 800a21c:	f7ff fd40 	bl	8009ca0 <_Balloc>
 800a220:	b920      	cbnz	r0, 800a22c <__mdiff+0x5c>
 800a222:	4b2e      	ldr	r3, [pc, #184]	; (800a2dc <__mdiff+0x10c>)
 800a224:	4602      	mov	r2, r0
 800a226:	f240 2145 	movw	r1, #581	; 0x245
 800a22a:	e7e5      	b.n	800a1f8 <__mdiff+0x28>
 800a22c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a230:	6926      	ldr	r6, [r4, #16]
 800a232:	60c5      	str	r5, [r0, #12]
 800a234:	f104 0914 	add.w	r9, r4, #20
 800a238:	f108 0514 	add.w	r5, r8, #20
 800a23c:	f100 0e14 	add.w	lr, r0, #20
 800a240:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a244:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a248:	f108 0210 	add.w	r2, r8, #16
 800a24c:	46f2      	mov	sl, lr
 800a24e:	2100      	movs	r1, #0
 800a250:	f859 3b04 	ldr.w	r3, [r9], #4
 800a254:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a258:	fa11 f88b 	uxtah	r8, r1, fp
 800a25c:	b299      	uxth	r1, r3
 800a25e:	0c1b      	lsrs	r3, r3, #16
 800a260:	eba8 0801 	sub.w	r8, r8, r1
 800a264:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a268:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a26c:	fa1f f888 	uxth.w	r8, r8
 800a270:	1419      	asrs	r1, r3, #16
 800a272:	454e      	cmp	r6, r9
 800a274:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a278:	f84a 3b04 	str.w	r3, [sl], #4
 800a27c:	d8e8      	bhi.n	800a250 <__mdiff+0x80>
 800a27e:	1b33      	subs	r3, r6, r4
 800a280:	3b15      	subs	r3, #21
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	3304      	adds	r3, #4
 800a288:	3415      	adds	r4, #21
 800a28a:	42a6      	cmp	r6, r4
 800a28c:	bf38      	it	cc
 800a28e:	2304      	movcc	r3, #4
 800a290:	441d      	add	r5, r3
 800a292:	4473      	add	r3, lr
 800a294:	469e      	mov	lr, r3
 800a296:	462e      	mov	r6, r5
 800a298:	4566      	cmp	r6, ip
 800a29a:	d30e      	bcc.n	800a2ba <__mdiff+0xea>
 800a29c:	f10c 0203 	add.w	r2, ip, #3
 800a2a0:	1b52      	subs	r2, r2, r5
 800a2a2:	f022 0203 	bic.w	r2, r2, #3
 800a2a6:	3d03      	subs	r5, #3
 800a2a8:	45ac      	cmp	ip, r5
 800a2aa:	bf38      	it	cc
 800a2ac:	2200      	movcc	r2, #0
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a2b4:	b17a      	cbz	r2, 800a2d6 <__mdiff+0x106>
 800a2b6:	6107      	str	r7, [r0, #16]
 800a2b8:	e7a4      	b.n	800a204 <__mdiff+0x34>
 800a2ba:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2be:	fa11 f288 	uxtah	r2, r1, r8
 800a2c2:	1414      	asrs	r4, r2, #16
 800a2c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2c8:	b292      	uxth	r2, r2
 800a2ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a2ce:	f84e 2b04 	str.w	r2, [lr], #4
 800a2d2:	1421      	asrs	r1, r4, #16
 800a2d4:	e7e0      	b.n	800a298 <__mdiff+0xc8>
 800a2d6:	3f01      	subs	r7, #1
 800a2d8:	e7ea      	b.n	800a2b0 <__mdiff+0xe0>
 800a2da:	bf00      	nop
 800a2dc:	0800afcc 	.word	0x0800afcc
 800a2e0:	0800afdd 	.word	0x0800afdd

0800a2e4 <__d2b>:
 800a2e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2e8:	460f      	mov	r7, r1
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	ec59 8b10 	vmov	r8, r9, d0
 800a2f0:	4616      	mov	r6, r2
 800a2f2:	f7ff fcd5 	bl	8009ca0 <_Balloc>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	b930      	cbnz	r0, 800a308 <__d2b+0x24>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	4b24      	ldr	r3, [pc, #144]	; (800a390 <__d2b+0xac>)
 800a2fe:	4825      	ldr	r0, [pc, #148]	; (800a394 <__d2b+0xb0>)
 800a300:	f240 310f 	movw	r1, #783	; 0x30f
 800a304:	f000 fa86 	bl	800a814 <__assert_func>
 800a308:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a30c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a310:	bb2d      	cbnz	r5, 800a35e <__d2b+0x7a>
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	f1b8 0300 	subs.w	r3, r8, #0
 800a318:	d026      	beq.n	800a368 <__d2b+0x84>
 800a31a:	4668      	mov	r0, sp
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	f7ff fd87 	bl	8009e30 <__lo0bits>
 800a322:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a326:	b1e8      	cbz	r0, 800a364 <__d2b+0x80>
 800a328:	f1c0 0320 	rsb	r3, r0, #32
 800a32c:	fa02 f303 	lsl.w	r3, r2, r3
 800a330:	430b      	orrs	r3, r1
 800a332:	40c2      	lsrs	r2, r0
 800a334:	6163      	str	r3, [r4, #20]
 800a336:	9201      	str	r2, [sp, #4]
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	61a3      	str	r3, [r4, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	bf14      	ite	ne
 800a340:	2202      	movne	r2, #2
 800a342:	2201      	moveq	r2, #1
 800a344:	6122      	str	r2, [r4, #16]
 800a346:	b1bd      	cbz	r5, 800a378 <__d2b+0x94>
 800a348:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a34c:	4405      	add	r5, r0
 800a34e:	603d      	str	r5, [r7, #0]
 800a350:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a354:	6030      	str	r0, [r6, #0]
 800a356:	4620      	mov	r0, r4
 800a358:	b003      	add	sp, #12
 800a35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a35e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a362:	e7d6      	b.n	800a312 <__d2b+0x2e>
 800a364:	6161      	str	r1, [r4, #20]
 800a366:	e7e7      	b.n	800a338 <__d2b+0x54>
 800a368:	a801      	add	r0, sp, #4
 800a36a:	f7ff fd61 	bl	8009e30 <__lo0bits>
 800a36e:	9b01      	ldr	r3, [sp, #4]
 800a370:	6163      	str	r3, [r4, #20]
 800a372:	3020      	adds	r0, #32
 800a374:	2201      	movs	r2, #1
 800a376:	e7e5      	b.n	800a344 <__d2b+0x60>
 800a378:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a37c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a380:	6038      	str	r0, [r7, #0]
 800a382:	6918      	ldr	r0, [r3, #16]
 800a384:	f7ff fd34 	bl	8009df0 <__hi0bits>
 800a388:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a38c:	e7e2      	b.n	800a354 <__d2b+0x70>
 800a38e:	bf00      	nop
 800a390:	0800afcc 	.word	0x0800afcc
 800a394:	0800afdd 	.word	0x0800afdd

0800a398 <__ssputs_r>:
 800a398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a39c:	688e      	ldr	r6, [r1, #8]
 800a39e:	461f      	mov	r7, r3
 800a3a0:	42be      	cmp	r6, r7
 800a3a2:	680b      	ldr	r3, [r1, #0]
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4690      	mov	r8, r2
 800a3aa:	d82c      	bhi.n	800a406 <__ssputs_r+0x6e>
 800a3ac:	898a      	ldrh	r2, [r1, #12]
 800a3ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3b2:	d026      	beq.n	800a402 <__ssputs_r+0x6a>
 800a3b4:	6965      	ldr	r5, [r4, #20]
 800a3b6:	6909      	ldr	r1, [r1, #16]
 800a3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3bc:	eba3 0901 	sub.w	r9, r3, r1
 800a3c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3c4:	1c7b      	adds	r3, r7, #1
 800a3c6:	444b      	add	r3, r9
 800a3c8:	106d      	asrs	r5, r5, #1
 800a3ca:	429d      	cmp	r5, r3
 800a3cc:	bf38      	it	cc
 800a3ce:	461d      	movcc	r5, r3
 800a3d0:	0553      	lsls	r3, r2, #21
 800a3d2:	d527      	bpl.n	800a424 <__ssputs_r+0x8c>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	f7ff fbd7 	bl	8009b88 <_malloc_r>
 800a3da:	4606      	mov	r6, r0
 800a3dc:	b360      	cbz	r0, 800a438 <__ssputs_r+0xa0>
 800a3de:	6921      	ldr	r1, [r4, #16]
 800a3e0:	464a      	mov	r2, r9
 800a3e2:	f000 fa09 	bl	800a7f8 <memcpy>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	6126      	str	r6, [r4, #16]
 800a3f4:	6165      	str	r5, [r4, #20]
 800a3f6:	444e      	add	r6, r9
 800a3f8:	eba5 0509 	sub.w	r5, r5, r9
 800a3fc:	6026      	str	r6, [r4, #0]
 800a3fe:	60a5      	str	r5, [r4, #8]
 800a400:	463e      	mov	r6, r7
 800a402:	42be      	cmp	r6, r7
 800a404:	d900      	bls.n	800a408 <__ssputs_r+0x70>
 800a406:	463e      	mov	r6, r7
 800a408:	6820      	ldr	r0, [r4, #0]
 800a40a:	4632      	mov	r2, r6
 800a40c:	4641      	mov	r1, r8
 800a40e:	f000 f9c9 	bl	800a7a4 <memmove>
 800a412:	68a3      	ldr	r3, [r4, #8]
 800a414:	1b9b      	subs	r3, r3, r6
 800a416:	60a3      	str	r3, [r4, #8]
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	4433      	add	r3, r6
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	2000      	movs	r0, #0
 800a420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a424:	462a      	mov	r2, r5
 800a426:	f000 fa3b 	bl	800a8a0 <_realloc_r>
 800a42a:	4606      	mov	r6, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d1e0      	bne.n	800a3f2 <__ssputs_r+0x5a>
 800a430:	6921      	ldr	r1, [r4, #16]
 800a432:	4650      	mov	r0, sl
 800a434:	f7ff fb34 	bl	8009aa0 <_free_r>
 800a438:	230c      	movs	r3, #12
 800a43a:	f8ca 3000 	str.w	r3, [sl]
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a444:	81a3      	strh	r3, [r4, #12]
 800a446:	f04f 30ff 	mov.w	r0, #4294967295
 800a44a:	e7e9      	b.n	800a420 <__ssputs_r+0x88>

0800a44c <_svfiprintf_r>:
 800a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a450:	4698      	mov	r8, r3
 800a452:	898b      	ldrh	r3, [r1, #12]
 800a454:	061b      	lsls	r3, r3, #24
 800a456:	b09d      	sub	sp, #116	; 0x74
 800a458:	4607      	mov	r7, r0
 800a45a:	460d      	mov	r5, r1
 800a45c:	4614      	mov	r4, r2
 800a45e:	d50e      	bpl.n	800a47e <_svfiprintf_r+0x32>
 800a460:	690b      	ldr	r3, [r1, #16]
 800a462:	b963      	cbnz	r3, 800a47e <_svfiprintf_r+0x32>
 800a464:	2140      	movs	r1, #64	; 0x40
 800a466:	f7ff fb8f 	bl	8009b88 <_malloc_r>
 800a46a:	6028      	str	r0, [r5, #0]
 800a46c:	6128      	str	r0, [r5, #16]
 800a46e:	b920      	cbnz	r0, 800a47a <_svfiprintf_r+0x2e>
 800a470:	230c      	movs	r3, #12
 800a472:	603b      	str	r3, [r7, #0]
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	e0d0      	b.n	800a61c <_svfiprintf_r+0x1d0>
 800a47a:	2340      	movs	r3, #64	; 0x40
 800a47c:	616b      	str	r3, [r5, #20]
 800a47e:	2300      	movs	r3, #0
 800a480:	9309      	str	r3, [sp, #36]	; 0x24
 800a482:	2320      	movs	r3, #32
 800a484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a488:	f8cd 800c 	str.w	r8, [sp, #12]
 800a48c:	2330      	movs	r3, #48	; 0x30
 800a48e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a634 <_svfiprintf_r+0x1e8>
 800a492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a496:	f04f 0901 	mov.w	r9, #1
 800a49a:	4623      	mov	r3, r4
 800a49c:	469a      	mov	sl, r3
 800a49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4a2:	b10a      	cbz	r2, 800a4a8 <_svfiprintf_r+0x5c>
 800a4a4:	2a25      	cmp	r2, #37	; 0x25
 800a4a6:	d1f9      	bne.n	800a49c <_svfiprintf_r+0x50>
 800a4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ac:	d00b      	beq.n	800a4c6 <_svfiprintf_r+0x7a>
 800a4ae:	465b      	mov	r3, fp
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f7ff ff6f 	bl	800a398 <__ssputs_r>
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f000 80a9 	beq.w	800a612 <_svfiprintf_r+0x1c6>
 800a4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4c2:	445a      	add	r2, fp
 800a4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80a1 	beq.w	800a612 <_svfiprintf_r+0x1c6>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4da:	f10a 0a01 	add.w	sl, sl, #1
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	9307      	str	r3, [sp, #28]
 800a4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e8:	4654      	mov	r4, sl
 800a4ea:	2205      	movs	r2, #5
 800a4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f0:	4850      	ldr	r0, [pc, #320]	; (800a634 <_svfiprintf_r+0x1e8>)
 800a4f2:	f7f5 fef5 	bl	80002e0 <memchr>
 800a4f6:	9a04      	ldr	r2, [sp, #16]
 800a4f8:	b9d8      	cbnz	r0, 800a532 <_svfiprintf_r+0xe6>
 800a4fa:	06d0      	lsls	r0, r2, #27
 800a4fc:	bf44      	itt	mi
 800a4fe:	2320      	movmi	r3, #32
 800a500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a504:	0711      	lsls	r1, r2, #28
 800a506:	bf44      	itt	mi
 800a508:	232b      	movmi	r3, #43	; 0x2b
 800a50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a50e:	f89a 3000 	ldrb.w	r3, [sl]
 800a512:	2b2a      	cmp	r3, #42	; 0x2a
 800a514:	d015      	beq.n	800a542 <_svfiprintf_r+0xf6>
 800a516:	9a07      	ldr	r2, [sp, #28]
 800a518:	4654      	mov	r4, sl
 800a51a:	2000      	movs	r0, #0
 800a51c:	f04f 0c0a 	mov.w	ip, #10
 800a520:	4621      	mov	r1, r4
 800a522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a526:	3b30      	subs	r3, #48	; 0x30
 800a528:	2b09      	cmp	r3, #9
 800a52a:	d94d      	bls.n	800a5c8 <_svfiprintf_r+0x17c>
 800a52c:	b1b0      	cbz	r0, 800a55c <_svfiprintf_r+0x110>
 800a52e:	9207      	str	r2, [sp, #28]
 800a530:	e014      	b.n	800a55c <_svfiprintf_r+0x110>
 800a532:	eba0 0308 	sub.w	r3, r0, r8
 800a536:	fa09 f303 	lsl.w	r3, r9, r3
 800a53a:	4313      	orrs	r3, r2
 800a53c:	9304      	str	r3, [sp, #16]
 800a53e:	46a2      	mov	sl, r4
 800a540:	e7d2      	b.n	800a4e8 <_svfiprintf_r+0x9c>
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	1d19      	adds	r1, r3, #4
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	9103      	str	r1, [sp, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	bfbb      	ittet	lt
 800a54e:	425b      	neglt	r3, r3
 800a550:	f042 0202 	orrlt.w	r2, r2, #2
 800a554:	9307      	strge	r3, [sp, #28]
 800a556:	9307      	strlt	r3, [sp, #28]
 800a558:	bfb8      	it	lt
 800a55a:	9204      	strlt	r2, [sp, #16]
 800a55c:	7823      	ldrb	r3, [r4, #0]
 800a55e:	2b2e      	cmp	r3, #46	; 0x2e
 800a560:	d10c      	bne.n	800a57c <_svfiprintf_r+0x130>
 800a562:	7863      	ldrb	r3, [r4, #1]
 800a564:	2b2a      	cmp	r3, #42	; 0x2a
 800a566:	d134      	bne.n	800a5d2 <_svfiprintf_r+0x186>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	1d1a      	adds	r2, r3, #4
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	9203      	str	r2, [sp, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	bfb8      	it	lt
 800a574:	f04f 33ff 	movlt.w	r3, #4294967295
 800a578:	3402      	adds	r4, #2
 800a57a:	9305      	str	r3, [sp, #20]
 800a57c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a644 <_svfiprintf_r+0x1f8>
 800a580:	7821      	ldrb	r1, [r4, #0]
 800a582:	2203      	movs	r2, #3
 800a584:	4650      	mov	r0, sl
 800a586:	f7f5 feab 	bl	80002e0 <memchr>
 800a58a:	b138      	cbz	r0, 800a59c <_svfiprintf_r+0x150>
 800a58c:	9b04      	ldr	r3, [sp, #16]
 800a58e:	eba0 000a 	sub.w	r0, r0, sl
 800a592:	2240      	movs	r2, #64	; 0x40
 800a594:	4082      	lsls	r2, r0
 800a596:	4313      	orrs	r3, r2
 800a598:	3401      	adds	r4, #1
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a0:	4825      	ldr	r0, [pc, #148]	; (800a638 <_svfiprintf_r+0x1ec>)
 800a5a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a6:	2206      	movs	r2, #6
 800a5a8:	f7f5 fe9a 	bl	80002e0 <memchr>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d038      	beq.n	800a622 <_svfiprintf_r+0x1d6>
 800a5b0:	4b22      	ldr	r3, [pc, #136]	; (800a63c <_svfiprintf_r+0x1f0>)
 800a5b2:	bb1b      	cbnz	r3, 800a5fc <_svfiprintf_r+0x1b0>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	3307      	adds	r3, #7
 800a5b8:	f023 0307 	bic.w	r3, r3, #7
 800a5bc:	3308      	adds	r3, #8
 800a5be:	9303      	str	r3, [sp, #12]
 800a5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c2:	4433      	add	r3, r6
 800a5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c6:	e768      	b.n	800a49a <_svfiprintf_r+0x4e>
 800a5c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	e7a6      	b.n	800a520 <_svfiprintf_r+0xd4>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	3401      	adds	r4, #1
 800a5d6:	9305      	str	r3, [sp, #20]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	f04f 0c0a 	mov.w	ip, #10
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e4:	3a30      	subs	r2, #48	; 0x30
 800a5e6:	2a09      	cmp	r2, #9
 800a5e8:	d903      	bls.n	800a5f2 <_svfiprintf_r+0x1a6>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0c6      	beq.n	800a57c <_svfiprintf_r+0x130>
 800a5ee:	9105      	str	r1, [sp, #20]
 800a5f0:	e7c4      	b.n	800a57c <_svfiprintf_r+0x130>
 800a5f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e7f0      	b.n	800a5de <_svfiprintf_r+0x192>
 800a5fc:	ab03      	add	r3, sp, #12
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	462a      	mov	r2, r5
 800a602:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <_svfiprintf_r+0x1f4>)
 800a604:	a904      	add	r1, sp, #16
 800a606:	4638      	mov	r0, r7
 800a608:	f7fd feee 	bl	80083e8 <_printf_float>
 800a60c:	1c42      	adds	r2, r0, #1
 800a60e:	4606      	mov	r6, r0
 800a610:	d1d6      	bne.n	800a5c0 <_svfiprintf_r+0x174>
 800a612:	89ab      	ldrh	r3, [r5, #12]
 800a614:	065b      	lsls	r3, r3, #25
 800a616:	f53f af2d 	bmi.w	800a474 <_svfiprintf_r+0x28>
 800a61a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a61c:	b01d      	add	sp, #116	; 0x74
 800a61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a622:	ab03      	add	r3, sp, #12
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	462a      	mov	r2, r5
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <_svfiprintf_r+0x1f4>)
 800a62a:	a904      	add	r1, sp, #16
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7fe f963 	bl	80088f8 <_printf_i>
 800a632:	e7eb      	b.n	800a60c <_svfiprintf_r+0x1c0>
 800a634:	0800b134 	.word	0x0800b134
 800a638:	0800b13e 	.word	0x0800b13e
 800a63c:	080083e9 	.word	0x080083e9
 800a640:	0800a399 	.word	0x0800a399
 800a644:	0800b13a 	.word	0x0800b13a

0800a648 <__sflush_r>:
 800a648:	898a      	ldrh	r2, [r1, #12]
 800a64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a64e:	4605      	mov	r5, r0
 800a650:	0710      	lsls	r0, r2, #28
 800a652:	460c      	mov	r4, r1
 800a654:	d458      	bmi.n	800a708 <__sflush_r+0xc0>
 800a656:	684b      	ldr	r3, [r1, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	dc05      	bgt.n	800a668 <__sflush_r+0x20>
 800a65c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dc02      	bgt.n	800a668 <__sflush_r+0x20>
 800a662:	2000      	movs	r0, #0
 800a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a66a:	2e00      	cmp	r6, #0
 800a66c:	d0f9      	beq.n	800a662 <__sflush_r+0x1a>
 800a66e:	2300      	movs	r3, #0
 800a670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a674:	682f      	ldr	r7, [r5, #0]
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	d032      	beq.n	800a6e2 <__sflush_r+0x9a>
 800a67c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	075a      	lsls	r2, r3, #29
 800a682:	d505      	bpl.n	800a690 <__sflush_r+0x48>
 800a684:	6863      	ldr	r3, [r4, #4]
 800a686:	1ac0      	subs	r0, r0, r3
 800a688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a68a:	b10b      	cbz	r3, 800a690 <__sflush_r+0x48>
 800a68c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a68e:	1ac0      	subs	r0, r0, r3
 800a690:	2300      	movs	r3, #0
 800a692:	4602      	mov	r2, r0
 800a694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a696:	6a21      	ldr	r1, [r4, #32]
 800a698:	4628      	mov	r0, r5
 800a69a:	47b0      	blx	r6
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	d106      	bne.n	800a6b0 <__sflush_r+0x68>
 800a6a2:	6829      	ldr	r1, [r5, #0]
 800a6a4:	291d      	cmp	r1, #29
 800a6a6:	d82b      	bhi.n	800a700 <__sflush_r+0xb8>
 800a6a8:	4a29      	ldr	r2, [pc, #164]	; (800a750 <__sflush_r+0x108>)
 800a6aa:	410a      	asrs	r2, r1
 800a6ac:	07d6      	lsls	r6, r2, #31
 800a6ae:	d427      	bmi.n	800a700 <__sflush_r+0xb8>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	6062      	str	r2, [r4, #4]
 800a6b4:	04d9      	lsls	r1, r3, #19
 800a6b6:	6922      	ldr	r2, [r4, #16]
 800a6b8:	6022      	str	r2, [r4, #0]
 800a6ba:	d504      	bpl.n	800a6c6 <__sflush_r+0x7e>
 800a6bc:	1c42      	adds	r2, r0, #1
 800a6be:	d101      	bne.n	800a6c4 <__sflush_r+0x7c>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b903      	cbnz	r3, 800a6c6 <__sflush_r+0x7e>
 800a6c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a6c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6c8:	602f      	str	r7, [r5, #0]
 800a6ca:	2900      	cmp	r1, #0
 800a6cc:	d0c9      	beq.n	800a662 <__sflush_r+0x1a>
 800a6ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d2:	4299      	cmp	r1, r3
 800a6d4:	d002      	beq.n	800a6dc <__sflush_r+0x94>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f7ff f9e2 	bl	8009aa0 <_free_r>
 800a6dc:	2000      	movs	r0, #0
 800a6de:	6360      	str	r0, [r4, #52]	; 0x34
 800a6e0:	e7c0      	b.n	800a664 <__sflush_r+0x1c>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	47b0      	blx	r6
 800a6e8:	1c41      	adds	r1, r0, #1
 800a6ea:	d1c8      	bne.n	800a67e <__sflush_r+0x36>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0c5      	beq.n	800a67e <__sflush_r+0x36>
 800a6f2:	2b1d      	cmp	r3, #29
 800a6f4:	d001      	beq.n	800a6fa <__sflush_r+0xb2>
 800a6f6:	2b16      	cmp	r3, #22
 800a6f8:	d101      	bne.n	800a6fe <__sflush_r+0xb6>
 800a6fa:	602f      	str	r7, [r5, #0]
 800a6fc:	e7b1      	b.n	800a662 <__sflush_r+0x1a>
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	e7ad      	b.n	800a664 <__sflush_r+0x1c>
 800a708:	690f      	ldr	r7, [r1, #16]
 800a70a:	2f00      	cmp	r7, #0
 800a70c:	d0a9      	beq.n	800a662 <__sflush_r+0x1a>
 800a70e:	0793      	lsls	r3, r2, #30
 800a710:	680e      	ldr	r6, [r1, #0]
 800a712:	bf08      	it	eq
 800a714:	694b      	ldreq	r3, [r1, #20]
 800a716:	600f      	str	r7, [r1, #0]
 800a718:	bf18      	it	ne
 800a71a:	2300      	movne	r3, #0
 800a71c:	eba6 0807 	sub.w	r8, r6, r7
 800a720:	608b      	str	r3, [r1, #8]
 800a722:	f1b8 0f00 	cmp.w	r8, #0
 800a726:	dd9c      	ble.n	800a662 <__sflush_r+0x1a>
 800a728:	6a21      	ldr	r1, [r4, #32]
 800a72a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a72c:	4643      	mov	r3, r8
 800a72e:	463a      	mov	r2, r7
 800a730:	4628      	mov	r0, r5
 800a732:	47b0      	blx	r6
 800a734:	2800      	cmp	r0, #0
 800a736:	dc06      	bgt.n	800a746 <__sflush_r+0xfe>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	e78e      	b.n	800a664 <__sflush_r+0x1c>
 800a746:	4407      	add	r7, r0
 800a748:	eba8 0800 	sub.w	r8, r8, r0
 800a74c:	e7e9      	b.n	800a722 <__sflush_r+0xda>
 800a74e:	bf00      	nop
 800a750:	dfbffffe 	.word	0xdfbffffe

0800a754 <_fflush_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	690b      	ldr	r3, [r1, #16]
 800a758:	4605      	mov	r5, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	b913      	cbnz	r3, 800a764 <_fflush_r+0x10>
 800a75e:	2500      	movs	r5, #0
 800a760:	4628      	mov	r0, r5
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	b118      	cbz	r0, 800a76e <_fflush_r+0x1a>
 800a766:	6a03      	ldr	r3, [r0, #32]
 800a768:	b90b      	cbnz	r3, 800a76e <_fflush_r+0x1a>
 800a76a:	f7fe fa73 	bl	8008c54 <__sinit>
 800a76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0f3      	beq.n	800a75e <_fflush_r+0xa>
 800a776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a778:	07d0      	lsls	r0, r2, #31
 800a77a:	d404      	bmi.n	800a786 <_fflush_r+0x32>
 800a77c:	0599      	lsls	r1, r3, #22
 800a77e:	d402      	bmi.n	800a786 <_fflush_r+0x32>
 800a780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a782:	f7fe fb96 	bl	8008eb2 <__retarget_lock_acquire_recursive>
 800a786:	4628      	mov	r0, r5
 800a788:	4621      	mov	r1, r4
 800a78a:	f7ff ff5d 	bl	800a648 <__sflush_r>
 800a78e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a790:	07da      	lsls	r2, r3, #31
 800a792:	4605      	mov	r5, r0
 800a794:	d4e4      	bmi.n	800a760 <_fflush_r+0xc>
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	059b      	lsls	r3, r3, #22
 800a79a:	d4e1      	bmi.n	800a760 <_fflush_r+0xc>
 800a79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79e:	f7fe fb89 	bl	8008eb4 <__retarget_lock_release_recursive>
 800a7a2:	e7dd      	b.n	800a760 <_fflush_r+0xc>

0800a7a4 <memmove>:
 800a7a4:	4288      	cmp	r0, r1
 800a7a6:	b510      	push	{r4, lr}
 800a7a8:	eb01 0402 	add.w	r4, r1, r2
 800a7ac:	d902      	bls.n	800a7b4 <memmove+0x10>
 800a7ae:	4284      	cmp	r4, r0
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	d807      	bhi.n	800a7c4 <memmove+0x20>
 800a7b4:	1e43      	subs	r3, r0, #1
 800a7b6:	42a1      	cmp	r1, r4
 800a7b8:	d008      	beq.n	800a7cc <memmove+0x28>
 800a7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7c2:	e7f8      	b.n	800a7b6 <memmove+0x12>
 800a7c4:	4402      	add	r2, r0
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	428a      	cmp	r2, r1
 800a7ca:	d100      	bne.n	800a7ce <memmove+0x2a>
 800a7cc:	bd10      	pop	{r4, pc}
 800a7ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7d6:	e7f7      	b.n	800a7c8 <memmove+0x24>

0800a7d8 <_sbrk_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d06      	ldr	r5, [pc, #24]	; (800a7f4 <_sbrk_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	f7f6 fbfe 	bl	8000fe4 <_sbrk>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_sbrk_r+0x1a>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_sbrk_r+0x1a>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	2400047c 	.word	0x2400047c

0800a7f8 <memcpy>:
 800a7f8:	440a      	add	r2, r1
 800a7fa:	4291      	cmp	r1, r2
 800a7fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a800:	d100      	bne.n	800a804 <memcpy+0xc>
 800a802:	4770      	bx	lr
 800a804:	b510      	push	{r4, lr}
 800a806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a80a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80e:	4291      	cmp	r1, r2
 800a810:	d1f9      	bne.n	800a806 <memcpy+0xe>
 800a812:	bd10      	pop	{r4, pc}

0800a814 <__assert_func>:
 800a814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a816:	4614      	mov	r4, r2
 800a818:	461a      	mov	r2, r3
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <__assert_func+0x2c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4605      	mov	r5, r0
 800a820:	68d8      	ldr	r0, [r3, #12]
 800a822:	b14c      	cbz	r4, 800a838 <__assert_func+0x24>
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <__assert_func+0x30>)
 800a826:	9100      	str	r1, [sp, #0]
 800a828:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a82c:	4906      	ldr	r1, [pc, #24]	; (800a848 <__assert_func+0x34>)
 800a82e:	462b      	mov	r3, r5
 800a830:	f000 f872 	bl	800a918 <fiprintf>
 800a834:	f000 f882 	bl	800a93c <abort>
 800a838:	4b04      	ldr	r3, [pc, #16]	; (800a84c <__assert_func+0x38>)
 800a83a:	461c      	mov	r4, r3
 800a83c:	e7f3      	b.n	800a826 <__assert_func+0x12>
 800a83e:	bf00      	nop
 800a840:	24000068 	.word	0x24000068
 800a844:	0800b14f 	.word	0x0800b14f
 800a848:	0800b15c 	.word	0x0800b15c
 800a84c:	0800b18a 	.word	0x0800b18a

0800a850 <_calloc_r>:
 800a850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a852:	fba1 2402 	umull	r2, r4, r1, r2
 800a856:	b94c      	cbnz	r4, 800a86c <_calloc_r+0x1c>
 800a858:	4611      	mov	r1, r2
 800a85a:	9201      	str	r2, [sp, #4]
 800a85c:	f7ff f994 	bl	8009b88 <_malloc_r>
 800a860:	9a01      	ldr	r2, [sp, #4]
 800a862:	4605      	mov	r5, r0
 800a864:	b930      	cbnz	r0, 800a874 <_calloc_r+0x24>
 800a866:	4628      	mov	r0, r5
 800a868:	b003      	add	sp, #12
 800a86a:	bd30      	pop	{r4, r5, pc}
 800a86c:	220c      	movs	r2, #12
 800a86e:	6002      	str	r2, [r0, #0]
 800a870:	2500      	movs	r5, #0
 800a872:	e7f8      	b.n	800a866 <_calloc_r+0x16>
 800a874:	4621      	mov	r1, r4
 800a876:	f7fe fa9f 	bl	8008db8 <memset>
 800a87a:	e7f4      	b.n	800a866 <_calloc_r+0x16>

0800a87c <__ascii_mbtowc>:
 800a87c:	b082      	sub	sp, #8
 800a87e:	b901      	cbnz	r1, 800a882 <__ascii_mbtowc+0x6>
 800a880:	a901      	add	r1, sp, #4
 800a882:	b142      	cbz	r2, 800a896 <__ascii_mbtowc+0x1a>
 800a884:	b14b      	cbz	r3, 800a89a <__ascii_mbtowc+0x1e>
 800a886:	7813      	ldrb	r3, [r2, #0]
 800a888:	600b      	str	r3, [r1, #0]
 800a88a:	7812      	ldrb	r2, [r2, #0]
 800a88c:	1e10      	subs	r0, r2, #0
 800a88e:	bf18      	it	ne
 800a890:	2001      	movne	r0, #1
 800a892:	b002      	add	sp, #8
 800a894:	4770      	bx	lr
 800a896:	4610      	mov	r0, r2
 800a898:	e7fb      	b.n	800a892 <__ascii_mbtowc+0x16>
 800a89a:	f06f 0001 	mvn.w	r0, #1
 800a89e:	e7f8      	b.n	800a892 <__ascii_mbtowc+0x16>

0800a8a0 <_realloc_r>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4614      	mov	r4, r2
 800a8a8:	460e      	mov	r6, r1
 800a8aa:	b921      	cbnz	r1, 800a8b6 <_realloc_r+0x16>
 800a8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	f7ff b969 	b.w	8009b88 <_malloc_r>
 800a8b6:	b92a      	cbnz	r2, 800a8c4 <_realloc_r+0x24>
 800a8b8:	f7ff f8f2 	bl	8009aa0 <_free_r>
 800a8bc:	4625      	mov	r5, r4
 800a8be:	4628      	mov	r0, r5
 800a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c4:	f000 f841 	bl	800a94a <_malloc_usable_size_r>
 800a8c8:	4284      	cmp	r4, r0
 800a8ca:	4607      	mov	r7, r0
 800a8cc:	d802      	bhi.n	800a8d4 <_realloc_r+0x34>
 800a8ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8d2:	d812      	bhi.n	800a8fa <_realloc_r+0x5a>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	f7ff f956 	bl	8009b88 <_malloc_r>
 800a8dc:	4605      	mov	r5, r0
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d0ed      	beq.n	800a8be <_realloc_r+0x1e>
 800a8e2:	42bc      	cmp	r4, r7
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	bf28      	it	cs
 800a8ea:	463a      	movcs	r2, r7
 800a8ec:	f7ff ff84 	bl	800a7f8 <memcpy>
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4640      	mov	r0, r8
 800a8f4:	f7ff f8d4 	bl	8009aa0 <_free_r>
 800a8f8:	e7e1      	b.n	800a8be <_realloc_r+0x1e>
 800a8fa:	4635      	mov	r5, r6
 800a8fc:	e7df      	b.n	800a8be <_realloc_r+0x1e>

0800a8fe <__ascii_wctomb>:
 800a8fe:	b149      	cbz	r1, 800a914 <__ascii_wctomb+0x16>
 800a900:	2aff      	cmp	r2, #255	; 0xff
 800a902:	bf85      	ittet	hi
 800a904:	238a      	movhi	r3, #138	; 0x8a
 800a906:	6003      	strhi	r3, [r0, #0]
 800a908:	700a      	strbls	r2, [r1, #0]
 800a90a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a90e:	bf98      	it	ls
 800a910:	2001      	movls	r0, #1
 800a912:	4770      	bx	lr
 800a914:	4608      	mov	r0, r1
 800a916:	4770      	bx	lr

0800a918 <fiprintf>:
 800a918:	b40e      	push	{r1, r2, r3}
 800a91a:	b503      	push	{r0, r1, lr}
 800a91c:	4601      	mov	r1, r0
 800a91e:	ab03      	add	r3, sp, #12
 800a920:	4805      	ldr	r0, [pc, #20]	; (800a938 <fiprintf+0x20>)
 800a922:	f853 2b04 	ldr.w	r2, [r3], #4
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	f000 f83f 	bl	800a9ac <_vfiprintf_r>
 800a92e:	b002      	add	sp, #8
 800a930:	f85d eb04 	ldr.w	lr, [sp], #4
 800a934:	b003      	add	sp, #12
 800a936:	4770      	bx	lr
 800a938:	24000068 	.word	0x24000068

0800a93c <abort>:
 800a93c:	b508      	push	{r3, lr}
 800a93e:	2006      	movs	r0, #6
 800a940:	f000 fa0c 	bl	800ad5c <raise>
 800a944:	2001      	movs	r0, #1
 800a946:	f7f6 fad5 	bl	8000ef4 <_exit>

0800a94a <_malloc_usable_size_r>:
 800a94a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a94e:	1f18      	subs	r0, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	bfbc      	itt	lt
 800a954:	580b      	ldrlt	r3, [r1, r0]
 800a956:	18c0      	addlt	r0, r0, r3
 800a958:	4770      	bx	lr

0800a95a <__sfputc_r>:
 800a95a:	6893      	ldr	r3, [r2, #8]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	b410      	push	{r4}
 800a962:	6093      	str	r3, [r2, #8]
 800a964:	da08      	bge.n	800a978 <__sfputc_r+0x1e>
 800a966:	6994      	ldr	r4, [r2, #24]
 800a968:	42a3      	cmp	r3, r4
 800a96a:	db01      	blt.n	800a970 <__sfputc_r+0x16>
 800a96c:	290a      	cmp	r1, #10
 800a96e:	d103      	bne.n	800a978 <__sfputc_r+0x1e>
 800a970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a974:	f000 b934 	b.w	800abe0 <__swbuf_r>
 800a978:	6813      	ldr	r3, [r2, #0]
 800a97a:	1c58      	adds	r0, r3, #1
 800a97c:	6010      	str	r0, [r2, #0]
 800a97e:	7019      	strb	r1, [r3, #0]
 800a980:	4608      	mov	r0, r1
 800a982:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <__sfputs_r>:
 800a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98a:	4606      	mov	r6, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	4614      	mov	r4, r2
 800a990:	18d5      	adds	r5, r2, r3
 800a992:	42ac      	cmp	r4, r5
 800a994:	d101      	bne.n	800a99a <__sfputs_r+0x12>
 800a996:	2000      	movs	r0, #0
 800a998:	e007      	b.n	800a9aa <__sfputs_r+0x22>
 800a99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99e:	463a      	mov	r2, r7
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff ffda 	bl	800a95a <__sfputc_r>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	d1f3      	bne.n	800a992 <__sfputs_r+0xa>
 800a9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9ac <_vfiprintf_r>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	b09d      	sub	sp, #116	; 0x74
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	4698      	mov	r8, r3
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	b118      	cbz	r0, 800a9c4 <_vfiprintf_r+0x18>
 800a9bc:	6a03      	ldr	r3, [r0, #32]
 800a9be:	b90b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x18>
 800a9c0:	f7fe f948 	bl	8008c54 <__sinit>
 800a9c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9c6:	07d9      	lsls	r1, r3, #31
 800a9c8:	d405      	bmi.n	800a9d6 <_vfiprintf_r+0x2a>
 800a9ca:	89ab      	ldrh	r3, [r5, #12]
 800a9cc:	059a      	lsls	r2, r3, #22
 800a9ce:	d402      	bmi.n	800a9d6 <_vfiprintf_r+0x2a>
 800a9d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9d2:	f7fe fa6e 	bl	8008eb2 <__retarget_lock_acquire_recursive>
 800a9d6:	89ab      	ldrh	r3, [r5, #12]
 800a9d8:	071b      	lsls	r3, r3, #28
 800a9da:	d501      	bpl.n	800a9e0 <_vfiprintf_r+0x34>
 800a9dc:	692b      	ldr	r3, [r5, #16]
 800a9de:	b99b      	cbnz	r3, 800aa08 <_vfiprintf_r+0x5c>
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f000 f93a 	bl	800ac5c <__swsetup_r>
 800a9e8:	b170      	cbz	r0, 800aa08 <_vfiprintf_r+0x5c>
 800a9ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ec:	07dc      	lsls	r4, r3, #31
 800a9ee:	d504      	bpl.n	800a9fa <_vfiprintf_r+0x4e>
 800a9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f4:	b01d      	add	sp, #116	; 0x74
 800a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	0598      	lsls	r0, r3, #22
 800a9fe:	d4f7      	bmi.n	800a9f0 <_vfiprintf_r+0x44>
 800aa00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa02:	f7fe fa57 	bl	8008eb4 <__retarget_lock_release_recursive>
 800aa06:	e7f3      	b.n	800a9f0 <_vfiprintf_r+0x44>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0c:	2320      	movs	r3, #32
 800aa0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa12:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa16:	2330      	movs	r3, #48	; 0x30
 800aa18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800abcc <_vfiprintf_r+0x220>
 800aa1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa20:	f04f 0901 	mov.w	r9, #1
 800aa24:	4623      	mov	r3, r4
 800aa26:	469a      	mov	sl, r3
 800aa28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa2c:	b10a      	cbz	r2, 800aa32 <_vfiprintf_r+0x86>
 800aa2e:	2a25      	cmp	r2, #37	; 0x25
 800aa30:	d1f9      	bne.n	800aa26 <_vfiprintf_r+0x7a>
 800aa32:	ebba 0b04 	subs.w	fp, sl, r4
 800aa36:	d00b      	beq.n	800aa50 <_vfiprintf_r+0xa4>
 800aa38:	465b      	mov	r3, fp
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f7ff ffa2 	bl	800a988 <__sfputs_r>
 800aa44:	3001      	adds	r0, #1
 800aa46:	f000 80a9 	beq.w	800ab9c <_vfiprintf_r+0x1f0>
 800aa4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa4c:	445a      	add	r2, fp
 800aa4e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa50:	f89a 3000 	ldrb.w	r3, [sl]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 80a1 	beq.w	800ab9c <_vfiprintf_r+0x1f0>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa64:	f10a 0a01 	add.w	sl, sl, #1
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	9307      	str	r3, [sp, #28]
 800aa6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa70:	931a      	str	r3, [sp, #104]	; 0x68
 800aa72:	4654      	mov	r4, sl
 800aa74:	2205      	movs	r2, #5
 800aa76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa7a:	4854      	ldr	r0, [pc, #336]	; (800abcc <_vfiprintf_r+0x220>)
 800aa7c:	f7f5 fc30 	bl	80002e0 <memchr>
 800aa80:	9a04      	ldr	r2, [sp, #16]
 800aa82:	b9d8      	cbnz	r0, 800aabc <_vfiprintf_r+0x110>
 800aa84:	06d1      	lsls	r1, r2, #27
 800aa86:	bf44      	itt	mi
 800aa88:	2320      	movmi	r3, #32
 800aa8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa8e:	0713      	lsls	r3, r2, #28
 800aa90:	bf44      	itt	mi
 800aa92:	232b      	movmi	r3, #43	; 0x2b
 800aa94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa98:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9e:	d015      	beq.n	800aacc <_vfiprintf_r+0x120>
 800aaa0:	9a07      	ldr	r2, [sp, #28]
 800aaa2:	4654      	mov	r4, sl
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f04f 0c0a 	mov.w	ip, #10
 800aaaa:	4621      	mov	r1, r4
 800aaac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aab0:	3b30      	subs	r3, #48	; 0x30
 800aab2:	2b09      	cmp	r3, #9
 800aab4:	d94d      	bls.n	800ab52 <_vfiprintf_r+0x1a6>
 800aab6:	b1b0      	cbz	r0, 800aae6 <_vfiprintf_r+0x13a>
 800aab8:	9207      	str	r2, [sp, #28]
 800aaba:	e014      	b.n	800aae6 <_vfiprintf_r+0x13a>
 800aabc:	eba0 0308 	sub.w	r3, r0, r8
 800aac0:	fa09 f303 	lsl.w	r3, r9, r3
 800aac4:	4313      	orrs	r3, r2
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	46a2      	mov	sl, r4
 800aaca:	e7d2      	b.n	800aa72 <_vfiprintf_r+0xc6>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	1d19      	adds	r1, r3, #4
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	9103      	str	r1, [sp, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfbb      	ittet	lt
 800aad8:	425b      	neglt	r3, r3
 800aada:	f042 0202 	orrlt.w	r2, r2, #2
 800aade:	9307      	strge	r3, [sp, #28]
 800aae0:	9307      	strlt	r3, [sp, #28]
 800aae2:	bfb8      	it	lt
 800aae4:	9204      	strlt	r2, [sp, #16]
 800aae6:	7823      	ldrb	r3, [r4, #0]
 800aae8:	2b2e      	cmp	r3, #46	; 0x2e
 800aaea:	d10c      	bne.n	800ab06 <_vfiprintf_r+0x15a>
 800aaec:	7863      	ldrb	r3, [r4, #1]
 800aaee:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf0:	d134      	bne.n	800ab5c <_vfiprintf_r+0x1b0>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	1d1a      	adds	r2, r3, #4
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	9203      	str	r2, [sp, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfb8      	it	lt
 800aafe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab02:	3402      	adds	r4, #2
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800abdc <_vfiprintf_r+0x230>
 800ab0a:	7821      	ldrb	r1, [r4, #0]
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	4650      	mov	r0, sl
 800ab10:	f7f5 fbe6 	bl	80002e0 <memchr>
 800ab14:	b138      	cbz	r0, 800ab26 <_vfiprintf_r+0x17a>
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	eba0 000a 	sub.w	r0, r0, sl
 800ab1c:	2240      	movs	r2, #64	; 0x40
 800ab1e:	4082      	lsls	r2, r0
 800ab20:	4313      	orrs	r3, r2
 800ab22:	3401      	adds	r4, #1
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2a:	4829      	ldr	r0, [pc, #164]	; (800abd0 <_vfiprintf_r+0x224>)
 800ab2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab30:	2206      	movs	r2, #6
 800ab32:	f7f5 fbd5 	bl	80002e0 <memchr>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d03f      	beq.n	800abba <_vfiprintf_r+0x20e>
 800ab3a:	4b26      	ldr	r3, [pc, #152]	; (800abd4 <_vfiprintf_r+0x228>)
 800ab3c:	bb1b      	cbnz	r3, 800ab86 <_vfiprintf_r+0x1da>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	3307      	adds	r3, #7
 800ab42:	f023 0307 	bic.w	r3, r3, #7
 800ab46:	3308      	adds	r3, #8
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4c:	443b      	add	r3, r7
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	e768      	b.n	800aa24 <_vfiprintf_r+0x78>
 800ab52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab56:	460c      	mov	r4, r1
 800ab58:	2001      	movs	r0, #1
 800ab5a:	e7a6      	b.n	800aaaa <_vfiprintf_r+0xfe>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	3401      	adds	r4, #1
 800ab60:	9305      	str	r3, [sp, #20]
 800ab62:	4619      	mov	r1, r3
 800ab64:	f04f 0c0a 	mov.w	ip, #10
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab6e:	3a30      	subs	r2, #48	; 0x30
 800ab70:	2a09      	cmp	r2, #9
 800ab72:	d903      	bls.n	800ab7c <_vfiprintf_r+0x1d0>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d0c6      	beq.n	800ab06 <_vfiprintf_r+0x15a>
 800ab78:	9105      	str	r1, [sp, #20]
 800ab7a:	e7c4      	b.n	800ab06 <_vfiprintf_r+0x15a>
 800ab7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab80:	4604      	mov	r4, r0
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7f0      	b.n	800ab68 <_vfiprintf_r+0x1bc>
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4b12      	ldr	r3, [pc, #72]	; (800abd8 <_vfiprintf_r+0x22c>)
 800ab8e:	a904      	add	r1, sp, #16
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7fd fc29 	bl	80083e8 <_printf_float>
 800ab96:	4607      	mov	r7, r0
 800ab98:	1c78      	adds	r0, r7, #1
 800ab9a:	d1d6      	bne.n	800ab4a <_vfiprintf_r+0x19e>
 800ab9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab9e:	07d9      	lsls	r1, r3, #31
 800aba0:	d405      	bmi.n	800abae <_vfiprintf_r+0x202>
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	059a      	lsls	r2, r3, #22
 800aba6:	d402      	bmi.n	800abae <_vfiprintf_r+0x202>
 800aba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abaa:	f7fe f983 	bl	8008eb4 <__retarget_lock_release_recursive>
 800abae:	89ab      	ldrh	r3, [r5, #12]
 800abb0:	065b      	lsls	r3, r3, #25
 800abb2:	f53f af1d 	bmi.w	800a9f0 <_vfiprintf_r+0x44>
 800abb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abb8:	e71c      	b.n	800a9f4 <_vfiprintf_r+0x48>
 800abba:	ab03      	add	r3, sp, #12
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	462a      	mov	r2, r5
 800abc0:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <_vfiprintf_r+0x22c>)
 800abc2:	a904      	add	r1, sp, #16
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7fd fe97 	bl	80088f8 <_printf_i>
 800abca:	e7e4      	b.n	800ab96 <_vfiprintf_r+0x1ea>
 800abcc:	0800b134 	.word	0x0800b134
 800abd0:	0800b13e 	.word	0x0800b13e
 800abd4:	080083e9 	.word	0x080083e9
 800abd8:	0800a989 	.word	0x0800a989
 800abdc:	0800b13a 	.word	0x0800b13a

0800abe0 <__swbuf_r>:
 800abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe2:	460e      	mov	r6, r1
 800abe4:	4614      	mov	r4, r2
 800abe6:	4605      	mov	r5, r0
 800abe8:	b118      	cbz	r0, 800abf2 <__swbuf_r+0x12>
 800abea:	6a03      	ldr	r3, [r0, #32]
 800abec:	b90b      	cbnz	r3, 800abf2 <__swbuf_r+0x12>
 800abee:	f7fe f831 	bl	8008c54 <__sinit>
 800abf2:	69a3      	ldr	r3, [r4, #24]
 800abf4:	60a3      	str	r3, [r4, #8]
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	071a      	lsls	r2, r3, #28
 800abfa:	d525      	bpl.n	800ac48 <__swbuf_r+0x68>
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	b31b      	cbz	r3, 800ac48 <__swbuf_r+0x68>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	6922      	ldr	r2, [r4, #16]
 800ac04:	1a98      	subs	r0, r3, r2
 800ac06:	6963      	ldr	r3, [r4, #20]
 800ac08:	b2f6      	uxtb	r6, r6
 800ac0a:	4283      	cmp	r3, r0
 800ac0c:	4637      	mov	r7, r6
 800ac0e:	dc04      	bgt.n	800ac1a <__swbuf_r+0x3a>
 800ac10:	4621      	mov	r1, r4
 800ac12:	4628      	mov	r0, r5
 800ac14:	f7ff fd9e 	bl	800a754 <_fflush_r>
 800ac18:	b9e0      	cbnz	r0, 800ac54 <__swbuf_r+0x74>
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	60a3      	str	r3, [r4, #8]
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	6022      	str	r2, [r4, #0]
 800ac26:	701e      	strb	r6, [r3, #0]
 800ac28:	6962      	ldr	r2, [r4, #20]
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d004      	beq.n	800ac3a <__swbuf_r+0x5a>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	07db      	lsls	r3, r3, #31
 800ac34:	d506      	bpl.n	800ac44 <__swbuf_r+0x64>
 800ac36:	2e0a      	cmp	r6, #10
 800ac38:	d104      	bne.n	800ac44 <__swbuf_r+0x64>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	f7ff fd89 	bl	800a754 <_fflush_r>
 800ac42:	b938      	cbnz	r0, 800ac54 <__swbuf_r+0x74>
 800ac44:	4638      	mov	r0, r7
 800ac46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 f806 	bl	800ac5c <__swsetup_r>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d0d5      	beq.n	800ac00 <__swbuf_r+0x20>
 800ac54:	f04f 37ff 	mov.w	r7, #4294967295
 800ac58:	e7f4      	b.n	800ac44 <__swbuf_r+0x64>
	...

0800ac5c <__swsetup_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <__swsetup_r+0xac>)
 800ac60:	4605      	mov	r5, r0
 800ac62:	6818      	ldr	r0, [r3, #0]
 800ac64:	460c      	mov	r4, r1
 800ac66:	b118      	cbz	r0, 800ac70 <__swsetup_r+0x14>
 800ac68:	6a03      	ldr	r3, [r0, #32]
 800ac6a:	b90b      	cbnz	r3, 800ac70 <__swsetup_r+0x14>
 800ac6c:	f7fd fff2 	bl	8008c54 <__sinit>
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac76:	0718      	lsls	r0, r3, #28
 800ac78:	d422      	bmi.n	800acc0 <__swsetup_r+0x64>
 800ac7a:	06d9      	lsls	r1, r3, #27
 800ac7c:	d407      	bmi.n	800ac8e <__swsetup_r+0x32>
 800ac7e:	2309      	movs	r3, #9
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	e034      	b.n	800acf8 <__swsetup_r+0x9c>
 800ac8e:	0758      	lsls	r0, r3, #29
 800ac90:	d512      	bpl.n	800acb8 <__swsetup_r+0x5c>
 800ac92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac94:	b141      	cbz	r1, 800aca8 <__swsetup_r+0x4c>
 800ac96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	d002      	beq.n	800aca4 <__swsetup_r+0x48>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f7fe fefe 	bl	8009aa0 <_free_r>
 800aca4:	2300      	movs	r3, #0
 800aca6:	6363      	str	r3, [r4, #52]	; 0x34
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	2300      	movs	r3, #0
 800acb2:	6063      	str	r3, [r4, #4]
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	6023      	str	r3, [r4, #0]
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	f043 0308 	orr.w	r3, r3, #8
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	6923      	ldr	r3, [r4, #16]
 800acc2:	b94b      	cbnz	r3, 800acd8 <__swsetup_r+0x7c>
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acce:	d003      	beq.n	800acd8 <__swsetup_r+0x7c>
 800acd0:	4621      	mov	r1, r4
 800acd2:	4628      	mov	r0, r5
 800acd4:	f000 f884 	bl	800ade0 <__smakebuf_r>
 800acd8:	89a0      	ldrh	r0, [r4, #12]
 800acda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acde:	f010 0301 	ands.w	r3, r0, #1
 800ace2:	d00a      	beq.n	800acfa <__swsetup_r+0x9e>
 800ace4:	2300      	movs	r3, #0
 800ace6:	60a3      	str	r3, [r4, #8]
 800ace8:	6963      	ldr	r3, [r4, #20]
 800acea:	425b      	negs	r3, r3
 800acec:	61a3      	str	r3, [r4, #24]
 800acee:	6923      	ldr	r3, [r4, #16]
 800acf0:	b943      	cbnz	r3, 800ad04 <__swsetup_r+0xa8>
 800acf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acf6:	d1c4      	bne.n	800ac82 <__swsetup_r+0x26>
 800acf8:	bd38      	pop	{r3, r4, r5, pc}
 800acfa:	0781      	lsls	r1, r0, #30
 800acfc:	bf58      	it	pl
 800acfe:	6963      	ldrpl	r3, [r4, #20]
 800ad00:	60a3      	str	r3, [r4, #8]
 800ad02:	e7f4      	b.n	800acee <__swsetup_r+0x92>
 800ad04:	2000      	movs	r0, #0
 800ad06:	e7f7      	b.n	800acf8 <__swsetup_r+0x9c>
 800ad08:	24000068 	.word	0x24000068

0800ad0c <_raise_r>:
 800ad0c:	291f      	cmp	r1, #31
 800ad0e:	b538      	push	{r3, r4, r5, lr}
 800ad10:	4604      	mov	r4, r0
 800ad12:	460d      	mov	r5, r1
 800ad14:	d904      	bls.n	800ad20 <_raise_r+0x14>
 800ad16:	2316      	movs	r3, #22
 800ad18:	6003      	str	r3, [r0, #0]
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ad22:	b112      	cbz	r2, 800ad2a <_raise_r+0x1e>
 800ad24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad28:	b94b      	cbnz	r3, 800ad3e <_raise_r+0x32>
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 f830 	bl	800ad90 <_getpid_r>
 800ad30:	462a      	mov	r2, r5
 800ad32:	4601      	mov	r1, r0
 800ad34:	4620      	mov	r0, r4
 800ad36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad3a:	f000 b817 	b.w	800ad6c <_kill_r>
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d00a      	beq.n	800ad58 <_raise_r+0x4c>
 800ad42:	1c59      	adds	r1, r3, #1
 800ad44:	d103      	bne.n	800ad4e <_raise_r+0x42>
 800ad46:	2316      	movs	r3, #22
 800ad48:	6003      	str	r3, [r0, #0]
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	e7e7      	b.n	800ad1e <_raise_r+0x12>
 800ad4e:	2400      	movs	r4, #0
 800ad50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad54:	4628      	mov	r0, r5
 800ad56:	4798      	blx	r3
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e7e0      	b.n	800ad1e <_raise_r+0x12>

0800ad5c <raise>:
 800ad5c:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <raise+0xc>)
 800ad5e:	4601      	mov	r1, r0
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f7ff bfd3 	b.w	800ad0c <_raise_r>
 800ad66:	bf00      	nop
 800ad68:	24000068 	.word	0x24000068

0800ad6c <_kill_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_kill_r+0x20>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	f7f6 f8ab 	bl	8000ed4 <_kill>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	d102      	bne.n	800ad88 <_kill_r+0x1c>
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	b103      	cbz	r3, 800ad88 <_kill_r+0x1c>
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	bf00      	nop
 800ad8c:	2400047c 	.word	0x2400047c

0800ad90 <_getpid_r>:
 800ad90:	f7f6 b898 	b.w	8000ec4 <_getpid>

0800ad94 <__swhatbuf_r>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	460c      	mov	r4, r1
 800ad98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	b096      	sub	sp, #88	; 0x58
 800ada0:	4615      	mov	r5, r2
 800ada2:	461e      	mov	r6, r3
 800ada4:	da0d      	bge.n	800adc2 <__swhatbuf_r+0x2e>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800adac:	f04f 0100 	mov.w	r1, #0
 800adb0:	bf0c      	ite	eq
 800adb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800adb6:	2340      	movne	r3, #64	; 0x40
 800adb8:	2000      	movs	r0, #0
 800adba:	6031      	str	r1, [r6, #0]
 800adbc:	602b      	str	r3, [r5, #0]
 800adbe:	b016      	add	sp, #88	; 0x58
 800adc0:	bd70      	pop	{r4, r5, r6, pc}
 800adc2:	466a      	mov	r2, sp
 800adc4:	f000 f848 	bl	800ae58 <_fstat_r>
 800adc8:	2800      	cmp	r0, #0
 800adca:	dbec      	blt.n	800ada6 <__swhatbuf_r+0x12>
 800adcc:	9901      	ldr	r1, [sp, #4]
 800adce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800add2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800add6:	4259      	negs	r1, r3
 800add8:	4159      	adcs	r1, r3
 800adda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adde:	e7eb      	b.n	800adb8 <__swhatbuf_r+0x24>

0800ade0 <__smakebuf_r>:
 800ade0:	898b      	ldrh	r3, [r1, #12]
 800ade2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ade4:	079d      	lsls	r5, r3, #30
 800ade6:	4606      	mov	r6, r0
 800ade8:	460c      	mov	r4, r1
 800adea:	d507      	bpl.n	800adfc <__smakebuf_r+0x1c>
 800adec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	6123      	str	r3, [r4, #16]
 800adf4:	2301      	movs	r3, #1
 800adf6:	6163      	str	r3, [r4, #20]
 800adf8:	b002      	add	sp, #8
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	ab01      	add	r3, sp, #4
 800adfe:	466a      	mov	r2, sp
 800ae00:	f7ff ffc8 	bl	800ad94 <__swhatbuf_r>
 800ae04:	9900      	ldr	r1, [sp, #0]
 800ae06:	4605      	mov	r5, r0
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7fe febd 	bl	8009b88 <_malloc_r>
 800ae0e:	b948      	cbnz	r0, 800ae24 <__smakebuf_r+0x44>
 800ae10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae14:	059a      	lsls	r2, r3, #22
 800ae16:	d4ef      	bmi.n	800adf8 <__smakebuf_r+0x18>
 800ae18:	f023 0303 	bic.w	r3, r3, #3
 800ae1c:	f043 0302 	orr.w	r3, r3, #2
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	e7e3      	b.n	800adec <__smakebuf_r+0xc>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	6020      	str	r0, [r4, #0]
 800ae28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	9b00      	ldr	r3, [sp, #0]
 800ae30:	6163      	str	r3, [r4, #20]
 800ae32:	9b01      	ldr	r3, [sp, #4]
 800ae34:	6120      	str	r0, [r4, #16]
 800ae36:	b15b      	cbz	r3, 800ae50 <__smakebuf_r+0x70>
 800ae38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f000 f81d 	bl	800ae7c <_isatty_r>
 800ae42:	b128      	cbz	r0, 800ae50 <__smakebuf_r+0x70>
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	f023 0303 	bic.w	r3, r3, #3
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	81a3      	strh	r3, [r4, #12]
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	431d      	orrs	r5, r3
 800ae54:	81a5      	strh	r5, [r4, #12]
 800ae56:	e7cf      	b.n	800adf8 <__smakebuf_r+0x18>

0800ae58 <_fstat_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d07      	ldr	r5, [pc, #28]	; (800ae78 <_fstat_r+0x20>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	4611      	mov	r1, r2
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	f7f6 f894 	bl	8000f92 <_fstat>
 800ae6a:	1c43      	adds	r3, r0, #1
 800ae6c:	d102      	bne.n	800ae74 <_fstat_r+0x1c>
 800ae6e:	682b      	ldr	r3, [r5, #0]
 800ae70:	b103      	cbz	r3, 800ae74 <_fstat_r+0x1c>
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	bd38      	pop	{r3, r4, r5, pc}
 800ae76:	bf00      	nop
 800ae78:	2400047c 	.word	0x2400047c

0800ae7c <_isatty_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d06      	ldr	r5, [pc, #24]	; (800ae98 <_isatty_r+0x1c>)
 800ae80:	2300      	movs	r3, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f7f6 f893 	bl	8000fb2 <_isatty>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_isatty_r+0x1a>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_isatty_r+0x1a>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	2400047c 	.word	0x2400047c

0800ae9c <_init>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	bf00      	nop
 800aea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea2:	bc08      	pop	{r3}
 800aea4:	469e      	mov	lr, r3
 800aea6:	4770      	bx	lr

0800aea8 <_fini>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	bf00      	nop
 800aeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeae:	bc08      	pop	{r3}
 800aeb0:	469e      	mov	lr, r3
 800aeb2:	4770      	bx	lr
